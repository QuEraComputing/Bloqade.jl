var documenterSearchIndex = {"docs":
[{"location":"units/#Working-with-Units","page":"Working with Units","title":"Working with Units","text":"","category":"section"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"Unit conversion can be both tedious and prone to errors when working with simulation of real quantum hardware.  In Bloqade, the physical variables can support units explicitly from the Unitful package. Explicit units will be converted to our default units set automatically.  In other words,  you can use a different unit set to create the Hamiltonian other than the default units, and not worry about conversion yourself.  For detailed information about  the default unit of the Hamiltonian, please refer to the Bloqade page.","category":"page"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"using Bloqade\nusing Unitful: kHz, µm\nrydberg_h([(1, ), (2, )], C = 2π * 109.2kHz * µm^6)","category":"page"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"In the above example, we have assigned the parameter C_6 with the unit kHz * μm^6, which is automatically converted to the default unit MHz * µm^6 in Bloqade. ","category":"page"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"Other than the Hamiltonian, we can also specify units on waveforms, e.g.: ","category":"page"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"using Unitful: rad, ms\n\nwf = piecewise_linear(clocks=[0.0ms, 0.1ms, 0.2ms], values= [0.1, 1.1, 2.1] .* (rad/ms))\nBloqade.plot(wf)","category":"page"},{"location":"units/","page":"Working with Units","title":"Working with Units","text":"From this plot, we can see that the units for clocks and values have been converted to μs and MHz respectively. ","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/3.quantum-scar/main.jl\"","category":"page"},{"location":"tutorials/3.quantum-scar/main/#Quantum-Scar","page":"Quantum Scar","title":"Quantum Scar","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/#Background","page":"Quantum Scar","title":"Background","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"The experimental study by H. Bernien et al. (10.1038/nature24622) discovered that if one starts with a particular initial state (e.g. the Neel state), the Rydberg blockade constraint results into persistent revivals of quantum dynamics, in contrast to the expectation of reaching thermalization quickly. Later, theoretical studies (e.g. C. J. Turner et al. (10.1038/s41567-018-0137-5)) reveal that this behavior is due to special eigenstates embedded in the quantum many-body spectrum, and the phenomenon is called quantum many-body scars.","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Quantum many-body scars are analogous to the phenomenon of classical scars in single-particle quantum chaos, where scars represent a concentration of some eigenfunctions along the trajectory of classical periodic orbits. Similarly, in the quantum many-body case, the initial Neel state has a large overlap of these specific scar states. Under the time evolution of the Rydberg Hamiltonian, the initial state undergoes the trajectory of periodic quantum orbits. The non-thermal behavior is mainly caused by such non-ergodicity in the Hilbert space.","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"In this example, we use Bloqade to simulate the evolution of a fully coherent, strongly interacting Rydberg system.  We demonstrate the persistent revivals of many-body dynamics with measurements of the Rydberg density and entanglement entropy. For a comprehensive review of quantum many-body scars, we refer readers to the paper M. Serbyn et al. (10.1038/s41567-021-01230-2)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"In this tutorial, we provide an example of using Bloqade to simulate quantum many-body scars. To start, we first import the required libraries:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"using Bloqade\nusing PythonCall\nusing Random\n\nplt = pyimport(\"matplotlib.pyplot\");","category":"page"},{"location":"tutorials/3.quantum-scar/main/#Many-Body-Rabi-Oscillations-with-Rydberg-Blockade","page":"Quantum Scar","title":"Many-Body Rabi Oscillations with Rydberg Blockade","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We first demonstrate that the strong Rydberg interactions have important effects on the Rabi oscillations of Rydberg atoms. To do so, we consider a system with 1, 2, and 3 atoms. All the atoms are placed within the blockade radius of any other atom (see the Rydberg Blockade tutorial for more details). The atom positions can be created as:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"atom1 = generate_sites(ChainLattice(), 1, scale = 3.0)\natom2 = generate_sites(ChainLattice(), 2, scale = 3.0)\natom3 = generate_sites(ChainLattice(), 3, scale = 3.0)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Let's apply a resonant Rabi drive on each atom. The Hamiltonians can be simply constructed by:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"h1 = rydberg_h(atom1; Δ = 0, Ω = 2π * 2)\nh2 = rydberg_h(atom2; Δ = 0, Ω = 2π * 2)\nh3 = rydberg_h(atom3; Δ = 0, Ω = 2π * 2)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"nqubits: 3\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] 2π ⋅ ∑ σ^x_i\n└─ [-] 2π ⋅ 0.0 ⋅ ∑ n_i\n","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"The initial states are chosen such that all atoms start from the ground state:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"reg1 = zero_state(1)\nreg2 = zero_state(2)\nreg3 = zero_state(3)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We first simulate the dynamics for the single atom's case, where the initial state is quenched under a Hamiltonian with constant Rabi frequency:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"total_time = 1.5\nclocks = 0.0:1e-2:total_time\nprob1 = KrylovEvolution(reg1, clocks, h1)\ndensity1 = zeros(1, length(clocks));\n\nfor info in prob1\n    density1[1, info.step] = rydberg_density(info.reg, 1)\nend","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Here, we use a KrylovEvolution object to simulate the dynamics for a time-independent Hamiltonian. One can also use ODE to simulate the dynamics. For an example, see the Adiabatic Evolution tutorial. The Rydberg density of this atom exhibits Rabi oscillations as a function of time, shown by the plot below:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"fig, ax = plt.subplots()\nax.plot(clocks, density1[1, :])\nax.set_xlabel(\"Time (μs)\")\nax.set_ylabel(\"Single Rydberg Probability\")\nax.set_title(\"Rabi Oscillation: Single Atom Case\")\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"For the case of 2 and 3 atoms, if they are separated far enough with negligible interactions, the total Rydberg excitation densities are simply the sum of the Rydberg density for each atom. However, we show that this is not the case for systems when atoms are close to each other (which results in strong Rydberg interactions). Similar to the 1 atom case, we can simulate the dynamics and get the time-dependent dynamics for each atom:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"prob2 = KrylovEvolution(reg2, clocks, h2);\ndensity2 = zeros(2, length(clocks));\n\nfor info in prob2\n    for i in 1:2\n        density2[i, info.step] = rydberg_density(info.reg, i)\n    end\nend\ndensity2 = sum(density2, dims = 1);\n\nprob3 = KrylovEvolution(reg3, clocks, h3);\ndensity3 = zeros(3, length(clocks));\n\nfor info in prob3\n    for i in 1:3\n        density3[i, info.step] = rydberg_density(info.reg, i)\n    end\nend\ndensity3 = sum(density3, dims = 1);","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Because of the Rydberg blockade, the system will undergo many-body Rabi oscillation with the state oscillating between the all 0 state (Ket0 ldots 0) and the W state (1sqrt2(Ket0 ldots 0 + Ket010 ldots 0 + Ket0 ldots 1)), where the Rabi frequency will be enhanced by sqrtN, where N is the number of atoms. For more information, please refer to H. Bernien, et al. (10.1038/nature24622). The total Rydberg density for the 1-, 2-, and 3-atom system is plotted below:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"fig, ax = plt.subplots()\nax.plot(clocks, density1[1, :])\nax.plot(clocks, density2[1, :])\nax.plot(clocks, density3[1, :])\nax.set_xlabel(\"Time (μs)\")\nax.set_ylabel(\"Rydberg Probability\")\nax.set_title(\"Many-body Rabi Oscillation for 1-, 2-, and 3-atom system\")\nax.legend([\"1 atom\", \"2 atoms\", \"3 atoms\"], loc = \"lower right\")\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"From this plot, we can see that the total Rydberg density for 2 (3) atom case does not exceed 1. This is because it is energetically unfavorable to have more than 1 excitation due to the strong Rydberg interactions. In addition, we can see the enhancement of the many-body Rabi frequency. This shows that the interactions play an important role in the system's dynamics.","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Below, we show that for a system with 9 atoms where only nearest-neighbor atoms in a chain are within each other's blockade radius, the system can exhibit nontrivial dynamics for certain initial states, the so-called quantum many-body scars.","category":"page"},{"location":"tutorials/3.quantum-scar/main/#Quantum-Scar-2","page":"Quantum Scar","title":"Quantum Scar","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/#Create-the-lattice-and-the-Hamiltonian","page":"Quantum Scar","title":"Create the lattice and the Hamiltonian","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We first create a 9-atom system with a 1D-chain arrangement, where each atom is separated from its neighbors by 5.72 μm. This results in a nearest-neighbor interaction strength of 2 pi times 24 MHz, which is much larger than the Rabi frequency Omega specified below. Thus, the nearest-neighbor Rydberg atoms are within the blockade radius and cannot be both excited simultaneously:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"nsites = 9\natoms = generate_sites(ChainLattice(), nsites, scale = 5.72)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"The waveforms are made up of two parts. For the first part, we use the adiabatic evolution to prepare an ordered Neel state (see the Adiabatic Evolution tutorial for more details):","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Δ1 = piecewise_linear(clocks = [0.0, 0.3, 1.6, 2.2], values = 2π * [-10.0, -10.0, 10.0, 10.0]);\nΩ1 = piecewise_linear(clocks = [0.0, 0.05, 1.6, 2.2], values = 2π * [0.0, 4.0, 4.0, 0.0]);","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"The second part of the waveform has constant values for the parameters, so we can use constant to construct them:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Ω2 = constant(duration = 2.0, value = 2 * 2π);\nΔ2 = constant(duration = 2.0, value = 0);","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"The waveform for the whole evolution can be composed by appending the second part to the first part via append:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Ω_tot = append(Ω1, Ω2);\nΔ_tot = append(Δ1, Δ2);\n\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nBloqade.plot!(ax1, Ω_tot)\nBloqade.plot!(ax2, Δ_tot)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Note that the total evolution time is 4.2 μs. We then build the Hamiltonian by importing the defined lattice structure and waveforms:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"h = rydberg_h(atoms; Δ = Δ_tot, Ω = Ω_tot)","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"nqubits: 9\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] Ω(t) ⋅ ∑ σ^x_i\n└─ [-] Δ(t) ⋅ ∑ n_i\n","category":"page"},{"location":"tutorials/3.quantum-scar/main/#Simulating-the-Quantum-Dynamics","page":"Quantum Scar","title":"Simulating the Quantum Dynamics","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We now simulate the quench dynamics of the Rydberg atom array (initially prepared in the ground state). The initial state can be created by:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"reg = zero_state(nsites);","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We can then simulate the time evolution of the quantum state using an ODE solver:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"total_time = 4.2;\nprob = SchrodingerProblem(reg, total_time, h);\nintegrator = init(prob, Vern8());","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"Then, we measure the real-time expectation value of the Rydberg density and entanglement entropy:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"entropy = Float64[]\ndensities = []\nfor _ in TimeChoiceIterator(integrator, 0.0:1e-3:total_time)\n    push!(densities, rydberg_density(reg))\n    rho = density_matrix(reg, (1, 2, 3, 4, 5)) # calculate the reduced density matrix\n    push!(entropy, von_neumann_entropy(rho)) # compute entropy from the reduced density matrix\nend","category":"page"},{"location":"tutorials/3.quantum-scar/main/#Plotting-the-Results","page":"Quantum Scar","title":"Plotting the Results","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We first plot the Rydberg density for each site as a function of time:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"clocks = 0:1e-3:total_time\nD = hcat(densities...)\n\nfig, ax = plt.subplots(figsize = (10, 4))\nshw = ax.imshow(real(D), interpolation = \"nearest\", aspect = \"auto\", extent = [0, total_time, 0.5, nsites + 0.5])\nax.set_xlabel(\"time (μs)\")\nax.set_ylabel(\"site\")\nax.set_xticks(0:0.4:total_time)\nax.set_yticks(1:nsites)\nbar = fig.colorbar(shw)\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We can see that the state evolves to a Neel state after the first part of the pulse (time around 2.2 μs). After that, there are clear oscillations between the two patterns of the Rydberg density, which is a signature of the quantum scar.","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"We can also plot the entanglement as a function of time:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"fig, ax = plt.subplots(figsize = (10, 4))\nax.plot(clocks, entropy)\nax.set_xlabel(\"time (μs)\")\nax.set_ylabel(\"entanglement entropy\")\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/#A-Different-Initial-State","page":"Quantum Scar","title":"A Different Initial State","text":"","category":"section"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"In order to see that the revivals depends strongly on the initial state, we now choose a different initial state, and use the KrylovEvolution solver to simulate the dynamics:","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"hd = rydberg_h(atoms; Ω = 4π)\ntotal_time = 1.2;\nclocks = 0.0:1e-2:total_time;\n\ninit_d = product_state(bit\"100000101\")\nprob_d = KrylovEvolution(init_d, clocks, hd)\ndensity_mat_d = zeros(nsites, length(clocks))\n\nfor info in prob_d\n    for i in 1:nsites\n        density_mat_d[i, info.step] = rydberg_density(info.reg, i)\n    end\nend\n\nfig, ax = plt.subplots(figsize = (10, 4))\nshw = ax.imshow(\n    real(density_mat_d),\n    interpolation = \"nearest\",\n    aspect = \"auto\",\n    extent = [0, total_time, 0.5, nsites + 0.5],\n)\nax.set_xlabel(\"time (μs)\")\nax.set_ylabel(\"site\")\nax.set_xticks(0:0.2:total_time)\nax.set_yticks(1:nsites)\nbar = fig.colorbar(shw)\nfig","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"(Image: )","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"From this figure, we see that the density does not show long-lived oscillations.","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"","category":"page"},{"location":"tutorials/3.quantum-scar/main/","page":"Quantum Scar","title":"Quantum Scar","text":"This page was generated using Literate.jl.","category":"page"},{"location":"install/#install","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"You can copy the following line to your Julia REPL to install the latest stable version of this package:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add Bloqade","category":"page"},{"location":"install/#Low-Latency-Usage-of-Bloqade-Component-Packages","page":"Installation","title":"Low-Latency Usage of Bloqade Component Packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"The Bloqade project contains multiple packages. For development on top of functionality, (especially for those who do not need the ODE solvers), we recommend you use the corresponding component packages. The following is a list of component packages and what they do (WIP = work-in-progress)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"BloqadeExpr: Expressions and API definitions for Bloqade.\nBloqadeKrylov: Krylov-subspace based emulation.\nBloqadeLattices: objects, functions for lattices.\nBloqadeMIS: tools for working with maximum-independent sets in Rydberg system.\nBloqadeODE: ODE-based emulation.\nBloqadePython: WIP, python wrapper for the Bloqade package.\nBloqadeQMC: WIP, Stochastic Series Expansion for Rydberg system.\nBloqadeSchema: WIP, the schema for creating a task for Bloqade and QuEra machine.\nBloqadeWaveforms: the waveform objects.\nYaoSubspaceArrayReg: register object and functions in a subspace.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"All the non-WIP packages are registered in the General registry. Thus, you can add them as your dependency by directly running pkg> add <component package> in your Julia REPL.","category":"page"},{"location":"install/#Try-the-Latest-Version-of-Bloqade","page":"Installation","title":"Try the Latest Version of Bloqade","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Some users may want to try the latest version of Bloqade for bug fixes, new features, etc. One can use git to clone the repo to try the latest version of the entire package. This requires one to setup the local project environment via dev. Please refer to the page Contributing to Bloqade for more information.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you only want to try the latest version of a specific Bloqade package, just add #master after the package name, e.g.:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add BloqadeExpr#master","category":"page"},{"location":"install/#Using-Bloqade-with-Amazon-EC2","page":"Installation","title":"Using Bloqade with Amazon EC2","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Bloqade can be deployed on any personal computer although some users might benefit from the extra performance offered by large computational resources from different providers. To address that, Bloqade is also available on the Amazon Web Services (AWS) Marketplace, and can run on Amazon EC2 instances by deploying Amazon Machine Images (AMIs) onto them. More information about the AMIs and how to deploy them onto EC2 instances can be found below.","category":"page"},{"location":"install/#Bloqade-AMIs","page":"Installation","title":"Bloqade AMIs","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"There are two AMIs offered by the Bloqade team:","category":"page"},{"location":"install/#Bloqade-AMI-(Base-Image)","page":"Installation","title":"Bloqade AMI (Base Image)","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Built on top of Ubuntu Server 20.04 LTS, this image includes","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"The latest version of Julia and Bloqade\nYao.jl\nRevise.jl\nBenchmarkTools.jl\nPythonCall.jl \nConda package manager, provided by Miniconda ","category":"page"},{"location":"install/#Bloqade-CUDA-AMI","page":"Installation","title":"Bloqade CUDA AMI","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Built on top of an Amazon DLAMI (Deep Learning AMI) on Ubuntu 20.04, this AMI includes everything from the Base Image above along with:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"NVIDIA CUDA\ncuDNN\nNCCL\nGPU Drivers\nIntel MKL-DNN\nDocker\nNVIDIA-Docker\nEFA support\nSupport for Block devices","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"as well as:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"CUDA.jl\nAdapt.jl ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Both of which are needed for Bloqade to take advantage of GPUs (see GPU Acceleration for more on how to do this). ","category":"page"},{"location":"install/#Disclaimers","page":"Installation","title":"Disclaimers","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"info: Info\nDeploying Bloqade on Amazon EC2 instances will incur a cost on the user that will depend on the AWS resources utilized.  \nSupport on deploying Bloqade on AWS can be obtained via AWS Support. This is a one-on-one support channel that is staffed 24x7x365 with experienced support engineers. To learn more, follow this link.","category":"page"},{"location":"install/#Step-0:-Set-Your-AWS-Region","page":"Installation","title":"Step 0: Set Your AWS Region","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"For general guidelines on launching EC2 instances, check out the Amazon EC2 tutorial. Bloqade can technically be run from any location but its images are hosted on servers in AWS' North Virginia (N. Virginia) region. To get started as easily as possible, set your AWS region location to N. Virginia (us-east-1).","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 0)","category":"page"},{"location":"install/#Step-1:-Access-the-EC2-Service","page":"Installation","title":"Step 1: Access the EC2 Service","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Now to really get started. On your AWS account portal, type EC2 on the search bar and access the EC2 Service","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 1)","category":"page"},{"location":"install/#Step-2:-Launch-Your-Instance","page":"Installation","title":"Step 2: Launch Your Instance","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Find the \"Launch Instance\" button, circled in red, to create one. To see all currently running instances, click the \"Instances (running)\" button, indicated by the red arrow.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 2)","category":"page"},{"location":"install/#Step-3:-Name-Your-Instance","page":"Installation","title":"Step 3: Name Your Instance","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Give your instance a memorable name...","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 3)","category":"page"},{"location":"install/#Step-4:-Choose-an-Image","page":"Installation","title":"Step 4: Choose an Image","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"...and choose Bloqade as an image. This will put the AMI on the instance which has Bloqade and all its dependencies ready to go.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"To find the Bloqade image you can search for it by typing in \"Bloqade\" in the search bar: ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 4.1)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Upon hitting enter, ensure you're in the \"AWS Marketplace AMIs\" section and select which image you'd like to use:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 4.2)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Upon reviewing the information on the AMI and hitting \"Continue\" you'll be returned to the Instance page to continue customizing it.","category":"page"},{"location":"install/#Step-5:-Select-Your-Instance","page":"Installation","title":"Step 5: Select Your Instance","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Select the EC2 instance type. Note that the rate at which your charged is dependent on which instance you select. Those with larger RAM/power usually charge more. For simple usage, we recommend an m2.xlarge instance as a basic choice. If you are looking for GPU support consider the g4dn.xlarge instance as a starting point.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"More information on available instances and the ability to compare between them you can visit instances.vantage.sh.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 5)","category":"page"},{"location":"install/#Step-6:-Generate-a-Key-Pair","page":"Installation","title":"Step 6: Generate a Key Pair","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In order to access your instance from your local machine's terminal you will need to generate a key pair in advance. Click on \"Create new key pair\" as circled in the image. ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 6.1)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Give your key pair a memorable name and once you have selected your desirable key pair type and file format click \"Create key pair\".","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 6.2)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"A download should happen in your browser that gives you your private key. If you are a PuTTY user you will need to import this key into your client. If you are are a Linux/macOS user using an SSH client from the terminal, you should put the key in your ~/.ssh folder although any other location will work with the caveat being you will have to specify the exact path to the key when invoking ssh as an argument to the command.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"You will also need to run the following command to set the proper permissions on the private key:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"chmod 400 </path/to/your_key>","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"After launching your instance there will be two ways you can connect to it, shown in the later steps of this guide.","category":"page"},{"location":"install/#Step-7:-Tune-Your-Instance-Some-More","page":"Installation","title":"Step 7: Tune Your Instance Some More","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Select your security group. This depends on either your personal setup, company security practices, or AWS best practices.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 7)","category":"page"},{"location":"install/#Step-8:-Blast-Off!","page":"Installation","title":"Step 8: Blast Off!","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Launch your instance!","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 8.1)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"You should be presented with the following screen:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 8.2)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you click on the instance hyperlink or the \"View all instances\" button, you'll be brought to the Instances page which shows all currently running as well as previously terminated/stopped instances. This page is also accessible from EC2 service page,  accessible via the directions in Step 2.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Select your instance from the \"Instances\" menu by clicking the checkbox next to the desired instance. A \"Connect\" button should be clickable in the upper right corner.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 8.3)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This should bring you to a \"Connect to instance\" page where you can navigate to the \"SSH client\" section.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(Image: Step 8.4)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"From here you have one of two choices to connect with your instance:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"warning: Default User Notice\nWhen logging in to your EC2 instance, the recommended user to login as is the ubuntu user (the default, non-root user from the Ubuntu base images the Bloqade AMIs are based off of). Using root is not advised and unsupported by the Bloqade team. You will notice the \"SSH Client\" section in the photo above still gives the ssh -i ... command with \"root\" as the username. This must be changed to ubuntu IF you intended to use Option 1 below. Option 2 already accounts for this.","category":"page"},{"location":"install/#Option-1:-Instant-Command-Line-Access","page":"Installation","title":"Option 1: Instant Command Line Access","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"If you just want to connect to the instance as fast as possible and plan on either:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Keeping the instance alive for the duration of your work\nTerminating (the equivalent of completely deleting an instance) and starting new instances frequently","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Just copy and paste the example at the very bottom (the command starting with ssh -i ...), changing the user to ubuntu from root. If your key is not located in the ~/.ssh folder for Linux/macOS users, you will need to either navigate to the folder you have the key stored to in the command line and execute the command there OR specify the full path to the key as the string in front of -i. ","category":"page"},{"location":"install/#Option-2:-OpenSSH-Config-File","page":"Installation","title":"Option 2: OpenSSH Config File","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"If you plan on reusing the same instance (stopping and starting it, thereby preserving your work on the EBS (Elastic Block Storage), essentially the hard drive of your instance) instance that the EC2 instance uses by default, you can set defaults for signing in by creating (if the file does not exist)/editing (if the file does exist) your OpenSSH config found in your ~/.ssh folder. Just add the following using vim or your favorite text editor:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Host AWS\n    HostName <DNS NAME, ex: ec2-3-93-200-58.compute-1.amazonaws.com>\n    User ubuntu\n    IdentityFile ~/.ssh/<PATH TO YOUR KEY>.pem","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"You can find your DNS name by following the steps mentioned in Option 1 but focusing on Step 4, which is \"Connect to your instance using its Public DNS\".","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Upon saving the changes, you should be able to access your instance by running ssh AWS in your command line.","category":"page"},{"location":"install/#Step-9:-Shutting-Down-Your-Instance","page":"Installation","title":"Step 9: Shutting Down Your Instance","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In order to shut down your instance, you can return to the \"Instances\" menu shown in Step 8, select your instance, and click the \"Instance State\" Drop down. ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"You can either:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Stop your Instance - This preserves any files you may have created working in the instance that were on the EBS but will come at a cost, determinable here. You may reuse the instance by selecting it again in the \"Instances\" menu and selecting \"Start\".\nTerminating your Instance - This does NOT preserve any files and means you will lose any work not transferred off the instance to your local machine. Termination deletes the EBS instance that your instance uses and you will not be charged afterwards for storage.","category":"page"},{"location":"install/#Build-System-Images-to-Accelerate-Start-up-Time","page":"Installation","title":"Build System Images to Accelerate Start-up Time","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Since Bloqade is a large package, its loading time and time-to-first-simulation can be very long. You can build system images to save all the compilation results in a binary to accelerate its loading/compilation time. This is useful when you have lots of interactive programming needs with Bloqade.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"To build a system image for your environment, please use the PackageCompiler or use the Julia VSCode plugin's build system image feature","category":"page"},{"location":"install/#Contributing-to-Bloqade","page":"Installation","title":"Contributing to Bloqade","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Please git clone this repository to a directory of your choice on your local machine and refer to Contributing to Bloqade to see how to set up your development environment for Bloqade.","category":"page"},{"location":"contrib/#contrib","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"If you are interested in contributing to this package, please consider going through this guide to help make your development workflow as smooth as possible.","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"Contributing to documentation and unit tests are always great ways to get yourself familiar with the community and workflows.","category":"page"},{"location":"contrib/#CLI-Tool","page":"Contributing to Bloqade","title":"CLI Tool","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"There is a CLI tool in this repository at .ci/run that can help you simplify your workflow substantially. You can run .ci/run -h in your terminal to see the help message. or run .ci/run <command> -h to see the help message of each command. Below are some common use cases.","category":"page"},{"location":"contrib/#Documentation","page":"Contributing to Bloqade","title":"Documentation","text":"","category":"section"},{"location":"contrib/#Setup-Documentation","page":"Contributing to Bloqade","title":"Setup Documentation","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"If you are editing the documentation, you can use the serve command:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run doc serve","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"to serve the documentation locally, and it will automatically update the served webpage while you are editing. ","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"If you wish to just build the documentation, you can use build command, which will run the build:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run doc build","category":"page"},{"location":"contrib/#Light-weight-Documentation-Build","page":"Contributing to Bloqade","title":"Light-weight Documentation Build","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"Due to the \"ancient\" technology used by Documenter, it cannot render single page while editing, which causes the doc serve command to be very slow when you are editing. We provide a light-weight build setup to workaround this by removing all literate examples from the documentation. You can enable this by:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run doc build --light\n.ci/run doc serve --light","category":"page"},{"location":"contrib/#Setting-Up-Environments","page":"Contributing to Bloqade","title":"Setting Up Environments","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"The Bloqade package itself is a meta-package that simply re-exports component packages that live in the lib directory. Thus, one will need to dev the corresponding component package to make sure they are using the master branch version while developing. You can always do this manually in Julia's Pkg mode via the dev command. For example, in the Bloqade environment (the Bloqade/Project.toml file), one will need to run the following command:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"pkg> dev lib/BloqadeExpr lib/BloqadeKrylov lib/BloqadeLattices lib/BloqadeMIS lib/BloqadeODE lib/BloqadeWaveforms","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"This can be done automatically using the CLI tool via:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run dev","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"How does this work? The .ci/run dev command actually calls the Pkg.develop command from Julia's package manager. Because we want to use the local changes of the package, one will need to dev the corresponding package to  make the changes happen in your current environment, e.g one will need to dev  the lib/BloqadeExpr package to apply changes in BloqadeExpr module.","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"We also provide a convenient tool to setup this more automatically by looking up dependencies in lib in one's Project.toml file,","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run dev <path/to/your/environment>","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"will dev all the Bloqade dependencies in your environment.","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"See also Modifying A Dependency for more detailed explanations.","category":"page"},{"location":"contrib/#Create-New-Examples","page":"Contributing to Bloqade","title":"Create New Examples","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"Create a new example project called my_new_examples in examples and setup the dependencies of Bloqade:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run example create my_new_example","category":"page"},{"location":"contrib/#Build-a-Single-Example","page":"Contributing to Bloqade","title":"Build a Single Example","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"Build a single example at build/my_example to jupyter notebook:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run example build my_example","category":"page"},{"location":"contrib/#Run-Unit-Tests","page":"Contributing to Bloqade","title":"Run Unit Tests","text":"","category":"section"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"If you are developing unit tests or would like to verify that changes made to any of Bloqade's code have not broken existing functionality, you can run unit tests for a specific sub-package like so:","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run test path_to_sub_package","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":"You can also run ALL tests for the package using ","category":"page"},{"location":"contrib/","page":"Contributing to Bloqade","title":"Contributing to Bloqade","text":".ci/run testall","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/5.MIS/main.jl\"","category":"page"},{"location":"tutorials/5.MIS/main/#mis-tutorial","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"","category":"section"},{"location":"tutorials/5.MIS/main/#Background","page":"The Maximum Independent Set Problem","title":"Background","text":"","category":"section"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"In graph theory, an independent set is a set of vertices in a graph such that no two of which are connected by an edge. The problem of finding Maximum Independent Sets (MISs) is NP-hard, i.e., it is unlikely to be solved in a time polynomial to the problem size. Interestingly, there is a natural connection between the independent set constraint, and the Rydberg Blockade phenomenon in neutral-atom quantum computing using Rydberg states. More specifically, the Rydberg blockade implies that two atoms cannot be both excited to the Rydberg state Ketr if they are close to each other, whereas the independent set constraint means two vertices cannot be both in the independent set when they are connected by an edge. Thus, one can consider atoms in the Rydberg state as vertices in an independent set. See the proposal in H. Pichler et al. (10.48550/arXiv.1808.10816) for more details.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"In particular, one can use the ground state of the Rydberg Hamiltonian to encode the Maximum Independent Set problem, which is to find the largest independent set of a given graph. For a particular subclass of geometric graphs, the so-called unit disk graphs, the Rydberg Hamiltonian can encode the solution without any overhead in the number of qubits. In fact, an experimental demonstration of quantum optimization has been realized in solving the Maximum Independent Set problem on up to 289 qubits in S. Ebadi et al. (10.48550/arXiv.2202.09372).","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"In this tutorial, we show how to solve the MIS problem using Bloqade. We focus on a particular subclass of unit disk graphs defined as Diagonal-connected Unit-disk Grid Graphs (DUGG). This is the class of graphs studied in the demonstration experiment S. Ebadi et al. (10.48550/arXiv.2202.09372). Although these graphs have highly constrained topologies, finding its MISs is still NP-hard. Here, we show how to use variational quantum algorithms with Rydberg Hamiltonians to solve the MIS problem on these graphs. The tutorial here strongly resembles the setup in S. Ebadi et al. (10.48550/arXiv.2202.09372), with the limitation that Bloqade can only simulate a much smaller problem.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"For more details on the functionalities supported by Bloqade in studying independent set problems, please refer to the Maximum Independent Set page in the Manual.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let's start by importing the required libraries:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"using Graphs\nusing Bloqade\nusing Random\nusing GenericTensorNetworks\nusing Optim\nusing PythonCall\nplt = pyimport(\"matplotlib.pyplot\");","category":"page"},{"location":"tutorials/5.MIS/main/#Setting-Up-the-Problem","page":"The Maximum Independent Set Problem","title":"Setting Up the Problem","text":"","category":"section"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"To begin, we create a 4 times 4 DUGG with 0.8 filling, by using the random_dropout function. Here, we choose the lattice constant a to be 4.5 μm:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Random.seed!(2)\natoms = generate_sites(SquareLattice(), 4, 4; scale = 4.5) |> random_dropout(0.2)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Next, we set the blockade radius to be 7.5 μm, corresponding to a case where nearest neighbors and next-nearest neighbors (diagonal from the initial atom) are within the blockade radius. As we discussed in the Rydberg Blockade tutorial, only one Rydberg excitation is allowed within the blockade radius. To better illustrate this constraint, we plot the interactions of Rydberg atoms as a DUGG, where each edge corresponds to the blockade constraint given by the blockade radius:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Bloqade.plot(atoms, blockade_radius = 7.5)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Our goal is to find a maximum independent set of such a graph.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"For comparison, we first use classical algorithms to calculate the MIS size here using the graph utilities in Bloqade, so that one can compare this exact result with the quantum algorithms. The exact MIS size and its degeneracy can be solved with the generic tensor network algorithm (J. Liu et al. (10.48550/arXiv.2205.03718)) in the package GenericTensorNetworks:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"graph = BloqadeMIS.unit_disk_graph(atoms, 7.5)\nmis_size_and_counting = GenericTensorNetworks.solve(IndependentSet(graph), CountingMax())[]","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(4.0, 26.0)ₜ","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The solve function takes a graph instance and a solution space property as inputs, where the graph instance is generated by the unit_disk_graph function in the Bloqade submodule BloqadeMIS, and the solution space property is to count the number of maximum independent sets here. For this specific DUGG, we see that the MIS size is 4, and the number of possible Maximum Independent Sets is 26. In the following, we are going to show how to solve the independent set problem with both quantum adiabatic and variational algorithms.","category":"page"},{"location":"tutorials/5.MIS/main/#The-Adiabatic-Approach","page":"The Maximum Independent Set Problem","title":"The Adiabatic Approach","text":"","category":"section"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Here, we generalize the quantum adiabatic algorithm used in the Adiabatic Evolution tutorial to prepare ground states of the Rydberg Hamiltonian for this disordered lattice. We first construct the adiabatic pulse sequences for the Rabi frequency Omega and the detuning Delta:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"T_max = 0.6\nΩ_max = 2π * 4\nΩ = piecewise_linear(clocks = [0.0, 0.1, 0.5, T_max], values = [0.0, Ω_max, Ω_max, 0])\nΔ_start = -2π * 13\nΔ_end = 2π * 11\nΔ = piecewise_linear(clocks = [0.0, 0.1, 0.5, T_max], values = [Δ_start, Δ_start, Δ_end, Δ_end])\n\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nBloqade.plot!(ax1, Ω)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nBloqade.plot!(ax2, Δ)\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Here, the total time is fixed to T_max, the adiabatic evolution path is specified by the piecewise_linear function. The Rydberg blockade radius can be computed with","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"C_6  R_b^6 sim sqrtDelta^2 + Omega^2","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The default for C_6=2π * 862690 text MHz μm^6. For encoding the corresponding MIS problem at Omega = 0, the detuning can be set around 2pi times 11 MHz for a blockade radius of 75 µm (see the parameters in S. Ebadi et al. (10.48550/arXiv.2202.09372)).","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Next, we create the time-dependent Hamiltonian and simulate its time evolution by using the SchrodingerProblem solver:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"hamiltonian = rydberg_h(atoms; Ω = Ω, Δ = Δ)\nprob = SchrodingerProblem(zero_state(nqubits(hamiltonian)), T_max, hamiltonian)\nemulate!(prob)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"SchrodingerProblem:\n  register info:\n    type: YaoArrayRegister.ArrayReg{2, ComplexF64, Matrix{ComplexF64}}\n    storage size: 8 bytes\n\n  time span (μs): (0.0, 0.6)\n\n  equation: \n    storage size: 1.688 MiB\n    expression:\nnqubits: 13\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] Ω(t) ⋅ ∑ σ^x_i\n└─ [-] Δ(t) ⋅ ∑ n_i\n\n\n    algorithm: DP8(stage_limiter! = trivial_limiter!, step_limiter! = trivial_limiter!, thread = static(false))\n  options:\n    save_everystep: false\n    save_start: false\n    save_on: false\n    dense: false\n    reltol: 1.0e-10\n    abstol: 1.0e-10\n","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Finally, we can plot the most probable bitstrings by using the bitstring_hist function on the resulting register (quantum state):","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"bitstring_hist(prob.reg; nlargest = 20)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We can see that some of the most probable configurations indeed have an independent set size 4 by counting the number of ones in the bitstring. The correctness of the output can be verified by comparing it to the classical solution:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"best_bit_strings = most_probable(prob.reg, 2)\nall_optimal_configs = GenericTensorNetworks.solve(IndependentSet(graph), ConfigsMax())[]\n@assert all(bs -> GenericTensorNetworks.StaticBitVector([bs...]) ∈ all_optimal_configs.c, best_bit_strings)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We can also visualize these atoms and check them visually:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Bloqade.plot(atoms, blockade_radius = 7.5; colors = [iszero(b) ? \"white\" : \"red\" for b in best_bit_strings[1]])","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Bloqade.plot(atoms, blockade_radius = 7.5; colors = [iszero(b) ? \"white\" : \"red\" for b in best_bit_strings[2]])","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"However, there are still some configurations that violate the blockade constraint, because the blockade interaction is not an ideal unit disk constraint (e.g. some bitstrings have a size 5). One can check whether the independence constraint is satisfied or not with the BloqadeMIS.is_independent_set function:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"best5_bit_strings = most_probable(prob.reg, 3)\nBloqadeMIS.is_independent_set.(best5_bit_strings, Ref(graph))","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"3-element BitVector:\n 1\n 1\n 0","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"This can happen when the Rydberg interaction is not very strong at the unit disk radius. See the Rydberg Blockade page for more detailed explanations on Rydberg blockade and its relation with the unit disk radius. One can perform some postprocessing by reducing the violated configurations to indendendent set configurations using the mis_postprocessing function. Please also refer to the paper S. Ebadi et al. (10.48550/arXiv.2202.09372)). for more detailed discussion on the postprocessing procedure.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"fixed = mis_postprocessing(best5_bit_strings[3], graph)\nBloqadeMIS.is_independent_set(fixed, graph)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"true","category":"page"},{"location":"tutorials/5.MIS/main/#QAOA-with-Piecewise-Constant-Pulses","page":"The Maximum Independent Set Problem","title":"QAOA with Piecewise Constant Pulses","text":"","category":"section"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The QAOA (Quantum Approximate Optimization Algorithm) algorithm (E. Farhi, J. Goldstone, S. Gutmann (10.48550/arXiv.1411.4028)) is a hybrid quantum-classical algorithm. The classical part of the algorithm is an optimizer, which can be either a gradient-based or non-gradient-based one. For our specific problem, the corresponding quantum part is a neutral-atom quantum computer first evolving under the Rydberg Hamiltonian with parameterized pulse sequences and then being measured in the computational basis.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The standard definition of QAOA involves applying the problem (expressed as a cost function) Hamiltonian C and the transverse field Hamiltonian B alternately. Let G=(VE) be a graph. The cost Hamiltonian for an MIS problem can be defined as","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"C(G) = -sum_jin V^n w_j n_j^z + infty sum_langle jkrangle in En_j^z n_k^z","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"where the first summation is proportional to the size of the independent set, and the second term enforces the independence constraints.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"In a Rydberg Hamiltonian, the first term corresponds to the detuning w_i = Delta. The second term contains an infty, which corresponds to the Rydberg blockade term with its strength described as V_jk = C_6mathbfx_j - mathbfx_k^6. As we can see, the Rydberg interaction is not a perfect independence constraint due to with finite blockade interaction and unwanted long-range interaction. Thus, postprocessing might be required using neutral-atom quantum computers to solve the MIS problem.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The transverse-field Hamiltonian corresponds to the Rabi term in the Rydberg Hamiltonian,","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"B = sum_j=1^nsigma_j^x + infty sum_langle jkrangle in En_j^z n_k^z","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Note that the Rybderg interaction term is always on, in contrast to the standard QAOA protocol. For the convenience of the simulation, we use the expect function to get the averaged measurement outputs. On the actual quantum hardware, the expect should be replaced by measuring in the computational basis and obtaining the averaged number of Rydberg excitations as the loss function (also called objective function or cost function). One can then either use non-gradient-based optimizers to perform the optimization or finite-difference methods to obtain gradients of parameters.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let us first set up a non-optimized pulse sequence for QAOA with step p=3:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"durations = fill(0.1, 6)\nclocks = [0, cumsum(durations)...]\nΩ2 = piecewise_constant(; clocks = clocks, values = repeat([Ω_max, 0.0], 3))\nΔ2 = piecewise_constant(; clocks = clocks, values = repeat([0.0, Δ_end], 3))\n\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nBloqade.plot!(ax1, Ω2)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nBloqade.plot!(ax2, Δ2)\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The piecewise_constant pulses can be more accurately simulated with the KrylovEvolution solver. This time, we simulate the dynamics in the subspace generated by the blockade_subspace function, so that we do not need postprocessing anymore.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"hamiltonian2 = rydberg_h(atoms; Ω = Ω2, Δ = Δ2)\nnsites = length(atoms)\nsubspace = blockade_subspace(atoms, 7.5)  # we run our simulation within the blockade subspace\nprob2 = KrylovEvolution(zero_state(subspace), clocks, hamiltonian2)\nemulate!(prob2);","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We defined the loss function as the negative of the mean MIS size, which corresponds to the expectation value of the SumOfN operator. Thus, we can calculate the average loss function after the time evolution:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"loss_MIS(reg) = -rydberg_density_sum(prob2.reg)\nloss_MIS(prob2.reg)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"-2.562886912802681","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The output shows the negative mean independent set size. This is because we have flipped its sign since most optimizers are set to minimize the loss function. This loss is equivalent to the rydberg_density_sum loss function in the BloqadeMIS module. Alternative loss functions include the gibbs_loss and the independent_set_probabilities.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Here, the loss produced by the pulse sequence does not look very good. We can throw it into an optimizer and see if a classical optimizer can help. First, let us wrap up the above code into a loss function:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"function loss_piecewise_constant(atoms::AtomList, x::AbstractVector{T}) where {T}\n    @assert length(x) % 2 == 0\n    Ω_max = 4 * 2π\n    Δ_end = 11 * 2π\n    p = length(x) ÷ 2\n\n    # detuning and rabi terms\n    durations = abs.(x)   # the durations of each layer of the QAOA pulse take the optimizing vector x as their input\n    clocks = [0, cumsum(durations)...]\n    Ωs = piecewise_constant(; clocks = clocks, values = repeat(T[Ω_max, 0.0], p))\n    Δs = piecewise_constant(; clocks = clocks, values = repeat(T[0.0, Δ_end], p))\n\n    hamiltonian = rydberg_h(atoms; Ω = Ωs, Δ = Δs)\n    subspace = blockade_subspace(atoms, 7.5)  # we run our simulation within the blockade subspace\n    prob = KrylovEvolution(zero_state(Complex{T}, subspace), clocks, hamiltonian)\n    emulate!(prob)\n    return -rydberg_density_sum(prob.reg), prob.reg\nend","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"loss_piecewise_constant (generic function with 1 method)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"note: Note\nRunning the simulation in the subspace does not violate the independence constraints. If one uses fullspace simulation or runs it on the quantum computer, one may need to post-process the measured bitstrings to a get a correct measure of the loss if we do not set the blockade constraint. Related APIs include is_independent_set, num_mis_violation, and mis_postprocessing.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let us check the loss function again using the initial point above:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"x0 = durations\nrydberg_density, reg1 = loss_piecewise_constant(atoms, x0)\nrydberg_density","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"-2.562886912802681","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The most probable bitstrings are:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"bitstring_hist(reg1; nlargest = 20)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We see that without optimization, many of these bitstrings are not the MIS solutions.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let us now use the non-gradient-based optimizer NelderMead in the Optim package to optimize the loss function:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"optresult = Optim.optimize(x -> loss_piecewise_constant(atoms, x)[1], x0)\n\nrydberg_density_final, reg1_final = loss_piecewise_constant(atoms, optresult.minimizer)\nrydberg_density_final","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"-3.0965910260012124","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We see that the loss is indeed improved, but still not very good. This is likely because the optimization is trapped in a local minimum:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"bitstring_hist(reg1_final; nlargest = 20)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"This example shows that the performance of the algorithm very much depends on the parametrization of the pulse sequences, the initialization of the variational parameters, and the classical optimizers. See S. Ebadi et al. (10.48550/arXiv.2202.09372) for more in-depth comparison of different pulse parameterizations and tips on how to improve the performance.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"In the example below, we show a better pulse parameterization using smoothened piecewise linear waveforms.","category":"page"},{"location":"tutorials/5.MIS/main/#Smoothened-Piecewise-Linear-Pulses","page":"The Maximum Independent Set Problem","title":"Smoothened Piecewise Linear Pulses","text":"","category":"section"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"A smoothened piecewise linear waveform can be created by applying a Gaussian filter on a waveform created by the piecewise_linear function. For example:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"pulse_piecewise_linear = piecewise_linear(clocks = [0.0, 0.05, 0.1, 0.5, 0.55, T_max], values = [0, 0, 0.4, 0.4, 0, 0]);\npulse_smooth = smooth(pulse_piecewise_linear; kernel_radius = 0.02);\n\nfig, ax = plt.subplots()\nBloqade.plot!(ax, pulse_piecewise_linear)\nBloqade.plot!(ax, pulse_smooth)\nax.set_ylabel(\"strength\")\nax.legend([\"piecewise linear\", \"smoothened piecewise linear\"], loc = \"lower right\")\nfig","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Here, the function smooth takes a kernel_radius keyword parameter as the Gaussian kernel parameter. With the new waveforms, we can define the loss function as follows:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"function loss_piecewise_linear(atoms::AtomList, x::AbstractVector{T}) where {T}\n    @assert length(x) == 3\n    Ω_max = 4 * 2π\n    Δ_start = -13 * 2π\n    Δ_end = 11 * 2π\n    Δ0 = 11 * 2π\n    T_max = 0.6\n\n    # the strength of the detunings at each step takes the optimizing x as their input\n    Δs = smooth(\n        piecewise_linear(\n            clocks = T[0.0, 0.05, 0.2, 0.3, 0.4, 0.55, T_max],\n            values = T[Δ_start, Δ_start, Δ0*x[1], Δ0*x[2], Δ0*x[3], Δ_end, Δ_end],\n        );\n        kernel_radius = 0.02,\n    )\n    Ωs = smooth(\n        piecewise_linear(clocks = T[0.0, 0.05, 0.1, 0.5, 0.55, T_max], values = T[0, 0, Ω_max, Ω_max, 0, 0]);\n        kernel_radius = 0.02,\n    )\n\n    hamiltonian = rydberg_h(atoms; Ω = Ωs, Δ = Δs)\n    subspace = blockade_subspace(atoms, 7.5)\n    prob = SchrodingerProblem(zero_state(Complex{T}, subspace), T_max, hamiltonian)\n    emulate!(prob)\n    return -rydberg_density_sum(prob.reg), prob.reg, Δs\nend\n\nx0 = [0.1, 0.8, 0.8]; # initial point for the optimization","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let us check the loss function with smoothened waveform with the initial point:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Δ_start = -13 * 2π\nΔ_end = 11 * 2π\nΔ0 = 11 * 2π\nT_max = 0.6\nΔ_initial = piecewise_linear(\n    clocks = [0.0, 0.05, 0.2, 0.3, 0.4, 0.55, T_max],\n    values = [Δ_start, Δ_start, Δ0 * x0[1], Δ0 * x0[2], Δ0 * x0[3], Δ_end, Δ_end],\n)\n\nrydberg_density, reg2, Δ_initial_smooth = loss_piecewise_linear(atoms, x0)\nrydberg_density","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"-3.890385062164213","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"and plot the smoothened waveform:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"fig, ax = plt.subplots()\nBloqade.plot!(ax, Δ_initial)\nBloqade.plot!(ax, Δ_initial_smooth)\nax.set_ylabel(\"Δ/2π (MHz)\")\nax.legend([\"piecewise linear\", \"smoothened piecewise linear\"], loc = \"lower right\")\nfig","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"Let's plot the distribution:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"bitstring_hist(reg2; nlargest = 20)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"The performance of the algorithm is quite good. Again, let us use the NelderMead optimizer to optimize the loss function:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"optresult = Optim.optimize(x -> loss_piecewise_linear(atoms, x)[1], x0)\n\nrydberg_density_final, reg_final, Δ_final = loss_piecewise_linear(atoms, optresult.minimizer)\nrydberg_density_final","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"-3.974827326383817","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"One can see the mean MIS size can be further improved to a value close to the size of the MIS, which means there is a substantial probability for measuring an MIS state.","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"bitstring_hist(reg_final; nlargest = 20)","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"We can also plot out the final optimized waveform for Δ and compare it with the initial waveform:","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"fig, ax = plt.subplots()\nBloqade.plot!(ax, Δ_initial_smooth)\nBloqade.plot!(ax, Δ_final)\nax.set_ylabel(\"Δ/2π (MHz)\")\nax.legend([\"initial\", \"optimized\"], loc = \"lower right\")\nfig","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"(Image: )","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"","category":"page"},{"location":"tutorials/5.MIS/main/","page":"The Maximum Independent Set Problem","title":"The Maximum Independent Set Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"cuda/#cuda","page":"GPU Acceleration","title":"GPU Acceleration","text":"","category":"section"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"danger: CUDA.jl Version 3 Required\nBloqade currently does not work with the latest version (4.x) of the CUDA package. As a workaround you will need to install version 3. The installation instructions below should already address this.","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"Bloqade supports CUDA acceleration. To use CUDA acceleration, you will need a NVIDIA graphics processing unit (GPU).","category":"page"},{"location":"cuda/#Installation","page":"GPU Acceleration","title":"Installation","text":"","category":"section"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"To use CUDA accelerators, you need to install the CUDA package and the Adapt package:","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"pkg> add CUDA@3 Adapt","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"This will automatically download all the needed dependencies of the CUDA toolkit. This functionality requires CUDA toolkit 11.6+ and CUSPARSE 11.4+. You can check your version via","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"julia> CUDA.version()","category":"page"},{"location":"cuda/#Using-CUDA","page":"GPU Acceleration","title":"Using CUDA","text":"","category":"section"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"Converting your CPU-based simulation to CUDA-based simulation is extremely simple: just use the adapt function from Adapt on the register object, which will convert the CPU-based register to a CUDA-based register, e.g.:","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"using CUDA, Adapt\nreg = zero_state(5)\ndreg = adapt(CuArray, reg) # device register","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"For emulation, you can call adapt on your emulation object to convert everything (emulation intermediate memory, etc.) into the GPU memory, e.g.:","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"adapt(CuArray, KrylovEvolution(reg, clocks, h))","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"To perform operations after emulation (such as calculating the rydberg density)  you will need to move the object out of GPU memory. This can be done so via adapt again:","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"# get the problem onto the GPU and perform emulation there:\ngpu_prob = adapt(CuArray, SchrodingerProblem(register, time_span, hamiltonian))\nintegrator = init(gpu_prob, Vern9())\nemulate!(integrator)\n\n# get the problem off the GPU for subsequent processing/analysis:\nprob = adapt(Array, gpu_prob)","category":"page"},{"location":"cuda/","page":"GPU Acceleration","title":"GPU Acceleration","text":"Other code written with Bloqade should work with CUDA automatically.","category":"page"},{"location":"registers/#observables","page":"Registers and Observables","title":"Registers and Observables","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Bloqade follows the register interface in Yao. It uses a register to  represent a device and its internal quantum state. For Bloqade, the most commonly used register types are ArrayReg and SubspaceArrayReg. They both use a dense array to store the corresponding quantum state. The only difference is that SubspaceArrayReg also stores a subspace object. In this section, we will only cover how to create registers and perform operations on them in the full Hilbert space. For subspace operations, please refer to the subspace page. We will also discuss a few convenient wrappers on commonly used observables for Rydberg systems. ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"In the analog mode, we use the states grangle (ground state) and rrangle (Rydberg state) to encode a qubit. To be consistent with the standard language of qubits, we refer the states grangle and rrangle as 0rangle and 1rangle here.","category":"page"},{"location":"registers/#Basic-Interface","page":"Registers and Observables","title":"Basic Interface","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"To create a register with all atoms being in the ground state  0000 rangle, we can use  the function zero_state by specifying the number of qubits:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"using Bloqade\nzero_state(5) # creates a 5-qubit register","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"To create a more general product state in the computational basis, one can use the product_state function by inputting its bitstring:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"product_state(bit\"10011\")","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"where bit\"10011\" is a special Julia string literal defined for bitstrings.","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"One can also construct the ArrayReg or SubspaceArrayReg directly from arrays, e.g.:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"ArrayReg(rand(ComplexF64, 2^5))","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"For a subspace register, one can create in the following way:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"space = Subspace(5, [0, 2, 3, 7])\nstate = rand(ComplexF64, length(space))\nreg = SubspaceArrayReg(state, space)","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Here, 0 2 3 7 are base-10 integer representations of the corresponding states in bitstrings. For a more detailed guide on how to work in the subspace, please see subspace.","category":"page"},{"location":"registers/#Operations-on-Registers","page":"Registers and Observables","title":"Operations on Registers","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"You can perform various operations on registers via the standard Yao register interface. This includes, e.g., ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"applying operators on quantum    states by using apply!, \nmeasuring bitstrings with a    projection on the quantum state by using measure!, \ncalculating the expectation value of certain observables by      using expect,\ninspecting the internal state of the register by using statevec.","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"reg = rand_state(3)\nmeasure(reg; nshots=5)\nexpect(put(3,1=>X), reg)\nstatevec(reg)\napply!(reg, put(1=>X))","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"For a more detailed introduction of the register interface, please refer to Yao:Registers.","category":"page"},{"location":"registers/#Convenient-Wrappers","page":"Registers and Observables","title":"Convenient Wrappers","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Bloqade also provides a few convenient wrappers on some commonly used observables for Rydberg systems, including the Rydberg density and two-point correlation functions: ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"rydberg_density","category":"page"},{"location":"registers/#Bloqade.rydberg_density","page":"Registers and Observables","title":"Bloqade.rydberg_density","text":"rydberg_density(reg, i::Int) -> Real\n\nCalculates the rydberg density at site i.\n\nlangle n_i rangle\n\n\n\n\n\nrydberg_density(reg) -> Vector\n\nReturn the rydberg density at each site.\n\n\n\n\n\n","category":"function"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"For example, if we want to measure the Rydberg density at each site or at a specific site, we can use the code below:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"reg = rand_state(10)\nn_each = rydberg_density(reg)\nn_2 = rydberg_density(reg, 2)","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"To access the two-point correlation functions, we can use the rydberg_corr function below: ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"rydberg_corr","category":"page"},{"location":"registers/#Bloqade.rydberg_corr","page":"Registers and Observables","title":"Bloqade.rydberg_corr","text":"rydberg_corr([op=Op.n], reg) -> Matrix\n\nCalculates the rydberg correlation matrix.\n\nlangle textop_i textop_j rangle\n\nhere op can be Op.n, X or Y.\n\nArguments\n\nop: the correlation function, default is Op.n.\nreg: required, the register object.\n\n\n\n\n\n","category":"function"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"This function will output a matrix that stores the correlation function for each pair of sites: ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"nn_corr = rydberg_corr(Op.n, reg)","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"It is worth mentioning that besides Op.n, other single-site operators including the Pauli operators X, Y and Z can also be used. ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"To directly obtain the time-dependent Rydberg density under Hamiltonian evolution, we can use the highly-wrapped function get_average_rydberg_densities","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"get_average_rydberg_densities","category":"page"},{"location":"registers/#Bloqade.get_average_rydberg_densities","page":"Registers and Observables","title":"Bloqade.get_average_rydberg_densities","text":"get_average_rydberg_densities(atoms, reg; [C=2π * 862690 * MHz*µm^6], Ω[, ϕ, Δ], [dt=1e-3 * μs])\n\nReturn average Rydberg densities throughout an evolution.\n\nArguments\n\natoms: a collection of atom positions.\nreg: required, the register object.\n\nKeyword Arguments\n\nC: optional, default unit is MHz*µm^6, interation parameter,   see also RydInteract.\nΩ: optional, default unit is MHz, Rabi frequencies, divided by 2, see also SumOfX.\nϕ: optional, does not have unit, the phase, see SumOfXPhase.\nΔ: optional, default unit is MHz, detuning parameter, see SumOfN.\ndt: optional, default unit is μs, time step for the evolution.\nsolver: optional, default solver is Vern8(), the solver for the SchrodingerProblem, see SchrodingerProblem.\n\n\n\n\n\n","category":"function"},{"location":"registers/#Create-General-Observables-using-Operator-Expressions","page":"Registers and Observables","title":"Create General Observables using Operator Expressions","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Bloqade makes use of Yao's block system to represent operator expressions.  For example, one can construct the Rydberg correlation operator as:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"corr(n, i, j) = chain(n, put(i=>Op.n), put(j=>Op.n))","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"You can thus create any kinds of quantum operators in this way and use it with the expect or measure function, e.g.: ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"reg = rand_state(10)\ncorr_XY = chain(10, put(2=>Op.X), put(4=>Op.Y))\nexpect(corr_XY, reg) ","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Because the Hamiltonian is also an operator expression, it can be used as an observable too:","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"r = rand_state(5)\npos = [(i, ) for i in 1:5]\nh = rydberg_h(pos; Ω=2π*0.1)\nexpect(h, r)","category":"page"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"Please refer to the Hamiltonians to see other operators that are supported in building the Hamiltonian.","category":"page"},{"location":"registers/#References","page":"Registers and Observables","title":"References","text":"","category":"section"},{"location":"registers/","page":"Registers and Observables","title":"Registers and Observables","text":"arrayreg\napply!\nmeasure!\nmeasure\nexpect\nstatevec\nzero_state\nrand_state\nproduct_state\nSubspaceArrayReg\nset_zero_state!\nX\nY\nZ\n","category":"page"},{"location":"registers/#YaoArrayRegister.arrayreg","page":"Registers and Observables","title":"YaoArrayRegister.arrayreg","text":"arrayreg(state; nbatch::Union{Integer,NoBatch}=NoBatch(), nlevel::Integer=2)\n\nCreate an array register, if nbatch is a integer, it will return a BatchedArrayReg.\n\n\n\n\n\narrayreg([T=ComplexF64], bit_str; nbatch=NoBatch())\n\nConstruct an array register from bit string literal. For bit string literal please read @bit_str.\n\nExamples\n\njulia> arrayreg(bit\"1010\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> arrayreg(ComplexF32, bit\"1010\")\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoAPI.apply!","page":"Registers and Observables","title":"YaoAPI.apply!","text":"apply!(register, block)\n\nApply a block (of quantum circuit) to a quantum register.\n\nnote: Note\nto overload apply! for a new block, please overload the unsafe_apply! function with same interface. Then the apply! interface will do the size checks on inputs automatically.\n\nExamples\n\njulia> r = zero_state(2)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n\njulia> apply!(r, put(2, 1=>X))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n\njulia> measure(r;nshots=10)\n10-element Vector{DitStr{2, 2, Int64}}:\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoAPI.measure!","page":"Registers and Observables","title":"YaoAPI.measure!","text":"measure!([postprocess,] [operator, ]register[, locs]; rng=Random.GLOBAL_RNG)\n\nMeasure current active qudits or qudits at locs. If the operator is not provided, it will measure on the computational basis and collapse to a product state. Otherwise, the quantum state collapse to the subspace corresponds to the resulting eigenvalue of the observable.\n\nArguments\n\npostprocess is the postprocessing method, it can be\nNoPostProcess() (default).\nResetTo(config), reset to result state to config. It can not be used if operator is provided, because measuring an operator in general does not return a product state.\nRemoveMeasured(), remove the measured qudits from the register. It is also incompatible with the operator argument.\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nrng is the random number generator.\n\nExamples\n\nThe following example measures a random state on the computational basis and reset it to a certain bitstring value.\n\njulia> reg = rand_state(3);\n\njulia> measure!(ResetTo(bit\"011\"), reg)\n110 ₍₂₎\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 011 ₍₂₎\n 011 ₍₂₎\n 011 ₍₂₎\n\njulia> measure!(RemoveMeasured(), reg, (1,2))\n11 ₍₂₎\n\njulia> reg  # removed qubits are not usable anymore\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 1/1\n    nlevel: 2\n\nMeasuring an operator will project the state to the subspace associated with the returned eigenvalue.\n\njulia> reg = uniform_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> print_table(reg)\n000 ₍₂₎   0.35355 + 0.0im\n001 ₍₂₎   0.35355 + 0.0im\n010 ₍₂₎   0.35355 + 0.0im\n011 ₍₂₎   0.35355 + 0.0im\n100 ₍₂₎   0.35355 + 0.0im\n101 ₍₂₎   0.35355 + 0.0im\n110 ₍₂₎   0.35355 + 0.0im\n111 ₍₂₎   0.35355 + 0.0im\n\njulia> measure!(repeat(3, Z, 1:3), reg)\n-1.0 + 0.0im\n\njulia> print_table(reg)\n000 ₍₂₎   0.0 + 0.0im\n001 ₍₂₎   0.5 + 0.0im\n010 ₍₂₎   0.5 + 0.0im\n011 ₍₂₎   0.0 + 0.0im\n100 ₍₂₎   0.5 + 0.0im\n101 ₍₂₎   0.0 + 0.0im\n110 ₍₂₎   0.0 + 0.0im\n111 ₍₂₎   0.5 + 0.0im\n\nHere, we measured the parity operator, as a result,  the resulting state collapsed to the subspace with either even or odd parity.\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoAPI.measure","page":"Registers and Observables","title":"YaoAPI.measure","text":"measure([, operator], register[, locs]; nshots=1, rng=Random.GLOBAL_RNG) -> Vector{Int}\n\nMeasure a quantum state and return measurement results of qudits. This measurement function a cheating version of measure! that does not collapse the input state. It also does not need to recompute the quantum state for performing multiple shots measurement.\n\nArguments\n\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nnshots::Int is the number of shots.\nrng is the random number generator.\n\nExamples\n\njulia> reg = product_state(bit\"110\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 110 ₍₂₎\n 110 ₍₂₎\n 110 ₍₂₎\n\njulia> measure(reg, (2,3); nshots=3)\n3-element Vector{DitStr{2, 2, Int64}}:\n 11 ₍₂₎\n 11 ₍₂₎\n 11 ₍₂₎\n\nThe following example switches to the X basis for measurement.\n\njulia> reg = apply!(product_state(bit\"100\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n -1.0 + 0.0im\n -1.0 + 0.0im\n -1.0 + 0.0im\n\njulia> reg = apply!(product_state(bit\"101\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n 1.0 - 0.0im\n 1.0 - 0.0im\n 1.0 - 0.0im\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoAPI.expect","page":"Registers and Observables","title":"YaoAPI.expect","text":"expect(op::AbstractBlock, reg) -> Vector\nexpect(op::AbstractBlock, reg => circuit) -> Vector\nexpect(op::AbstractBlock, density_matrix) -> Vector\n\nGet the expectation value of an operator, the second parameter can be a register reg or a pair of input register and circuit reg => circuit.\n\nexpect'(op::AbstractBlock, reg=>circuit) -> Pair\nexpect'(op::AbstractBlock, reg) -> AbstracRegister\n\nObtain the gradient with respect to registers and circuit parameters. For pair input, the second return value is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nnote: Note\nFor batched register, expect(op, reg=>circuit) returns a vector of size number of batch as output. However, one can not differentiate over a vector loss, so expect'(op, reg=>circuit) accumulates the gradient over batch, rather than returning a batched gradient of parameters.\n\nExamples\n\njulia> r = normalize!(product_state(bit\"11\") + product_state(bit\"00\"))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n\njulia> op = chain(2, put(1=>H), put(2=>X))\nnqubits: 2\nchain\n├─ put on (1)\n│  └─ H\n└─ put on (2)\n   └─ X\n\n\njulia> expect(op, r)\n0.7071067811865474 + 0.0im\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoArrayRegister.statevec","page":"Registers and Observables","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1 (i.e. nactive(r) = nqudits(r)). See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoArrayRegister.zero_state","page":"Registers and Observables","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int, subspace; nlevel=2)\n\nCreate a SubspaceArrayReg in zero state in given subspace.\n\nArguments\n\nT: optional, element type, default is ComplexF64.\nn: required, number of atoms (qubits).\nsubspace: required, the subspace of rydberg state.\n\n\n\n\n\nzero_state([T=ComplexF64], n::Int; nbatch::Int=NoBatch())\n\nCreate an AbstractArrayReg that initialized to state 0rangle^otimes n. See also product_state, rand_state, uniform_state and ghz_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nBatchedArrayReg{2, ComplexF32, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 3\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoArrayRegister.rand_state","page":"Registers and Observables","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], subspace; nlevel=2)\n\nCreate a random state in the given subspace.\n\n\n\n\n\nrand_state([T=ComplexF64], n::Int; nbatch=NoBatch(), no_transpose_storage=false)\n\nCreate a random AbstractArrayReg with total number of qudits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoArrayRegister.product_state","page":"Registers and Observables","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], config, subspace)\n\nCreate a product state of given config from subspace.\n\n\n\n\n\nproduct_state([T=ComplexF64], dit_str; nbatch=NoBatch(), no_transpose_storage=false)\nproduct_state([T=ComplexF64], nbits::Int, val::Int; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\nproduct_state([T=ComplexF64], vector; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\n\nCreate an ArrayReg of product state. The configuration can be specified with a dit string, which can be defined with @bit_str or @dit_str. Or equivalently, it can be specified explicitly with nbits, val and nlevel. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> reg = product_state(dit\"120;3\"; nbatch=2)\nBatchedArrayReg{3, ComplexF64, Transpose...}\n    active qudits: 3/3\n    nlevel: 3\n    nbatch: 2\n\njulia> measure(reg)\n1×2 Matrix{BitBasis.DitStr64{3, 3}}:\n 120 ₍₃₎  120 ₍₃₎\n\njulia> product_state(bit\"100\"; nbatch=2);\n\njulia> r1 = product_state(ComplexF32, bit\"001\"; nbatch=2);\n\njulia> r2 = product_state(ComplexF32, [1, 0, 0]; nbatch=2);\n\njulia> r3 = product_state(ComplexF32, 3, 0b001; nbatch=2);\n\njulia> r1 ≈ r2   # because we read bit strings from right to left, vectors from left to right.\ntrue\n\njulia> r1 ≈ r3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoSubspaceArrayReg.SubspaceArrayReg","page":"Registers and Observables","title":"YaoSubspaceArrayReg.SubspaceArrayReg","text":"SubspaceArrayReg{D, T, State, Space} <: AbstractArrayReg{D}\nSubspaceArrayReg{D}(state, subspace)\nSubspaceArrayReg(state, subspace)\n\nType for registers in a subspace. The subspace must be a Subspace.\n\n\n\n\n\n","category":"type"},{"location":"registers/#YaoSubspaceArrayReg.set_zero_state!","page":"Registers and Observables","title":"YaoSubspaceArrayReg.set_zero_state!","text":"set_zero_state!(register)\n\nSet the given register to |00...00⟩.\n\n\n\n\n\n","category":"function"},{"location":"registers/#YaoBlocks.ConstGate.X","page":"Registers and Observables","title":"YaoBlocks.ConstGate.X","text":"X\nXGate <: ConstantGate{1,2}\n\nPauli X gate. X is the instance of XGate.\n\n\n\n\n\n","category":"constant"},{"location":"registers/#YaoBlocks.ConstGate.Y","page":"Registers and Observables","title":"YaoBlocks.ConstGate.Y","text":"Y\nYGate  <: ConstantGate{1,2}\n\nPauli Y gate. Y is the instance of YGate.\n\n\n\n\n\n","category":"constant"},{"location":"registers/#YaoBlocks.ConstGate.Z","page":"Registers and Observables","title":"YaoBlocks.ConstGate.Z","text":"Z\nZGate  <: ConstantGate{1,2}\n\nPauli Z gate. Z is the instance of YGate.\n\n\n\n\n\n","category":"constant"},{"location":"capabilities/#capabilities","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"","category":"section"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"Although tools such as those that Bloqade offers in its Schema can automatically transform user-created Hamiltonians to conform to QuEra's Quantum Processor Aquila requirements with minimal user intervention, the following information may still be helpful in designing Hamiltonians to run on hardware.","category":"page"},{"location":"capabilities/#Programmatic-Access","page":"Hardware Capabilities","title":"Programmatic Access","text":"","category":"section"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"You can obtain the values from the human-readable form below programmatically through the BloqadeSchema.get_device_capabilities function which returns BloqadeSchema.DeviceCapabilities, a named tuple.","category":"page"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"using BloqadeSchema\ndevice_capabilities = get_device_capabilities();\nBloqadeSchema.pprint(device_capabilities)\ndevice_capabilities.rydberg.global_value.detuning_max # get the maximum global detuning value","category":"page"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"The field names for each value have been provided below but will require you to provide the proper prefix like in the example above (e.g. the Minimum Rabi Frequency is under rabi_frequency_min which exists under global_value under rydberg in the DeviceCapabilities tuple, and should be access via your_device_capabilities_instance.rydberg.global_value.rabi_frequency_min)","category":"page"},{"location":"capabilities/#*Aquila*-Capabilities","page":"Hardware Capabilities","title":"Aquila Capabilities","text":"","category":"section"},{"location":"capabilities/#Task","page":"Hardware Capabilities","title":"Task","text":"","category":"section"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"Capability Field Value\nMinimum Number of Shots number_shots_min 1\nMaximum Number of Shots number_shots_max 1000","category":"page"},{"location":"capabilities/#Lattice-Geometry","page":"Hardware Capabilities","title":"Lattice Geometry","text":"","category":"section"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"Capability Field Value\nMaximum Number of Qubits number_qubits_max 256\nMaximum Lattice Area Width width 75.0 µm\nMaximum Lattice Area Height height 76.0 µm\nMinimum Radial Spacing between Qubits spacing_radial_min 4.0 µm\nMinimum Vertical Spacing between Qubits spacing_vertical_min 4.0 µm\nPosition Resolution position_resolution 0.1 µm\nMaximum Number of Sites number_sites_max 256","category":"page"},{"location":"capabilities/#Global-Rydberg-Values","page":"Hardware Capabilities","title":"Global Rydberg Values","text":"","category":"section"},{"location":"capabilities/","page":"Hardware Capabilities","title":"Hardware Capabilities","text":"Capability Field Value\nRydberg Interaction Constant c6_coefficient 5.42×10⁶ rad/μs × µm⁶\nMinimum Rabi Frequency rabi_frequency_min 0.00 rad/μs\nMaximum Rabi Frequency rabi_frequency_max 15.8 rad/μs\nRabi Frequency Resolution rabi_frequency_resolution 0.0004 rad/μs\nMaximum Rabi Frequency Slew Rate rabi_frequency_slew_rate_max 250.0 rad/µs²\nMinimum Detuning detuning_min -125.0 rad/μs\nMaximum Detuning detuning_max 125.0 rad/μs\nDetuning Resolution detuning_resolution 2.0×10⁻⁷ rad/μs\nMaximum Detuning Slew Rate detuning_slew_rate_max 2500.0 rad/µs²\nMinimum Phase phase_min -99.0 rad\nMaximum Phase phase_max 99.0 rad\nPhase Resolution phase_resolution 5.0×10⁻⁷ rad\nMinimum Time time_min 0.0 µs\nMaximum Time time_max 4.0 µs\nTime Resolution time_resolution 0.001 µs\nMinimum Δt time_delta_min 0.05 µs","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/4.LGT/main.jl\"","category":"page"},{"location":"tutorials/4.LGT/main/#Simulation-of-a-Lattice-Gauge-Theory-with-Rydberg-Atoms","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"","category":"section"},{"location":"tutorials/4.LGT/main/#Introduction","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Introduction","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In previous examples, we have shown how to prepare Z_2 ordered ground state for the Rydberg system, and discussed the quantum scar phenomenon. We note that these are achieved by tuning the detuning and the Rabi frequency of the lasers that address all the atoms simultaneously.","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In this tutorial, we shall simulate the dynamics of a Lattice Gauge Theory (LGT) with a 1D Rydberg atom chain. In the context of gauge theories, it turns out that the Z_2 ground state and the quantum scar of the Rydberg chain correspond to the \"string\" state and the string-inversion mechanism of the studied LGT respectively. More interestingly, by locally addressing certain atoms, we can create defects in the chain and simulate the propagation of particle-antiparticle pairs. This tutorial is inspired by the paper F. M. Surace et al. (10.1103/PhysRevX.10.021041).","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"We first import the required packages","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"using Bloqade\nusing PythonCall\nplt = pyimport(\"matplotlib.pyplot\");","category":"page"},{"location":"tutorials/4.LGT/main/#Mapping-between-the-Rydberg-system-and-the-LGT","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Mapping between the Rydberg system and the LGT","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In this tutorial, we are interested in the so-called quantum link model (QLM) formulation of the LGT. In this formalism, depending on the configurations of the even and odd sites, the bonds between them could be interpreted as a particle q, an antiparticle barq or a vacuum state. More specifically, the bond between an odd and an even sites corresponds to an antiparticle if both atoms are in the ground states, otherwise it is interpreted as a vacuum state. On the other hand, the bond between an even and an odd sites corresponds to a particle if both atoms are in the ground states, otherwise it is interpreted as a vacuum. Further, the Rydberg states at the odd (even) sites are interpreted as electric fields pointing to the left (right), whereas the ground states at the odd (even) sites are electric field pointing to the right (left). The electric fields correspond to the red and blue arrows in the following figure, which summarizes the mappings described above (source: F. M. Surace et al. (10.1103/PhysRevX.10.021041)).","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: mapping)","category":"page"},{"location":"tutorials/4.LGT/main/#Preparing-the-initial-state-for-the-LGT-dynamics","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Preparing the initial state for the LGT dynamics","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"The LGT dynamics starts from the \"anti-string\" state with all electric fields pointing to the right. This is nothing but the Z_2 ordered state in the language of Rydberg system, and we have seen how to prepare it in previous tutorials. Here, we are interested in a 1D lattice with 21 atoms. The neighboring atoms are separated by 5.5 μm such that they are blockaded throughout the dynamics (the typical value of the Rabi frequency is 2pi times 5 MHz throughout the dynamics, which corresponds to blockade radius R_bapprox746 μm.):","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"a = 5.5;\nN = 21;\natoms = generate_sites(ChainLattice(), N, scale=a);\nsubspace = blockade_subspace(atoms, a);","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In order to prepare the anti-string state of the LGT, we use piecewise linear waveforms for both the detuning and the Rabi frequency. The waveforms will last for 3.5 μs:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"total_time = 3.5;\nΩmax = 2π * 5;\nΔmin = -2π * 10;\nΔmax = 2π * 10;\n\nΔ1 = piecewise_linear(clocks = [0.0, 0.2, total_time], values = [Δmin, Δmin, Δmax]);\nΩ1 = piecewise_linear(clocks = [0.0, 0.2, total_time], values = [0.0, Ωmax, Ωmax]);","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"The waveforms for the detuning and the Rabi frequency are shown below","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"fig1, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nBloqade.plot!(ax1, Ω1)\nBloqade.plot!(ax2, Δ1)\nax1.set_ylabel(\"Ω1/2π (MHz)\")\nax2.set_ylabel(\"Δ1/2π (MHz)\")\nax1.grid()\nax2.grid()\nfig1","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In order to simulate the gauge theory dynamics, we define the function get_average_rydberg_densities which takes in a detuning and Rabi frequency (Δ Ω), and returns the final state and the Rydberg density:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"function get_average_rydberg_densities(Δ, Ω; dt=1e-3)\n    h = rydberg_h(atoms; Δ=Δ, Ω=Ω)\n    reg = zero_state(subspace)\n\n    duration = Ω.duration\n    prob = SchrodingerProblem(reg, duration, h, progress=true);\n    integrator = init(prob, Vern8());\n    densities = []\n    for _ in TimeChoiceIterator(integrator, 0.0:dt:duration)\n        normalize!(reg)\n        push!(densities, rydberg_density(reg))\n    end\n\n    return densities\nend;","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"We can confirm that the waveforms produce the desired anti-string state of the LGT, by simulating the dynamics governed by the waveforms, followed by plotting the density profile, as shown below:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"dens1 = get_average_rydberg_densities(Δ1, Ω1) ;\nfig2, ax = plt.subplots(figsize = (10, 4)) ;\nax.bar(1:N, dens1[end]) ;\nax.set_xlabel(\"site index\")\nax.set_ylabel(\"Average Rydberg densities\")\nfig2","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Recalling the mapping between the Rydberg chain and the LGT illustrated above, we see that the final state is an approximation of the anti-string state of the LGT, or a Z_2 ordered state of the Rydberg chain. It is not perfectly Z_2 ordered where the discrepancy is more prominent at the center compared to the edge of the chain. But as we will see later, the prepared state is sufficient for demonstrating the dynamics of the interested LGT.","category":"page"},{"location":"tutorials/4.LGT/main/#Propagation-of-Particle-Antiparticle-Pairs","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Propagation of Particle-Antiparticle Pairs","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Next, we prepare defects in the anti-string state, which are links with right-pointing electric fields. The domain walls between anti-string and string states will host particles, whereas those between string and anti-string states will host anti-particles. These can be seen via the mapping between Rydberg a system and LGT illustrated above. Interestingly, the particle and antiparticle always come in pairs, and their time evolution exhibits light cones, in which the string-antistring oscillation is out-of-phase compared to that outside of the light cone. This is illustrated below (source: F. M. Surace et al. (10.1103/PhysRevX.10.021041)):","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: propagation)","category":"page"},{"location":"tutorials/4.LGT/main/#Site-Dependent-Waveforms","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Site-Dependent Waveforms","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"To realize the defects, we turn off the detuning for the target atoms while maintaining the same Rabi frequency for all the atoms. This effectively applies a pi-pulse to the target atoms for transitioning them from the Rydberg state to the ground state:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Δq = 0.0;\ntq = π/Ωmax;","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"The waveforms of the detunings for creating one and two defects are defined as following:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Δ2_single_defect = map(1:length(atoms)) do idx\n    if idx == floor(Int, N/2)+1\n        append(Δ1, constant(duration=tq, value=Δq))\n    else\n        append(Δ1, constant(duration=tq, value=Δmax))\n    end\nend ;\n\nΔ2_two_defects = map(1:length(atoms)) do idx\n    if idx == floor(Int, N/3) || idx == floor(Int, N-N/3)+1\n        append(Δ1, constant(duration=tq, value=Δq))\n    else\n        append(Δ1, constant(duration=tq, value=Δmax))\n    end\nend ;","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"We append a constant waveform with the same amplitude to the Rabi frequency such that it has the same duration as the detunings:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Ω2 = append(Ω1, constant(duration=tq, value=Ωmax));","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"As an example, for the case with a single defect, we show the detuning for the central site, which is the defect, and those for other sites separately below:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"fig3, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nfor idx in 1 : length(atoms)\n    if idx == floor(Int, N/2)+1\n        Bloqade.plot!(ax1, Δ2_single_defect[idx])\n    else\n        Bloqade.plot!(ax2, Δ2_single_defect[idx])\n    end\nend\nax1.grid()\nax2.grid()\nax1.set_title(\"Detuning for the central site\")\nax2.set_title(\"Detunings for other sites\")\n\nfig3","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"We can confirm that the waveforms produce the desired domain walls for the LGT states, by simulating the dynamics governed by the waveforms, followed by plotting their density profiles:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"dens2 = get_average_rydberg_densities(Δ2_single_defect, Ω2)\ndens3 = get_average_rydberg_densities(Δ2_two_defects, Ω2)\n\nfig4, (ax1, ax2) = plt.subplots(nrows = 2, figsize = (10, 4), frameon=false)\nax1.bar(1:N, dens2[end])\nax2.bar(1:N, dens3[end])\nfig4.supxlabel(\"site index\")\nfig4.supylabel(\"Average Rydberg densities\", x=0.06)\nfig4","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Again, we see that the Rydberg density at the defects are not exactly zero, but the prepared states, as we shall see below, serve as good initial states to study the propagation of particle-antiparticle pairs in LGT.","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"We define the very last piece in the Rabi frequency and detuning that govern the time evolution of the Rydberg chain with defects:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Δq2 = -π ;\ntq2 = 40/Ωmax ;\n\nΔ3_single_defect = map(1:length(atoms)) do idx\n    append(Δ2_single_defect[idx], constant(duration=tq2, value=Δq2))\nend\nΔ3_two_defects = map(1:length(atoms)) do idx\n    append(Δ2_two_defects[idx], constant(duration=tq2, value=Δq2))\nend\n\nΩ3 = append(Ω2, constant(duration=tq2, value=Ωmax));","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Again, as an example, for the case with a single defect, we show the detuning for the central site, which is the defect, and those for other sites separately below:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"fig5, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nfor idx in 1 : length(atoms)\n    if idx == floor(Int, N/2)+1\n        Bloqade.plot!(ax1, Δ3_single_defect[idx])\n    else\n        Bloqade.plot!(ax2, Δ3_single_defect[idx])\n    end\nend\nBloqade.plot!(ax1, Ω3)\nax1.grid()\nax2.grid()\nax1.legend([\"Detuning for the central site\", \"Rabi frequency for all sites\"])\nax2.legend([\"Detunings for other sites\"], loc=\"center left\")\n\nfig5","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/#Simulating-Particle-Antiparticle-Pairs-in-LGT-Dynamics","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulating Particle-Antiparticle Pairs in LGT Dynamics","text":"","category":"section"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"With the waveforms defined above, we can run the simulation to evolve the Rydberg chains with defects and collect the final Rydberg densities:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"densities_single_defect = get_average_rydberg_densities(Δ3_single_defect, Ω3);\ndensities_two_defects = get_average_rydberg_densities(Δ3_two_defects, Ω3);\n\nD_single_defect = hcat(densities_single_defect...);\nD_two_defects = hcat(densities_two_defects...);","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"To better visualize the propagation of particle-antiparticle pairs, we shall only show the Rydberg densities starting from the time point when the ground state of the defect chain is prepared:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"ind0 = 3550;\nD_single_defect = D_single_defect[:, ind0:end];\nD_two_defects = D_two_defects[:, ind0:end];\n\nclocks = 0:1e-3:Ω3.duration;\nclocks = clocks[ind0: end];","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"Then we plot the Rydberg density as a function of time, where the two panels correspond to the cases with single and two defects respectively:","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"yticks = range(clocks[1], stop=clocks[end], length=10);\nyticks = [string(ytick)[1:4] for ytick in yticks][end:-1:1];\nfig6, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 8), sharey=true)\nax1.imshow(transpose(D_single_defect)[end:-1:1,:], aspect=\"auto\", interpolation=\"none\")\nax1.set_xlabel(\"sites\")\nax1.set_ylabel(\"time (μs)\")\nax1.set_yticks(range(1, stop = length(clocks), length=10), yticks)\nim = ax2.imshow(transpose(D_two_defects)[end:-1:1,:], aspect=\"auto\", interpolation=\"none\")\nax2.set_xlabel(\"sites\")\nfig6.colorbar(im, ax=[ax1, ax2])\nfig6","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"(Image: )","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"From the left panel, we can observe a light-cone-shaped region originating from the particle-antiparticle pair in the vacuum. At the right panel, we show the interference of two light cones, which produces an additional change of periodicity corresponding to the elastic scattering. When the particle or antiparticle reaches the boundary of the chain, it will be scattered back as observed. For more details, the interested readers are referred to the paper F. M. Surace et al. (10.1103/PhysRevX.10.021041).","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"In summary, we have shown that the ground state and the dynamics of certain LGT can be simulated by a 1D chain of Rydberg atoms. More interestingly, defects can be introduced by locally addressing certain atoms in the chain, and with that we can simulate the propagation of particle-antiparticle pairs in the LGT dynamics.","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"","category":"page"},{"location":"tutorials/4.LGT/main/","page":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","title":"Simulation of a Lattice Gauge Theory with Rydberg Atoms","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/6.MWIS/main.jl\"","category":"page"},{"location":"tutorials/6.MWIS/main/#Maximum-Weight-Independent-Set","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"","category":"section"},{"location":"tutorials/6.MWIS/main/#Background","page":"Maximum Weight Independent Set","title":"Background","text":"","category":"section"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"In the The Maximum Independent Set Problem tutorial, we provide a detailed example on how to solve the Maximum Independent Set (MIS) problem using neutral-atom quantum computers. The first algorithm proposal and experimental demonstration can be found in H. Pichler et al. (10.48550/arXiv.1808.10816) and S. Ebadi et al. (10.48550/arXiv.2202.09372). In this tutorial, we present a more advanced example of using neutral atom quantum computers to solve the Maximum Weight Independent Set (MWIS) problem on a weighted unit disk graph, with arbitrary weights for each vertex. The MWIS problem seeks to find an independent set whose weights sum to the maximum possible value.","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We first import the required packages to compute MWIS classically:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"using Random\nRandom.seed!(42)\nusing Graphs\nusing GenericTensorNetworks\nusing GenericTensorNetworks: unit_disk_graph\nusing Bloqade\nusing PythonCall\nplt = pyimport(\"matplotlib.pyplot\");","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We now specify the atom locations and construct an example unit disk graph on a square lattice with nearest-neighbor connections. The atoms represent vertices on the problem graph, and all vertices closer than a distance 1.5 are connected by an edge:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"locs = [(1, -1), (4, 0), (1, 1), (2, 0), (0, 0), (2, 2), (2, -2), (3, 1), (3, -1)];\ng = unit_disk_graph(locs, 1.5)\nshow_graph(g; locs = locs, vertex_colors = [\"white\" for i in 1:nv(g)])","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"(Image: )","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We then assign random weights to each vertex for this example problem:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"weights = [rand() for i in 1:nv(g)];","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We can solve the MWIS problem classically for this graph using the GenericTensorNetworks package. The MWIS is shown in red.","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"configs_mapped = GenericTensorNetworks.solve(IndependentSet(g; weights = weights), ConfigsMax())[]\nMIS_config = configs_mapped.c[1]\nshow_graph(g; locs = locs, vertex_colors = [iszero(MIS_config[i]) ? \"white\" : \"red\" for i in 1:nv(g)])","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"(Image: )","category":"page"},{"location":"tutorials/6.MWIS/main/#Quantum-Adiabatic-Algorithm-to-Solve-the-MWIS-Problem","page":"Maximum Weight Independent Set","title":"Quantum Adiabatic Algorithm to Solve the MWIS Problem","text":"","category":"section"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"The quantum adiabatic algorithm (QAA) can be performed with the Hamiltonian:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"H_textQA(t) = sum_v in V (- Delta_v(t) n_v + fracOmega_v(t)2 sigma_v^x) + sum_(u w) in E U_uw n_u n_w","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Here, we work in the limit of Delta Omega ll U, where the non-independent set space of the graph can be neglected (on neutral-atom quantum hardware, this corresponds to the limit where the interaction energy is much stronger than other energy scales). In this limit, we can restrict ourselves to the Rydberg blockade subspace (see the Rydberg Blockade tutorial) of the graph and ignore the interaction term sum_(u w) in E U n_u n_w in the Hamiltonian. Note that in this tutorial, we also do not include the long-range interaction tail in the Hamiltonian. The vertex weights of the MWIS problem in this Hamiltonian can be implemented on the hardware with individual atom detunings (specifying Delta_v(t) for each atom).","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"The QAA can be designed by first initializing all qubits to the ground state of H_textQA(t = 0) where Delta(t = 0) = -Delta_0  0  and Omega(t = 0) = 0; the many-body ground state is basically with all atoms in the ground state  g rangle. We then change the parameters by turning up Omega(t) to a finite value and then to 0, and sweeping Delta(t) to Delta_0  0 after some final time t_f.","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"By the adiabatic theorem, when the time evolution is sufficiently slow, the system should follow the instantaneous ground state and end up in the solution to the MWIS problem.","category":"page"},{"location":"tutorials/6.MWIS/main/#Building-Pulse-Sequences","page":"Maximum Weight Independent Set","title":"Building Pulse Sequences","text":"","category":"section"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Since we are considering the MWIS problem, we can implement individual atom detuning with Delta(t)_i = w_i times Delta(t).","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Let's first build and plot the individual pulse waveforms. We use the following function to build the Hamiltonian and the corresponding waveforms for the adiabatic evolution of the system:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"function build_adiabatic_sweep(graph, Ω_max::Float64, Δ_max::Float64, t_max::Float64, weights::Vector{Float64})\n    Ω = Waveform(t -> Ω_max * sin(pi * t / t_max)^2, duration = t_max)\n    Δ = map(1:nv(graph)) do idx\n        return Waveform(t -> weights[idx] * Δ_max * (2 * t / t_max - 1), duration = t_max)\n    end\n    h = SumOfX(nv(graph), Ω) / 2 - SumOfN(nv(graph), Δ)\n    return h, Ω, Δ\nend","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"build_adiabatic_sweep (generic function with 1 method)","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Here, we choose Delta_max  Omega_max = 3, with Omega_max = 2 pi times 4 MHz:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Ω_max = 2π * 4\nΔ_max = 3 * Ω_max\nt_max = 1.5\nH, Ω, Δ = build_adiabatic_sweep(g, Ω_max, Δ_max, t_max, weights);\n\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (14, 4))\nBloqade.plot!(ax1, Ω)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nfor i in 1:nv(g)\n    Bloqade.plot!(ax2, Δ[i])\nend\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"(Image: )","category":"page"},{"location":"tutorials/6.MWIS/main/#Compute-the-MIS-Probability-and-the-Adiabatic-Timescale","page":"Maximum Weight Independent Set","title":"Compute the MIS Probability and the Adiabatic Timescale","text":"","category":"section"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Here we compute the MWIS probability of the graph as a function of time. In addition, we would like to extract the adiabatic timescale T_textLZ from the Landau-Zener fitting: 1 - P_textMWIS = e^a - TT_textLZ. To do this, we find the first instance time T^* such that P_textMWIS(T)  09, and then continue to run evolutions to 25T^* to extract T_textLZ. See H. Pichler et al. (10.48550/arXiv.1808.10816) for more details on the procedure to extract the Landau-Zener timescale.","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We run the simulation in the blockade (independent set) subspace:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"t_list = []\nP_MWIS = [] # MIS probability\nsubspace = independent_set_subspace(g);\n\ntotal_time = 1.5\nfor t in 0.1:total_time*0.25:total_time*2.5\n    h = build_adiabatic_sweep(g, Ω_max, Δ_max, t, weights)[1]\n    r = zero_state(subspace)\n    prob = SchrodingerProblem(r, t, h)\n    emulate!(prob)\n    p = config_probability(prob.reg, g, BitVector(MIS_config))\n\n    push!(t_list, t)\n    push!(P_MWIS, p)\nend","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"We can compute the adiabatic timescale by fitting a Landau-Zener curve to the MIS probability:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"using CurveFit\ny = broadcast(log, 1 .- P_MWIS[P_MWIS.>0.9])\na, b = linear_fit(t_list[P_MWIS.>0.9], y)\nT_LZ = -1 / b;","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"Finally, we plot the results:","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"fig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (16, 6))\nax1.scatter(t_list, P_MWIS)\nax1.set_ylabel(\"MWIS Probability\")\nax1.set_xlabel(\"Time (μs)\")\n\nax2.scatter(t_list, broadcast(log, 1 .- P_MWIS))\nax2.plot(t_list, a .+ b .* t_list)\nax2.set_xlabel(\"Time (μs)\")\nax2.set_ylabel(\"log(1 - MWIS Probability)\")\n\nfig","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"(Image: )","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"","category":"page"},{"location":"tutorials/6.MWIS/main/","page":"Maximum Weight Independent Set","title":"Maximum Weight Independent Set","text":"This page was generated using Literate.jl.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"CurrentModule = Bloqade","category":"page"},{"location":"hamiltonians/#Hamiltonians","page":"Hamiltonians","title":"Hamiltonians","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Quantum Hamiltonians encode the essential physical properties of a quantum system. For the analog mode of neutral-atom quantum computers, the quantum dynamics is governed by the Rydberg Hamiltonian hatmathcalH:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"i hbar dfracpartialpartial t  psi rangle = hatmathcalH(t)  psi rangle  \n\nfracmathcalH(t)hbar = sum_j fracOmega_j(t)2 left( e^i phi_j(t)   g_j rangle  langle r_j  + e^-i phi_j(t)   r_j rangle  langle g_j  right) - sum_j Delta_j(t) hatn_j + sum_j  k V_jk hatn_j hatn_k","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"where Omega_j, phi_j, and Delta_j  denote the Rabi frequency, laser phase, and the detuning of the driving laser field on atom (qubit) j coupling the two states   g_j rangle (ground state) and  r_j rangle (Rydberg state); hatn_j = r_jrangle langle r_j is the number operator, and V_jk = C_6mathbfx_j - mathbfx_k^6 describes the Rydberg interaction (van der Waals interaction) between atoms j and k where mathbfx_j denotes the position of the atom j; C_6 is the Rydberg interaction constant that depends on the particular Rydberg state used. For Bloqade, the default C_6 = 862690 times 2pi text MHz μm^6 for r rangle = lvert 70S_12 rangle of the ^87Rb atoms; hbar is the reduced Planck's constant.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"One can use the Rydberg Hamiltonian to  understand the ground state properties of the corresponding system and to generate interesting quantum dynamics.  The Rydberg Hamiltonian is generally specified by atom positions mathbfx_j, Rabi frequencies Omega_j, laser phase phi_j, and detunings Delta_j. In Bloqade,  we can easily create a Hamiltonian by inputting these variable parameters into the function rydberg_h. Furthermore, by inputting waveforms for the Rabi frequency and  detuning, we can easily generate time-dependent Hamiltonians. ","category":"page"},{"location":"hamiltonians/#Building-Time-Independent-Hamiltonians","page":"Hamiltonians","title":"Building Time-Independent Hamiltonians","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"To specify the Hamiltonian, we first need to specify the atom positions, which determine the Rydberg interactions strengths V_jk between pairs of atoms. Here, we generate a square lattice by using the code below:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"using Bloqade\natoms = generate_sites(SquareLattice(), 3, 3, scale=6.3)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Please refer to the Lattices page for more details on how to generate lattices and the relevant operations. ","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Then, the Hamiltonian can be simply built by inputting the generated atom positions atoms and by specifying the strength of the detuning Δ, Rabi frequency Ω, and laser phase ϕ:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"h0 = rydberg_h(atoms; Δ=1.2*2π, Ω=1.1*2π, ϕ=2.1)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Note that the default value for the Rydberg interaction constant is C_6 = 2pi times 862690 text MHz μm^6 to match the default unit used on the hardware. For more information about units, please  refer to Bloqade. Instead of using the default value for C_6, the users are free to set their own values. For instance, if the users would like to have a chain lattice with nearest-neighbor atoms separated by 1 μm, and interaction strength to be a particular value, say, 2pi * 100^6 text MHz μm^6, it can be done with the following code:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"atoms = generate_sites(ChainLattice(), 9, scale=1.0)\nh0 = rydberg_h(atoms; C=2π*10.0^6, Δ=1.2*2π, Ω=1.1*2π, ϕ=2.1)","category":"page"},{"location":"hamiltonians/#Building-Time-Dependent-Hamiltonians","page":"Hamiltonians","title":"Building Time-Dependent Hamiltonians","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"One can also directly use waveforms (instead of constant values of detuning, Rabi frequency, and laser phase) to build a time-dependent Hamiltonian.  First, let us again use the  generate_sites to create a list of atom coordinates: ","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"atoms = generate_sites(ChainLattice(), 5, scale=5.72)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Then, we generate the time-dependent pulses for Omega and Delta by using  piecewise_linear. For details on how to create waveforms and the built-in functions, please refer to the page Waveforms. ","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Ω1 = piecewise_linear(clocks=[0.0, 0.1, 2.1, 2.2], values=2π*[0.0, 6.0, 6.0, 0]);\nΔ1 = piecewise_linear(clocks=[0.0, 0.6, 2.1, 2.2], values=2π*[-10.1, -10.1, 10.1, 10.1]);","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"The time-dependent Hamiltonian can then be easily generated by inputting the waveforms into the function rydberg_h:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"h1 = rydberg_h(atoms; Δ=Δ1, Ω=Ω1)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"By specifying the time of h1, we can access the Hamiltonian at a particular time, e.g.: ","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"ht= h1 |> attime(0.5)","category":"page"},{"location":"hamiltonians/#Building-Hamiltonians-with-Site-Dependent-Waveforms","page":"Hamiltonians","title":"Building Hamiltonians with Site-Dependent Waveforms","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"In certain cases, the user may want to build a Hamiltonian that has site-dependent Omega_j, phi_j, and Delta_j, which may or may not have time dependence.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"For the time-independent Hamiltonian, one can for example build a Hamiltonian like: ","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"h0 = rydberg_h(atoms; Δ=1.2*2π*rand(length(atoms)), Ω=1.1*2π*rand(length(atoms)), ϕ=2.1)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"For time-dependent Hamiltonians, here is an example:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"atoms = generate_sites(ChainLattice(), 5, scale=5.72)\nΔ1 = map(1:length(atoms)) do idx\n    Waveform(t-> idx*sin(2π*t), duration = 2)\nend\nh =rydberg_h(atoms; Δ=Δ1)","category":"page"},{"location":"hamiltonians/#Hamiltonian-Expressions","page":"Hamiltonians","title":"Hamiltonian Expressions","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Bloqade uses \"block\"s from Yao to build symbolic hamiltonian expressions. This gives users the flexibility to define various   kinds of Hamiltonians by simply writing down the expression.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Please refer to the References section below for the types of operators supported by Bloqade.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"As an example, we can explicitly add up some Hamiltonian terms to compose a new Hamiltonian, e.g.:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"using Bloqade\nh = 2π*1.1*SumOfX(5, 1.0) + 2π*1.2*SumOfZ(5, 1.0)","category":"page"},{"location":"hamiltonians/#Convert-Hamiltonians-to-Matrices","page":"Hamiltonians","title":"Convert Hamiltonians to Matrices","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"An Hamiltonian expression can be converted to a matrix via the mat interface from Yao:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"mat","category":"page"},{"location":"hamiltonians/#YaoAPI.mat","page":"Hamiltonians","title":"YaoAPI.mat","text":"mat([T=ComplexF64], blk)\n\nReturns the most compact matrix form of given block, e.g\n\nExamples\n\njulia> mat(X)\n2×2 LuxurySparse.SDPermMatrix{ComplexF64, Int64, Vector{ComplexF64}, Vector{Int64}}:\n 0.0+0.0im  1.0+0.0im\n 1.0+0.0im  0.0+0.0im\n\njulia> mat(Float64, X)\n2×2 LuxurySparse.SDPermMatrix{Float64, Int64, Vector{Float64}, Vector{Int64}}:\n 0.0  1.0\n 1.0  0.0\n\njulia> mat(kron(X, X))\n4×4 LuxurySparse.SDPermMatrix{ComplexF64, Int64, Vector{ComplexF64}, Vector{Int64}}:\n 0.0+0.0im  0.0+0.0im  0.0+0.0im  1.0+0.0im\n 0.0+0.0im  0.0+0.0im  1.0+0.0im  0.0+0.0im\n 0.0+0.0im  1.0+0.0im  0.0+0.0im  0.0+0.0im\n 1.0+0.0im  0.0+0.0im  0.0+0.0im  0.0+0.0im\n\njulia> mat(kron(X, X) + put(2, 1=>X))\n4×4 SparseMatrixCSC{ComplexF64, Int64} with 8 stored entries:\n     ⋅      1.0+0.0im      ⋅      1.0+0.0im\n 1.0+0.0im      ⋅      1.0+0.0im      ⋅\n     ⋅      1.0+0.0im      ⋅      1.0+0.0im\n 1.0+0.0im      ⋅      1.0+0.0im      ⋅    \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"This method will return the most compact matrix representation of the operator, e.g.:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"mat(X) # will return a PermMatrix\nmat(ht) # will return a SparseMatrixCSC","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian matrix can also be created in a subspace, such as the blockade subspace (see also Working with Subspace). This will allow one to simulate larger system sizes because of the smaller truncated Hilbert space.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"For the Rydberg Hamiltonian, we can create a subspace via the blockade_subspace method, e.g.:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"space = blockade_subspace(atoms, 7.5)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"The above code means that the blockade subspace only includes states where there is only one Rydberg excitation  within the distance of 7.5 μm, which we call the subspace radius R_s. If we have a chain of atoms separated by 5.72 μm, the blockade subspace  does not contain states with nearest-neighbor atoms being simultaneously excited to the Rydberg state  r rangle.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Once we have defined the space, we can convert the Hamiltonian to a matrix in a subspace basis via the codes below:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"h_m = mat(ht, space)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"We can see that the size of the Hamiltonian matrix in the blockade subspace is much smaller than that in the full Hilbert space.","category":"page"},{"location":"hamiltonians/#Diagonalization-of-the-Hamiltonian","page":"Hamiltonians","title":"Diagonalization of the Hamiltonian","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Bloqade doesn't provide any built-in diagonalization tool, as there are many existing  tools in the Julia ecosystem. Here, we demonstrate how to use the KrylovKit package for this purpose as follows:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"using KrylovKit\nvals, vecs, info = KrylovKit.eigsolve(h_m,  1, :SR)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"where the vals and vecs store the calculated eigenvalues and eigenvectors respectively. ","category":"page"},{"location":"hamiltonians/#Low-Level-Representation-of-the-Hamiltonian","page":"Hamiltonians","title":"Low-Level Representation of the Hamiltonian","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Besides the symbolic representation, in order to achieve the best possible performance, we use a lower-level representation of the Hamiltonian in Bloqade, which is the Hamiltonian and StepHamiltonian type:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"BloqadeExpr.Hamiltonian\nBloqadeExpr.StepHamiltonian","category":"page"},{"location":"hamiltonians/#BloqadeExpr.Hamiltonian","page":"Hamiltonians","title":"BloqadeExpr.Hamiltonian","text":"struct Hamiltonian\n\nHamiltonian stores the dynamic prefactors of each term. The actual hamiltonian is the sum of f_i(t) * t_i where f_i and t_i are entries of fs and ts.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.StepHamiltonian","page":"Hamiltonians","title":"BloqadeExpr.StepHamiltonian","text":"struct StepHamiltonian\n\nA low-level linear-map object that encodes time-dependent hamiltonian at time step t. This object supports the linear map interface mul!(Y, H, X).\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian type represents the following Hamiltonian expression","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"f_1(t) H_1 + f_2(t) H_2 + cdots + f_n(t) H_n + H_c","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"where f_i(t) are time-dependent parameters of the Hamiltonian, H_i are time-independent local terms of the Hamiltonian as linear operators (in Julia, this means objects that support LinearAlgebra.mul! interface), and H_c is the constant component of the Hamiltonian.","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"A Hamiltonian object supports callable methods, which will produce a StepHamiltonian that is time-independent, e.g.:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"using BloqadeExpr\nh = BloqadeExpr.Hamiltonian(Float64, SumOfX(5, sin) + SumOfZ(5, cos))\nh(0.1)","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Here, we see that the Hamiltonian expression written as Yao blocks are automatically analyzed into time-dependent terms and constant terms. A more complicated example can be SumOfXPhase:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"using BloqadeExpr\nh = BloqadeExpr.Hamiltonian(Float64, SumOfXPhase(5, sin, cos) + SumOfZ(5, cos))\nh(0.1)","category":"page"},{"location":"hamiltonians/#References","page":"Hamiltonians","title":"References","text":"","category":"section"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"rydberg_h","category":"page"},{"location":"hamiltonians/#BloqadeExpr.rydberg_h","page":"Hamiltonians","title":"BloqadeExpr.rydberg_h","text":"rydberg_h(atoms; [C=2π * 862690 * MHz*µm^6], Ω[, ϕ, Δ])\n\nCreate a rydberg hamiltonian\n\n fracCx_i - x_j^6 n_i n_j + fracΩ2 σ_x - Δ σ_n\n\nshorthand for\n\nRydInteract(C, atoms) + SumOfXPhase(length(atoms), Ω, ϕ) - SumOfN(length(atoms), Δ)\n\nArguments\n\natoms: a collection of atom positions.\n\nKeyword Arguments\n\nC: optional, default unit is MHz*µm^6, interation parameter,   see also RydInteract.\nΩ: optional, default unit is MHz, Rabi frequencies, divided by 2, see also SumOfX.\nΔ: optional, default unit is MHz, detuning parameter, see SumOfN.\nϕ: optional, does not have unit, the phase, see SumOfXPhase.\n\ntips: Tips\nThe rabi frequencies are divided by two in the Rydberg hamiltonian unlike directly constructing via SumOfX or SumOfXPhase.\n\ntips: Tips\nThe parameters of Hamiltonian have their own default units to match hardware, one can use Unitful.jl to specify their units explicitly. If the units are specified explicitly, they will be converted to default units automatically.\n\nExample\n\njulia> using Bloqade\n\njulia> atoms = [(1, ), (2, ), (3, ), (4, )]\n4-element Vector{Tuple{Int64}}:\n (1,)\n (2,)\n (3,)\n (4,)\n\njulia> rydberg_h(atoms)\n∑ 5.42e6/|x_i-x_j|^6 n_i n_j\n\njulia> rydberg_h(atoms; Ω=0.1)\nnqubits: 4\n+\n├─ ∑ 5.42e6/|x_i-x_j|^6 n_i n_j\n└─ 0.05 ⋅ ∑ σ^x_i\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"Except the standard operators from Yao, the following operators are also supported by Bloqade:","category":"page"},{"location":"hamiltonians/","page":"Hamiltonians","title":"Hamiltonians","text":"RydInteract\nSumOfX\nSumOfXPhase\nSumOfZ\nSumOfN\nXPhase","category":"page"},{"location":"hamiltonians/#BloqadeExpr.RydInteract","page":"Hamiltonians","title":"BloqadeExpr.RydInteract","text":"struct RydInteract{D} <: AbstractTerm{D}\nRydInteract(;atoms, C=2π * 862690MHz⋅μm^6)\n\nType for Rydberg interactive term.\n\nExpression\n\nsum_i j fracCx_i - x_j^6 n_i n_j\n\nKeyword Arguments\n\natoms: a list of atom positions, must be type RydAtom, default unit is μm.\nC: the interaction strength, default unit is MHz⋅μm^6. default value is 2π * 862690 * MHz*µm^6.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.SumOfX","page":"Hamiltonians","title":"BloqadeExpr.SumOfX","text":"struct SumOfX <: AbstractTerm{2}\nSumOfX(nsites, Ω)\n\nTerm for sum of X operators.\n\nThe following two expressions are equivalent\n\njulia> SumOfX(nsites=5)\n∑ σ^x_i\n\njulia> sum([X for _ in 1:5])\nnqudits: 1\n+\n├─ X\n├─ X\n├─ X\n├─ X\n└─ X\n\nExpression\n\nsum_i Ω σ^x_i\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.SumOfXPhase","page":"Hamiltonians","title":"BloqadeExpr.SumOfXPhase","text":"struct SumOfXPhase <: AbstractTerm{2}\nSumOfXPhase(;nsites, Ω=1, ϕ)\n\nSum of XPhase operators.\n\nThe following two expressions are equivalent\n\njulia> SumOfXPhase(nsites=5, ϕ=0.1)\n1.0 ⋅ ∑ e^{0.1 ⋅ im} |0⟩⟨1| + e^{-0.1 ⋅ im} |1⟩⟨0|\n\njulia> sum([XPhase(0.1) for _ in 1:5])\nnqudits: 1\n+\n├─ XPhase(0.1)\n├─ XPhase(0.1)\n├─ XPhase(0.1)\n├─ XPhase(0.1)\n└─ XPhase(0.1)\n\nBut may provide extra speed up.\n\nExpression\n\nsum_i Ω  (e^ϕ  i 01 + e^-ϕ  i 10)\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.SumOfZ","page":"Hamiltonians","title":"BloqadeExpr.SumOfZ","text":"struct SumOfZ <: AbstractTerm{2}\nSumOfZ(;nsites, Δ=1)\n\nSum of Pauli Z operators.\n\nThe following two expression are equivalent\n\njulia> SumOfZ(nsites=5)\n∑ σ^z_i\n\njulia> sum([Z for _ in 1:5])\nnqudits: 1\n+\n├─ Z\n├─ Z\n├─ Z\n├─ Z\n└─ Z\n\nExpression\n\nsum_i Δ  σ^z_i\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.SumOfN","page":"Hamiltonians","title":"BloqadeExpr.SumOfN","text":"struct SumOfN <: AbstractTerm{2}\nSumOfN(;nsites[, Δ=1])\n\nSum of N operators. \n\nThe following two expression are equivalent\n\njulia> SumOfN(nsites=5)\n∑ n_i\n\njulia> sum([Op.n for _ in 1:5])\nnqudits: 1\n+\n├─ P1\n├─ P1\n├─ P1\n├─ P1\n└─ P1\n\nBut may provide extra speed up.\n\nExpression\n\nsum_i Δ  n_i\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians/#BloqadeExpr.XPhase","page":"Hamiltonians","title":"BloqadeExpr.XPhase","text":"XPhase{T} <: PrimitiveBlock{2}\n\nXPhase operator for 2-level Rydberg system.\n\ne^ϕ  i 01 + e^-ϕ  i 10\n\n\n\n\n\n","category":"type"},{"location":"subspace/#subspace","page":"Working with Subspace","title":"Working with Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Due to the strong Rydberg interactions, only one Rydberg excitation is allowed if the atoms are close to each other.  We typically take this as the blockade radius, R_b, which is the  distance for which the Rydberg interaction is the same as the Rabi frequency, Omega (see Rydberg Blockade). This is the so-called blockade constraint. ","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"In Bloqade, we can take advantage of this effect by allowing users to run emulation in a truncated subspace, i.e., by throwing out states that violate the blockade constraint.  This can help accelerate the simulation and enables simulation for a larger system size.  In this section, we will show how to create a blockade subspace, create registers in the subspace,  obtain the Hamiltonian matrix in the subspace, and run emulation in the subspace.","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"note: Note\nNote that the blockade radius R_b is the distance for which the Rydberg interaction is the same as the Rabi frequency, Omega.  For accurate simulation, however, it's not recommended to throw away the states that's close to the blockade radius. In other words, it's safer to set the subspace radius R_s to be smaller than R_b, where we throw away the blockade violated states when the atoms are within R_s.  For example, if we set R_s = 12 * R_b, we will be throwing away states that have interaction energies at least 2^6*Omega, which will be a good approximation.  See the Rydberg Blockade page for recommendations on how to set R_b, R_s, and the atom lattice separation, a.","category":"page"},{"location":"subspace/#Create-the-Blockade-Subspace","page":"Working with Subspace","title":"Create the Blockade Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"One can create a blockade subspace via the blockade_subspace method if we know the atomic positions: ","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"blockade_subspace","category":"page"},{"location":"subspace/#BloqadeMIS.blockade_subspace","page":"Working with Subspace","title":"BloqadeMIS.blockade_subspace","text":"blockade_subspace(atoms[, radius=1.0])\n\nCreate a blockade approximation subspace from given atom positions and radius.\n\n\n\n\n\n","category":"function"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"For example, we can construct a blockade subspace of a square lattice using the code below:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"using Bloqade\natoms = generate_sites(SquareLattice(), 3, 3, scale=5.1)\nspace = blockade_subspace(atoms, 5.2)","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"We first created a 3*3 square lattice with nearest neighbor atoms separated by 51 μm.  Then we have created a blockade subspace with the subspace radius, R_s, being 52 μm.  This means that if two atoms have a separation distance that is smaller than (or equal to) 52 μm,  then the blockade subspace does not contain states where both of them being in the Rydberg states. For the dictionary shown, the left is the new index of the states in the blockade subspace;  in this case, there are 63 allowed states, which is much smaller than the full Hilbert space size 512. The vectors on the right correspond to the base-10 representations of the states in bitstrings. ","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Here space is of the type Subspace:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Subspace","category":"page"},{"location":"subspace/#BloqadeExpr.Subspace","page":"Working with Subspace","title":"BloqadeExpr.Subspace","text":"Subspace{S <: AbstractVector} <: AbstractSpace\n\nA Dict-like object stores the mapping between subspace and full space.\n\n\n\n\n\n","category":"type"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Other than using atomic positions and the subspace radius, we can also use a graph to create a subspace. In this case, the subspace  corresponds to the space composed by the independent sets of this graph. Bloqade has an explicit function for this, by using a graph as  an input, and produces the subspace as the output. Here is an example code:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"using Graphs\n\ng = SimpleGraph(5)\nedge_set = [(1,2), (1, 4), (2, 5), (3, 4)]\nfor (i,j) in edge_set\n    add_edge!(g, i, j)\nend \nspace = independent_set_subspace(g)","category":"page"},{"location":"subspace/#Create-Registers-in-the-Subspace","page":"Working with Subspace","title":"Create Registers in the Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"One can create a register in the subspace by feeding the space object instead of an integer for the common register interfaces, e.g.:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"zero_state(space)\nproduct_state(bit\"000_000_001\", space)","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Alternatively, if you have an existing state stored as a subtype of AbstractVector, you can also create the register using the constructor:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"state = rand(ComplexF64, length(space))\nreg = SubspaceArrayReg(state, space)","category":"page"},{"location":"subspace/#Obtain-the-Hamiltonian-Matrix-in-the-Subspace","page":"Working with Subspace","title":"Obtain the Hamiltonian Matrix in the Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"The matrix projected in the subspace of a given Hamiltonian can be obtained via mat as well, e.g.:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"atoms = generate_sites(SquareLattice(), 3, 3, scale=5.1);\nspace = blockade_subspace(atoms, 5.2);\nh1 = rydberg_h(atoms; Δ=2.0*2π, Ω=1.0*2π)\nmat(h1, space)","category":"page"},{"location":"subspace/#Other-Operations-in-the-Subspace","page":"Working with Subspace","title":"Other Operations in the Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"All other operations in the subspace are the same as the fullspace case.  For example, to run an emulation in the subspace, one just need to use the subspace register SubspaceArrayReg instead of the fullspace register ArrayReg. The rest of the code are the same:","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"reg = zero_state(space)\nprob = SchrodingerProblem(reg, 1.0, h1)\nemulate!(prob)\nstatevec(reg)","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Measurements on the subspace register is the same as that in the full space. ","category":"page"},{"location":"subspace/#Create-Constrained-Local-Hamiltonians-in-the-Subspace","page":"Working with Subspace","title":"Create Constrained Local Hamiltonians in the Subspace","text":"","category":"section"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Although we are able to emulate our Hamiltonian problem in the projected subspace, the long-range tail of   the Rydberg interactions will be present in the subspace Hamiltonian. In certain cases, you may not want the long-range tail by only simulating a constrained short-range Hamiltonian, e.g. the PXP model. In this case, we can use Bloqade to easily deal with such problems for an arbitrary graph in an arbitrary dimension. ","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"Let us take the PXP model in 1D as an example. We first create a 1D chain and then generate a subspace by projecting out states that have nearest-neighbor interactions. ","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"atoms = generate_sites(ChainLattice(), 10, scale=5.1)\nspace = blockade_subspace(atoms, 5.2)\nregister = product_state(bit\"0101010101\", space)\nh = 2π * 4.0 * SumOfX(length(atoms)) - 2π * 1.0 * SumOfN(length(atoms))\nprob = SchrodingerProblem(register, 0.2, h)\nemulate!(prob)","category":"page"},{"location":"subspace/","page":"Working with Subspace","title":"Working with Subspace","text":"After creating the subspace, we have built a Hamiltonian by explicitly summing up the Rabi frequency term  and the detuning term by using SumOfX and SumOfN respectively.  In this way, we have created a local constraint Hamiltonian (without the long-range interaction tail). Futhermore, if we want to emulate  quantum dynamics under this Hamiltonian, we just need to create a subspace register and emulate the system under the created Hamiltonian.","category":"page"},{"location":"mis/#mis","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"","category":"section"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"Rydberg Blockade is one of the most important properties of neutral-atom quantum computing based on Rydberg states.  It naturally encodes the independent set constraint.  More specifically, Rydberg blockade implies that two atoms cannot be both excited to the Rydberg state rrangle if they are close to each other,  whereas independent set constraint means two vertices cannot be both in the independent set when they are connected by an edge. Thus, one can consider atoms in the Rydberg state as vertices in an independent set. See the proposal in H. Pichler, et al. for more details. ","category":"page"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"In particular, one can use the ground state of the Rydberg Hamiltonian to encode the maximum independent set problem,  which is to find the largest independent set of a given graph.  For a particular subclass of geometric graphs, the so-called unit disk graphs,  the Rydberg Hamiltonian can encode the solution without any overhead in the number of qubits.  In fact, an experimental demonstration of quantum optimization has been realized in solving the maximum independent set problem up to 289 qubits in S. Ebadi, et al..","category":"page"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"In Bloqade, we provide several functions to support the simulation of solving independent set problems on neutral-atom quantum computers. We list them here in this section.","category":"page"},{"location":"mis/#The-Maximum-Independent-Set-Problem","page":"Maximum Independent Set","title":"The Maximum Independent Set Problem","text":"","category":"section"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"In graph theory, an independent set is a set of vertices in a graph such that no two of which are connected by an edge. The problem of finding maximum independent sets (MIS) is NP-hard, i.e., it is unlikely to be solved in a time polynomial to the problem size. However, for a graph with a small to intermediate size, various solution space properties, including finding the MIS size and enumerating all MISs, can be computed using the package GenericTensorNetworks; please also refer to the related manual pages the independent set problem and the maximal independent set problem.","category":"page"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"A tutorial on how to solve the MIS problem using Bloqade is detailed in the MIS tutorial page.","category":"page"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"In the following, we list the APIs in the module BloqadeMIS, many of which support the simulation of variational quantum algorithms for solving the MIS problem.","category":"page"},{"location":"mis/#References","page":"Maximum Independent Set","title":"References","text":"","category":"section"},{"location":"mis/","page":"Maximum Independent Set","title":"Maximum Independent Set","text":"Modules = [BloqadeMIS]","category":"page"},{"location":"mis/#BloqadeMIS.add_random_vertices","page":"Maximum Independent Set","title":"BloqadeMIS.add_random_vertices","text":"add_random_vertices([rng=GLOBAL_RNG], config::AbstractVector, graph::AbstractGraph, ntrials::Int = 10)\n\nAdd vertices randomly to given configuration for ntrials times and pick the one that has largest count_vertices.\n\nArguments\n\nrng: optional, Random Number Generator.\nconfig: configuration to tweak.\ngraph: problem graph.\nntrials: number of trials to use, default is 10.\n\n\n\n\n\n","category":"function"},{"location":"mis/#BloqadeMIS.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"Maximum Independent Set","title":"BloqadeMIS.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\njulia> anyone(0b1011, 0b1100)\ntrue\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.blockade_subspace","page":"Maximum Independent Set","title":"BloqadeMIS.blockade_subspace","text":"blockade_subspace(atoms[, radius=1.0])\n\nCreate a blockade approximation subspace from given atom positions and radius.\n\n\n\n\n\n","category":"function"},{"location":"mis/#BloqadeMIS.bmask","page":"Maximum Independent Set","title":"BloqadeMIS.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"mis/#BloqadeMIS.count_vertices-Tuple{Integer}","page":"Maximum Independent Set","title":"BloqadeMIS.count_vertices","text":"count_vertices(config::Integer)\n\ncounter the number of vertices in a spin configuration.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.create_subspace_from_mis-Union{Tuple{T}, Tuple{Type{T}, Int64, AbstractVector}} where T","page":"Maximum Independent Set","title":"BloqadeMIS.create_subspace_from_mis","text":"create_subspace_from_mis(T, n::Int, mis::AbstractVector)\n\nCreate Subspace from given list of maximal cliques/maximal independent set.\n\nArguments\n\nn: number of vertices of the graph.\nmis: the list of maximal independent set.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.exact_solve_mis-Tuple{Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.exact_solve_mis","text":"exact_solve_mis(g::AbstractGraph)\n\nReturn the exact MIS size of a graph g.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.gibbs_loss-Tuple{Any, Real}","page":"Maximum Independent Set","title":"BloqadeMIS.gibbs_loss","text":"gibbs_loss([f], reg_or_samples, α::Real)\n\nThe Gibbs loss for maximum independent set defined as\n\nL = -1α log(langle ψexp(α sum(n))ψrangle)\n\nwhere n is the vertex set size.\n\nArguments\n\nf: optional, postprocessing callback function f(config) -> config.   The input config is an integer of type Int, the output   config can be a type supports count_vertices   e.g, an AbstractVector or an Integer.\nreg_or_samples can be a register (Yao.ArrayReg or SubspaceArrayReg)   or a list of measurement result (config) in AbstractVector.\nα::Real: the parameter of Gibbs loss.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.independent_set_probabilities","page":"Maximum Independent Set","title":"BloqadeMIS.independent_set_probabilities","text":"independent_set_probabilities([f], reg::YaoAPI.AbstractRegister, graph_or_mis)\n\nCalculate the probabilities of independent sets with given postprocessing function f(config) -> config. The default postprocessing function f will only reduce all configurations to independent set.\n\nArguments\n\nf: optional, postprocessing function, default is to_independent_set.\nreg: required, the register object.\ngraph_or_mis: a problem graph or the MIS size of the problem   graph (can be calculated via exact_solve_mis).\n\n\n\n\n\n","category":"function"},{"location":"mis/#BloqadeMIS.independent_set_subspace-Union{Tuple{T}, Tuple{Type{T}, Graphs.SimpleGraphs.SimpleGraph}} where T","page":"Maximum Independent Set","title":"BloqadeMIS.independent_set_subspace","text":"independent_set_subspace([T, ]graph)\n\nCreate a subspace from given graph's maximal independent set.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.is_independent_set-Tuple{Any, Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.is_independent_set","text":"is_independent_set(config, graph::AbstractGraph)\n\nReturn true if config is an independent set of graph. config can be a BitStr, a vector, or any iterable.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"Maximum Independent Set","title":"BloqadeMIS.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.mis_postprocessing-Tuple{Any, Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.mis_postprocessing","text":"mis_postprocessing(config, graph::AbstractGraph; ntrials::Int=10)\n\nThe postprocessing protocal used in Harvard experiment for finding MISs: arxiv:2202.09372, which includes a combination of to_independent_set and add_random_vertices.\n\nArguments\n\nconfig: configuration to postprocess.\ngraph: the problem graph.\n\nKeyword Arguments\n\nntrials: number of trials to use.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.mis_postprocessing-Tuple{Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.mis_postprocessing","text":"mis_postprocessing(graph::AbstractGraph; ntrials::Int = 10)\n\nCurried version of mis_postprocessing.\n\nExample\n\nto calculate rydberg_density_sum loss with postprocessing used in Harvard experiment: arxiv:2202.09372.\n\nrydberg_density_sum(mis_postprocessing(graph), reg)\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.num_mis_violation-Tuple{Any, Graphs.AbstractGraph, Int64}","page":"Maximum Independent Set","title":"BloqadeMIS.num_mis_violation","text":"num_mis_violation(config, graph::AbstractGraph, i::Int)\n\nCalculate the number of MIS violations for i-th vertex in graph and configuration config. The config should be a subtype of AbstractVector.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.rydberg_density_sum","page":"Maximum Independent Set","title":"BloqadeMIS.rydberg_density_sum","text":"rydberg_density_sum([f], reg_or_samples)\n\nSum of rydberg density.\n\nArguments\n\nf: optional, postprocessing callback function f(config) -> config.   The input config is an integer of type Int, the output   config can be a type supports count_vertices   e.g, an AbstractVector or an Integer.\nreg_or_samples can be a register (Yao.ArrayReg or SubspaceArrayReg)   or a list of measurement result (config) in AbstractVector.\n\nExample\n\nTo implement the postprocessing protocal in MIS experiment:\n\ncalculating rydberg_density_sum by first reducing the configuration\n\nto independent set using to_independent_set\n\nrandomly adding vertices then pick the largest count_vertices\n\nusing add_random_vertices.\n\nrydberg_density_sum(r) do config\n    config = to_independent_set(config, graph)\n    add_random_vertices(config, graph, 10)\n    return config\nend\n\nOr one can also just add vertice by atom order\n\nrydberg_density_sum(r) do config\n    config = to_independent_set(config, graph)\n    add_vertices!(config, graph)\n    return config\nend\n\n\n\n\n\n","category":"function"},{"location":"mis/#BloqadeMIS.to_independent_set!-Tuple{AbstractVector, Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.to_independent_set!","text":"to_independent_set!(config::AbstractVector, graph::AbstractGraph)\n\nEliminate vertices in config so that remaining vertices do not have connected edges. This algorithm is a naive vertex elimination that does not nesesarily give the maximum possible vertex set.\n\n# run the following code in Atom/VSCode\natoms = [(0.0, 1.0), (1.0, 0.), (2.0, 0.0), (1.0, 1.0), (1.0, 2.0), (2.0, 2.0)]\ngraph = unit_disk_graph(atoms, 1.5)\n\nconfig = [1, 1, 1, 0, 1, 1]\nviz_config(atoms, graph, config)\n\nto_independent_set!(config, graph)\nviz_config(atoms, graph, config)\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.to_independent_set-Tuple{Integer, Graphs.AbstractGraph}","page":"Maximum Independent Set","title":"BloqadeMIS.to_independent_set","text":"to_independent_set(config::Integer, graph::AbstractGraph)\n\nEliminate vertices in config so that remaining vertices do not have connected edges without changing the original config, see also to_independent_set!.\n\n\n\n\n\n","category":"method"},{"location":"mis/#BloqadeMIS.unit_disk_graph","page":"Maximum Independent Set","title":"BloqadeMIS.unit_disk_graph","text":"unit_disk_graph(atoms::AbstractVector, radius=1)\n\nCreate a unit disk graph from atom positions atoms. It returns a Graphs.SimpleGraph instance.\n\natoms is vector of atoms positions.\nradius is the unit in the unit disk graph definition.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/7.QMC/main.jl\"","category":"page"},{"location":"tutorials/7.QMC/main/#Quantum-Monte-Carlo-Method","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"In previous tutorials such as the Adiabatic Evolution one, Exact Diagonalization (ED) was used to produce the results. While ED is numerically exact and works for smaller systems consisting of tens of atoms it scales poorly. An alternative method that Bloqade supports is Quantum Monte Carlo (QMC) under the BloqadeQMC module which can scale to hundreds of atoms with the caveat that it is exact up to statistical errors.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"It is worth clarifying that despite the name, QMC is a purely classical method that uses the Monte Carlo (MC) approach towards problems in quantum physics. To provide more context, the space we are generating samples from is a Hilbert space of quantum-mechanical configurations. Furthermore, QMC is one of the best established methods in numerically tackling the analytically intractable integrals of quantum many-body physics that are beyond the reach of exact solutions.","category":"page"},{"location":"tutorials/7.QMC/main/#Background","page":"Quantum Monte Carlo Method","title":"Background","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Typically, the integral or sum in question is the expectation value of some observable langle A rangle_psi = sum_j a_j langle psi  phi_j rangle ^2 such as the energy, magnetization etc. The issue we face is the curse of dimensionality, meaning the number of terms in this sum grows exponentially in system size. We circumvent this curse by not calculating the whole sum, but instead sampling from the probability distribution given by langle psi  phi_j rangle ^2, favoring those terms that contribute significantly to the sum, i.e. have large weights a_j. While doing so, it is essential that we explore the configuration space ergodically. This means that configurations with a small but non-zero weight should have a chance of being reached, even though this will occur less frequently than for those with large weights.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"While QMC is an umbrella term comprising many different implementations of this same core idea tailored to a specific class of quantum problems, BloqadeQMC currently implements the SSE (Stochastic Series Expansion) by Anders Sandvik, recently adapted for the Rydberg Hamiltonian by E. Merali et al (10.48550/arXiv.2107.00766).","category":"page"},{"location":"tutorials/7.QMC/main/#Getting-Started-with-BloqadeQMC","page":"Quantum Monte Carlo Method","title":"Getting Started with BloqadeQMC","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We begin by importing the required libraries:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"using BloqadeQMC\nusing Random\nusing Plots","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"WARNING: method definition for GeneralLTFIM at /home/runner/work/Bloqade.jl/Bloqade.jl/lib/BloqadeQMC/src/ising/LTFIM.jl:125 declares type variable N but does not use it.\n","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"In addition, we will import some libraries that can be used later to check our QMC against ED results for small system sizes:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"using Bloqade\nusing Yao: mat, ArrayReg\nusing LinearAlgebra\nusing Measurements\nusing Measurements: value, uncertainty\nusing Statistics","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"As an initial example, we recreate the hamiltonian for the mathbbZ_2 phase in the 1D chain which we saw in the Adiabatic Evolution tutorial.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"nsites = 9\natoms = generate_sites(ChainLattice(), nsites, scale = 5.72)\n\nΩ = 2π * 4\nΔ = 2π * 10\nh = rydberg_h(atoms; Δ, Ω)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"nqubits: 9\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] 2π ⋅ 2.0 ⋅ ∑ σ^x_i\n└─ [-] 2π ⋅ 10.0 ⋅ ∑ n_i\n","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Now we differ from the adiabatic evolution tutorial by passing the hamiltonian to rydberg_qmc:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"h_qmc = rydberg_qmc(h);","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"The object h_qmc still contains all the previous information about the lattice geometry as well as the Hamiltonian parameters Omega and Delta. However, the object now also stores the distribution of weights from which the algorithm will sample. Without going into all the details which can be found in E. Merali et al (10.48550/arXiv.2107.00766), we can focus on those key elements of the SSE formalism that you will need to calculate observables from the samples. This requires understanding what is meant by configuration space in the SSE formalism, what samples from that space look like and what their weights are.","category":"page"},{"location":"tutorials/7.QMC/main/#Prelude:-Massaging-the-Partition-Function","page":"Quantum Monte Carlo Method","title":"Prelude: Massaging the Partition Function","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Before answering those questions, let us revisit the finite temperature partition function Z = Tr(e^-beta H). Indeed, Z is the protagonist in the mathematical formalism of SSE. Massaging it through a few tricks and combinatorics will help us answer the questions and prepare us for the diagram below.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"The core idea is the following: Instead of calculating the trace analytically, we can first write out the Taylor series of the exponential:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Z = Tr(e^-beta H) = Tr(sum_n=0^infty fracbeta^nn(-hatH)^n)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"next, we insert the usual identities over a set of basis states alpha_p, giving:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Z = sum_alpha_p sum_n=0^inftyfracbeta^nn prod_p=1^n langlealpha_p-1 -hatH  alpha_prangle","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Finally, we split the Hamiltonian into a sum of local Hamiltonians where each term acts on only one or two atoms. (For example, the latter includes the Rydberg interaction term.) Formally, we will write H = - sum_t a hatH_ta  where the labels t symbolizes whether the term is diagonal (t=1) or off-diagonal (t=-1) and a specifies the atoms the term acts on. This leads to the last crucial step in massaging the partition function: We switch the order of the n-fold product and sum. From each copy of the total Hamiltonian, we pick one of the local terms and multiply these in a new n-fold product:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Z =  sum_alpha_p sum_n=0^infty sum_S_n fracbeta^nn prod_p=1^n langlealpha_p-1 - hatH_t_p a_p  alpha_prangle","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"For further technical details, please refer to Section 2.1 of E. Merali et al (10.48550/arXiv.2107.00766)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Why is this crucial? This procedure of picking local terms produced something we will refer to as an operator sequence and denote by S_n with n being the length of this sequence. We investigate what this looks like in the section below.","category":"page"},{"location":"tutorials/7.QMC/main/#The-SSE-Configuration-Space","page":"Quantum Monte Carlo Method","title":"The SSE Configuration Space","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Let us consider a system consisting of four Rydberg atoms. One state in the SSE configuration space of this system could look like the following:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"(Image: SSE)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We define each element of the diagram above as follows:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"The four circles correspond to four atoms, with filled circles being excited atoms rrangle and white circles representing the ground state grangle.\nThe blue, red and black boxes situated either on one horizontal line or sitting between two lines stand for the local Hamiltonian terms we mentioned earlier. The interested reader may find the full definition of the local terms in Section 3 of E. Merali et al (10.48550/arXiv.2107.00766)\nThe seven copies of four atoms/six boxes are the the visual equivalent of looking at the sixth expansion order in the Taylor series introduced above. Each SSE sample will correspond to a particular expansion order m since the infinite Taylor series gave rise to an intractable sum which we can use the core idea of MC to sample from.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Putting the pieces together, we should be able to understand the general idea of the weight distribution stored in the rydberg_qmc object. That distribution is given by the matrix elements defined by the local operators (boxes) sandwiched in between two configurations of the physical system (two copies of the four vertically stacked atoms). The picture as a whole is what defines one sample in the SSE configuration whose overall weight is given by the product of the matrix elements of each operator.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"It is worth stating at this point that a precise understanding is not necessary to successfully run a simulation using BloqadeQMC. We have included this peek into the backend in order for the reader to have some notion of what we mean when we refer to the number of operators sampled in the energy calculations later on (equivalent to the number of boxes in the diagram above).","category":"page"},{"location":"tutorials/7.QMC/main/#Running-a-Simulation-using-BloqadeQMC","page":"Quantum Monte Carlo Method","title":"Running a Simulation using BloqadeQMC","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Now that we have defined the configuration space, let us traverse it and generate samples from it. It is worth pointing out that the samples generated are no longer random and independent as they are in traditional MC but rely on Markov Chain Monte Carlo (MCMC). In MCMC, the samples are no longer independent but form a chain in which the probability of the next sample depends on the current sample.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Before jumping into the code, let us touch on the prototypical example of how such a chain might be built: via the Metropolis-Hastings algorithm. This recipe has three main steps:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Randomly propose a new configuration,\naccept the proposal according to a probability given by the ratio of the weights of the current and proposed configuration,","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"P = min(fracW_currentW_proposed 1)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"and repeat.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Now, let us define the parameters than govern the length of the chain, i.e. how long we let the simulation run for:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"EQ_MCS = 100;\nMCS = 100_000;","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Note that two parameters are required. MCMC simulation is typically split into two phases: first the equilibration phase, also referred to as the burn-in, followed by the sampling phase. While the mathematical theorems surrounding Markov Chains guarantee under reasonable assumptions these chains eventually converge to the desired probability distribution, it does take some time until this is the case.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"While there is no formula that will tell you when precisely equilibration has been reached, a good heuristic is plotting an observable such as the energy. You will see its value initially fluctuate but stabilize around a value which you can then assume is its equilibrium expectation value.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"(Image: Equilibration)","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Now, we are almost ready to run the simulation.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"M = 50;\nts = BinaryThermalState(h_qmc, M);","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"BinaryThermalState is an object necessary in the backend to store the instantaneous SSE configuration during the MC steps.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"d = Diagnostics();","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Diagnostics are a feature that can be used by the advanced user to analyse performance and extract further information from the backend.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Next, we choose the inverse temperature β to be large enough for the simulation to approximate the ground state. If your system is gapped, then a finite value for β will be enough to reach the ground state. If the gap closes, then you will need to scale β with the system size.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"β = 0.5;\n\nrng = MersenneTwister(3214);","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Finally, we initialize the pseudorandom number generator. We can now execute the simulation.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Note that mc_step_beta! returns three objects which can be used for computations during each MC step. ts stores the instantaneous SSE configuration, h_qmc is the same object as before, lsize is related to the arrays used to carry out a MC step and depend on the operator sequence of the current configuration.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Furthermore, SSE_slice stores a sample of the atom configuration taken from the current SSE configuration, in this case chosen to be the first vertical slice.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"[mc_step_beta!(rng, ts, h_qmc,β, d, eq=true) for i in 1:EQ_MCS] # equilibration phase\n\ndensities_QMC = zeros(nsites)\noccs = zeros(MCS, nsites)\n\nfor i in 1:MCS # Monte Carlo Steps\n    mc_step_beta!(rng, ts, h_qmc,β, d, eq=false) do lsize, ts, h_qmc\n        SSE_slice = sample(h_qmc,ts, 1)\n        occs[i, :] = ifelse.(SSE_slice .== true, 1.0, 0.0)\n    end\nend\n\nfor jj in 1:nsites\n    densities_QMC[jj] = mean(occs[:,jj])\nend","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Let us plot the results.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"using Plots: bar\n\n\nresults_plot = bar(densities_QMC, label=\"\")\nxlabel!(\"Site number\")\nylabel!(\"Occupation density\")\nresults_plot","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip550\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip550)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip551\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip550)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip552\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"545.076,1505.26 545.076,47.2441 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1000.19,1505.26 1000.19,47.2441 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1455.31,1505.26 1455.31,47.2441 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1910.42,1505.26 1910.42,47.2441 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"545.076,1505.26 545.076,1486.36 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1000.19,1505.26 1000.19,1486.36 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1455.31,1505.26 1455.31,1486.36 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1910.42,1505.26 1910.42,1486.36 \"/>\n<path clip-path=\"url(#clip550)\" d=\"M539.728 1563.72 L556.048 1563.72 L556.048 1567.66 L534.103 1567.66 L534.103 1563.72 Q536.765 1560.97 541.349 1556.34 Q545.955 1551.69 547.136 1550.35 Q549.381 1547.82 550.261 1546.09 Q551.163 1544.33 551.163 1542.64 Q551.163 1539.88 549.219 1538.15 Q547.298 1536.41 544.196 1536.41 Q541.997 1536.41 539.543 1537.17 Q537.113 1537.94 534.335 1539.49 L534.335 1534.77 Q537.159 1533.63 539.613 1533.05 Q542.066 1532.47 544.103 1532.47 Q549.474 1532.47 552.668 1535.16 Q555.863 1537.85 555.863 1542.34 Q555.863 1544.47 555.052 1546.39 Q554.265 1548.28 552.159 1550.88 Q551.58 1551.55 548.478 1554.77 Q545.376 1557.96 539.728 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1003.2 1537.17 L991.394 1555.62 L1003.2 1555.62 L1003.2 1537.17 M1001.97 1533.1 L1007.85 1533.1 L1007.85 1555.62 L1012.78 1555.62 L1012.78 1559.51 L1007.85 1559.51 L1007.85 1567.66 L1003.2 1567.66 L1003.2 1559.51 L987.598 1559.51 L987.598 1555 L1001.97 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1455.71 1548.52 Q1452.56 1548.52 1450.71 1550.67 Q1448.88 1552.82 1448.88 1556.57 Q1448.88 1560.3 1450.71 1562.47 Q1452.56 1564.63 1455.71 1564.63 Q1458.86 1564.63 1460.69 1562.47 Q1462.54 1560.3 1462.54 1556.57 Q1462.54 1552.82 1460.69 1550.67 Q1458.86 1548.52 1455.71 1548.52 M1464.99 1533.86 L1464.99 1538.12 Q1463.23 1537.29 1461.43 1536.85 Q1459.65 1536.41 1457.89 1536.41 Q1453.26 1536.41 1450.8 1539.53 Q1448.37 1542.66 1448.03 1548.98 Q1449.39 1546.97 1451.45 1545.9 Q1453.51 1544.81 1455.99 1544.81 Q1461.2 1544.81 1464.21 1547.98 Q1467.24 1551.13 1467.24 1556.57 Q1467.24 1561.9 1464.09 1565.11 Q1460.94 1568.33 1455.71 1568.33 Q1449.72 1568.33 1446.54 1563.75 Q1443.37 1559.14 1443.37 1550.41 Q1443.37 1542.22 1447.26 1537.36 Q1451.15 1532.47 1457.7 1532.47 Q1459.46 1532.47 1461.24 1532.82 Q1463.05 1533.17 1464.99 1533.86 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1910.42 1551.25 Q1907.09 1551.25 1905.17 1553.03 Q1903.27 1554.81 1903.27 1557.94 Q1903.27 1561.06 1905.17 1562.85 Q1907.09 1564.63 1910.42 1564.63 Q1913.75 1564.63 1915.68 1562.85 Q1917.6 1561.04 1917.6 1557.94 Q1917.6 1554.81 1915.68 1553.03 Q1913.78 1551.25 1910.42 1551.25 M1905.74 1549.26 Q1902.74 1548.52 1901.05 1546.46 Q1899.38 1544.4 1899.38 1541.43 Q1899.38 1537.29 1902.32 1534.88 Q1905.28 1532.47 1910.42 1532.47 Q1915.58 1532.47 1918.52 1534.88 Q1921.46 1537.29 1921.46 1541.43 Q1921.46 1544.4 1919.77 1546.46 Q1918.11 1548.52 1915.12 1549.26 Q1918.5 1550.04 1920.37 1552.34 Q1922.27 1554.63 1922.27 1557.94 Q1922.27 1562.96 1919.19 1565.65 Q1916.14 1568.33 1910.42 1568.33 Q1904.7 1568.33 1901.62 1565.65 Q1898.57 1562.96 1898.57 1557.94 Q1898.57 1554.63 1900.47 1552.34 Q1902.37 1550.04 1905.74 1549.26 M1904.03 1541.87 Q1904.03 1544.56 1905.7 1546.06 Q1907.39 1547.57 1910.42 1547.57 Q1913.43 1547.57 1915.12 1546.06 Q1916.83 1544.56 1916.83 1541.87 Q1916.83 1539.19 1915.12 1537.68 Q1913.43 1536.18 1910.42 1536.18 Q1907.39 1536.18 1905.7 1537.68 Q1904.03 1539.19 1904.03 1541.87 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1060.35 1604.16 L1060.35 1610.43 Q1056.69 1608.68 1053.44 1607.82 Q1050.19 1606.96 1047.17 1606.96 Q1041.92 1606.96 1039.05 1609 Q1036.22 1611.04 1036.22 1614.79 Q1036.22 1617.95 1038.1 1619.57 Q1040.01 1621.16 1045.29 1622.15 L1049.17 1622.94 Q1056.37 1624.31 1059.77 1627.78 Q1063.21 1631.22 1063.21 1637.01 Q1063.21 1643.92 1058.56 1647.48 Q1053.95 1651.05 1045 1651.05 Q1041.63 1651.05 1037.81 1650.28 Q1034.02 1649.52 1029.95 1648.02 L1029.95 1641.4 Q1033.86 1643.6 1037.62 1644.71 Q1041.38 1645.83 1045 1645.83 Q1050.51 1645.83 1053.5 1643.66 Q1056.49 1641.5 1056.49 1637.49 Q1056.49 1633.99 1054.33 1632.01 Q1052.2 1630.04 1047.3 1629.05 L1043.38 1628.29 Q1036.19 1626.86 1032.97 1623.8 Q1029.76 1620.75 1029.76 1615.3 Q1029.76 1609 1034.18 1605.37 Q1038.64 1601.74 1046.44 1601.74 Q1049.78 1601.74 1053.25 1602.35 Q1056.72 1602.95 1060.35 1604.16 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1072.98 1614.48 L1078.84 1614.48 L1078.84 1650.12 L1072.98 1650.12 L1072.98 1614.48 M1072.98 1600.6 L1078.84 1600.6 L1078.84 1608.01 L1072.98 1608.01 L1072.98 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1096.89 1604.35 L1096.89 1614.48 L1108.95 1614.48 L1108.95 1619.03 L1096.89 1619.03 L1096.89 1638.38 Q1096.89 1642.74 1098.06 1643.98 Q1099.27 1645.22 1102.93 1645.22 L1108.95 1645.22 L1108.95 1650.12 L1102.93 1650.12 Q1096.15 1650.12 1093.57 1647.61 Q1091 1645.06 1091 1638.38 L1091 1619.03 L1086.7 1619.03 L1086.7 1614.48 L1091 1614.48 L1091 1604.35 L1096.89 1604.35 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1147.14 1630.84 L1147.14 1633.7 L1120.22 1633.7 Q1120.6 1639.75 1123.84 1642.93 Q1127.12 1646.08 1132.95 1646.08 Q1136.32 1646.08 1139.47 1645.25 Q1142.65 1644.43 1145.77 1642.77 L1145.77 1648.31 Q1142.62 1649.65 1139.31 1650.35 Q1136 1651.05 1132.6 1651.05 Q1124.07 1651.05 1119.07 1646.08 Q1114.1 1641.12 1114.1 1632.65 Q1114.1 1623.9 1118.81 1618.77 Q1123.56 1613.62 1131.58 1613.62 Q1138.77 1613.62 1142.94 1618.26 Q1147.14 1622.88 1147.14 1630.84 M1141.29 1629.12 Q1141.22 1624.31 1138.58 1621.45 Q1135.97 1618.58 1131.64 1618.58 Q1126.74 1618.58 1123.78 1621.35 Q1120.85 1624.12 1120.41 1629.15 L1141.29 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1207.11 1628.61 L1207.11 1650.12 L1201.25 1650.12 L1201.25 1628.8 Q1201.25 1623.74 1199.28 1621.22 Q1197.3 1618.71 1193.36 1618.71 Q1188.61 1618.71 1185.88 1621.73 Q1183.14 1624.76 1183.14 1629.98 L1183.14 1650.12 L1177.25 1650.12 L1177.25 1614.48 L1183.14 1614.48 L1183.14 1620.01 Q1185.24 1616.8 1188.07 1615.21 Q1190.94 1613.62 1194.66 1613.62 Q1200.81 1613.62 1203.96 1617.44 Q1207.11 1621.22 1207.11 1628.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1218.18 1636.06 L1218.18 1614.48 L1224.04 1614.48 L1224.04 1635.83 Q1224.04 1640.89 1226.01 1643.44 Q1227.99 1645.95 1231.93 1645.95 Q1236.68 1645.95 1239.41 1642.93 Q1242.18 1639.91 1242.18 1634.69 L1242.18 1614.48 L1248.04 1614.48 L1248.04 1650.12 L1242.18 1650.12 L1242.18 1644.65 Q1240.05 1647.9 1237.22 1649.49 Q1234.42 1651.05 1230.69 1651.05 Q1224.55 1651.05 1221.37 1647.23 Q1218.18 1643.41 1218.18 1636.06 M1232.92 1613.62 L1232.92 1613.62 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1287.86 1621.32 Q1290.05 1617.37 1293.11 1615.49 Q1296.16 1613.62 1300.3 1613.62 Q1305.87 1613.62 1308.89 1617.53 Q1311.92 1621.41 1311.92 1628.61 L1311.92 1650.12 L1306.03 1650.12 L1306.03 1628.8 Q1306.03 1623.67 1304.22 1621.19 Q1302.4 1618.71 1298.68 1618.71 Q1294.13 1618.71 1291.48 1621.73 Q1288.84 1624.76 1288.84 1629.98 L1288.84 1650.12 L1282.95 1650.12 L1282.95 1628.8 Q1282.95 1623.64 1281.14 1621.19 Q1279.33 1618.71 1275.54 1618.71 Q1271.05 1618.71 1268.41 1621.76 Q1265.77 1624.79 1265.77 1629.98 L1265.77 1650.12 L1259.88 1650.12 L1259.88 1614.48 L1265.77 1614.48 L1265.77 1620.01 Q1267.77 1616.74 1270.57 1615.18 Q1273.37 1613.62 1277.23 1613.62 Q1281.11 1613.62 1283.81 1615.59 Q1286.55 1617.56 1287.86 1621.32 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1349.19 1632.33 Q1349.19 1625.87 1346.52 1622.21 Q1343.87 1618.52 1339.23 1618.52 Q1334.58 1618.52 1331.91 1622.21 Q1329.27 1625.87 1329.27 1632.33 Q1329.27 1638.79 1331.91 1642.48 Q1334.58 1646.15 1339.23 1646.15 Q1343.87 1646.15 1346.52 1642.48 Q1349.19 1638.79 1349.19 1632.33 M1329.27 1619.89 Q1331.11 1616.7 1333.91 1615.18 Q1336.74 1613.62 1340.66 1613.62 Q1347.15 1613.62 1351.19 1618.77 Q1355.27 1623.93 1355.27 1632.33 Q1355.27 1640.73 1351.19 1645.89 Q1347.15 1651.05 1340.66 1651.05 Q1336.74 1651.05 1333.91 1649.52 Q1331.11 1647.96 1329.27 1644.78 L1329.27 1650.12 L1323.38 1650.12 L1323.38 1600.6 L1329.27 1600.6 L1329.27 1619.89 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1395.47 1630.84 L1395.47 1633.7 L1368.54 1633.7 Q1368.92 1639.75 1372.17 1642.93 Q1375.45 1646.08 1381.27 1646.08 Q1384.65 1646.08 1387.8 1645.25 Q1390.98 1644.43 1394.1 1642.77 L1394.1 1648.31 Q1390.95 1649.65 1387.64 1650.35 Q1384.33 1651.05 1380.92 1651.05 Q1372.39 1651.05 1367.4 1646.08 Q1362.43 1641.12 1362.43 1632.65 Q1362.43 1623.9 1367.14 1618.77 Q1371.88 1613.62 1379.9 1613.62 Q1387.1 1613.62 1391.27 1618.26 Q1395.47 1622.88 1395.47 1630.84 M1389.61 1629.12 Q1389.55 1624.31 1386.91 1621.45 Q1384.3 1618.58 1379.97 1618.58 Q1375.07 1618.58 1372.11 1621.35 Q1369.18 1624.12 1368.73 1629.15 L1389.61 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M1425.74 1619.95 Q1424.75 1619.38 1423.57 1619.12 Q1422.43 1618.84 1421.03 1618.84 Q1416.06 1618.84 1413.39 1622.08 Q1410.75 1625.3 1410.75 1631.35 L1410.75 1650.12 L1404.86 1650.12 L1404.86 1614.48 L1410.75 1614.48 L1410.75 1620.01 Q1412.59 1616.77 1415.55 1615.21 Q1418.51 1613.62 1422.75 1613.62 Q1423.35 1613.62 1424.08 1613.71 Q1424.81 1613.78 1425.71 1613.93 L1425.74 1619.95 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1464 2352.76,1464 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1177.91 2352.76,1177.91 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,891.824 2352.76,891.824 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,605.738 2352.76,605.738 \"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,319.652 2352.76,319.652 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1464 121.638,1464 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1177.91 121.638,1177.91 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,891.824 121.638,891.824 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,605.738 121.638,605.738 \"/>\n<polyline clip-path=\"url(#clip550)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,319.652 121.638,319.652 \"/>\n<path clip-path=\"url(#clip550)\" d=\"M9.56454 1449.79 Q5.95345 1449.79 4.12475 1453.36 Q2.31921 1456.9 2.31921 1464.03 Q2.31921 1471.14 4.12475 1474.7 Q5.95345 1478.24 9.56454 1478.24 Q13.1988 1478.24 15.0043 1474.7 Q16.833 1471.14 16.833 1464.03 Q16.833 1456.9 15.0043 1453.36 Q13.1988 1449.79 9.56454 1449.79 M9.56454 1446.09 Q15.3747 1446.09 18.4302 1450.7 Q21.5089 1455.28 21.5089 1464.03 Q21.5089 1472.76 18.4302 1477.36 Q15.3747 1481.95 9.56454 1481.95 Q3.75438 1481.95 0.675697 1477.36 Q-2.37984 1472.76 -2.37984 1464.03 Q-2.37984 1455.28 0.675697 1450.7 Q3.75438 1446.09 9.56454 1446.09 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M29.7265 1475.4 L34.6107 1475.4 L34.6107 1481.28 L29.7265 1481.28 L29.7265 1475.4 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M54.7958 1449.79 Q51.1847 1449.79 49.356 1453.36 Q47.5504 1456.9 47.5504 1464.03 Q47.5504 1471.14 49.356 1474.7 Q51.1847 1478.24 54.7958 1478.24 Q58.43 1478.24 60.2356 1474.7 Q62.0643 1471.14 62.0643 1464.03 Q62.0643 1456.9 60.2356 1453.36 Q58.43 1449.79 54.7958 1449.79 M54.7958 1446.09 Q60.6059 1446.09 63.6615 1450.7 Q66.7402 1455.28 66.7402 1464.03 Q66.7402 1472.76 63.6615 1477.36 Q60.6059 1481.95 54.7958 1481.95 Q48.9856 1481.95 45.9069 1477.36 Q42.8514 1472.76 42.8514 1464.03 Q42.8514 1455.28 45.9069 1450.7 Q48.9856 1446.09 54.7958 1446.09 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M11.1618 1163.71 Q7.55066 1163.71 5.72197 1167.27 Q3.91642 1170.81 3.91642 1177.94 Q3.91642 1185.05 5.72197 1188.62 Q7.55066 1192.16 11.1618 1192.16 Q14.796 1192.16 16.6015 1188.62 Q18.4302 1185.05 18.4302 1177.94 Q18.4302 1170.81 16.6015 1167.27 Q14.796 1163.71 11.1618 1163.71 M11.1618 1160 Q16.9719 1160 20.0274 1164.61 Q23.1061 1169.19 23.1061 1177.94 Q23.1061 1186.67 20.0274 1191.28 Q16.9719 1195.86 11.1618 1195.86 Q5.3516 1195.86 2.27291 1191.28 Q-0.782629 1186.67 -0.782629 1177.94 Q-0.782629 1169.19 2.27291 1164.61 Q5.3516 1160 11.1618 1160 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M31.3237 1189.31 L36.2079 1189.31 L36.2079 1195.19 L31.3237 1195.19 L31.3237 1189.31 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M50.4208 1191.25 L66.7402 1191.25 L66.7402 1195.19 L44.7958 1195.19 L44.7958 1191.25 Q47.4579 1188.5 52.0412 1183.87 Q56.6476 1179.22 57.8282 1177.87 Q60.0735 1175.35 60.9532 1173.62 Q61.8559 1171.86 61.8559 1170.17 Q61.8559 1167.41 59.9115 1165.68 Q57.9902 1163.94 54.8884 1163.94 Q52.6893 1163.94 50.2356 1164.7 Q47.8051 1165.47 45.0273 1167.02 L45.0273 1162.3 Q47.8514 1161.16 50.3051 1160.58 Q52.7588 1160 54.7958 1160 Q60.1661 1160 63.3605 1162.69 Q66.555 1165.37 66.555 1169.87 Q66.555 1172 65.7448 1173.92 Q64.9578 1175.81 62.8513 1178.41 Q62.2726 1179.08 59.1708 1182.3 Q56.0689 1185.49 50.4208 1191.25 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M9.07843 877.622 Q5.46734 877.622 3.63864 881.187 Q1.8331 884.729 1.8331 891.858 Q1.8331 898.965 3.63864 902.529 Q5.46734 906.071 9.07843 906.071 Q12.7127 906.071 14.5182 902.529 Q16.3469 898.965 16.3469 891.858 Q16.3469 884.729 14.5182 881.187 Q12.7127 877.622 9.07843 877.622 M9.07843 873.919 Q14.8886 873.919 17.9441 878.525 Q21.0228 883.108 21.0228 891.858 Q21.0228 900.585 17.9441 905.191 Q14.8886 909.775 9.07843 909.775 Q3.26828 909.775 0.189588 905.191 Q-2.86595 900.585 -2.86595 891.858 Q-2.86595 883.108 0.189588 878.525 Q3.26828 873.919 9.07843 873.919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M29.2404 903.224 L34.1246 903.224 L34.1246 909.104 L29.2404 909.104 L29.2404 903.224 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M57.1569 878.618 L45.3514 897.067 L57.1569 897.067 L57.1569 878.618 M55.93 874.544 L61.8096 874.544 L61.8096 897.067 L66.7402 897.067 L66.7402 900.955 L61.8096 900.955 L61.8096 909.104 L57.1569 909.104 L57.1569 900.955 L41.5551 900.955 L41.5551 896.442 L55.93 874.544 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M9.4025 591.536 Q5.79141 591.536 3.96272 595.101 Q2.15717 598.643 2.15717 605.772 Q2.15717 612.879 3.96272 616.444 Q5.79141 619.985 9.4025 619.985 Q13.0367 619.985 14.8423 616.444 Q16.671 612.879 16.671 605.772 Q16.671 598.643 14.8423 595.101 Q13.0367 591.536 9.4025 591.536 M9.4025 587.833 Q15.2127 587.833 18.2682 592.439 Q21.3469 597.022 21.3469 605.772 Q21.3469 614.499 18.2682 619.106 Q15.2127 623.689 9.4025 623.689 Q3.59235 623.689 0.51366 619.106 Q-2.54188 614.499 -2.54188 605.772 Q-2.54188 597.022 0.51366 592.439 Q3.59235 587.833 9.4025 587.833 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M29.5644 617.138 L34.4487 617.138 L34.4487 623.018 L29.5644 623.018 L29.5644 617.138 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M55.2124 603.874 Q52.0643 603.874 50.2125 606.027 Q48.3838 608.18 48.3838 611.93 Q48.3838 615.657 50.2125 617.832 Q52.0643 619.985 55.2124 619.985 Q58.3606 619.985 60.1893 617.832 Q62.0411 615.657 62.0411 611.93 Q62.0411 608.18 60.1893 606.027 Q58.3606 603.874 55.2124 603.874 M64.4948 589.222 L64.4948 593.481 Q62.7355 592.647 60.93 592.208 Q59.1476 591.768 57.3884 591.768 Q52.7588 591.768 50.3051 594.893 Q47.8745 598.018 47.5273 604.337 Q48.893 602.323 50.9532 601.258 Q53.0134 600.171 55.4902 600.171 Q60.6985 600.171 63.7078 603.342 Q66.7402 606.49 66.7402 611.93 Q66.7402 617.254 63.592 620.471 Q60.4439 623.689 55.2124 623.689 Q49.2171 623.689 46.0458 619.106 Q42.8745 614.499 42.8745 605.772 Q42.8745 597.578 46.7634 592.717 Q50.6523 587.833 57.2032 587.833 Q58.9624 587.833 60.7448 588.18 Q62.5504 588.527 64.4948 589.222 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M9.65713 305.45 Q6.04604 305.45 4.21734 309.015 Q2.4118 312.557 2.4118 319.686 Q2.4118 326.793 4.21734 330.358 Q6.04604 333.899 9.65713 333.899 Q13.2914 333.899 15.0969 330.358 Q16.9256 326.793 16.9256 319.686 Q16.9256 312.557 15.0969 309.015 Q13.2914 305.45 9.65713 305.45 M9.65713 301.747 Q15.4673 301.747 18.5228 306.353 Q21.6015 310.937 21.6015 319.686 Q21.6015 328.413 18.5228 333.02 Q15.4673 337.603 9.65713 337.603 Q3.84698 337.603 0.768289 333.02 Q-2.28725 328.413 -2.28725 319.686 Q-2.28725 310.937 0.768289 306.353 Q3.84698 301.747 9.65713 301.747 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M29.8191 331.052 L34.7033 331.052 L34.7033 336.932 L29.8191 336.932 L29.8191 331.052 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M54.8884 320.52 Q51.5551 320.52 49.6338 322.302 Q47.7356 324.085 47.7356 327.21 Q47.7356 330.335 49.6338 332.117 Q51.5551 333.899 54.8884 333.899 Q58.2217 333.899 60.143 332.117 Q62.0643 330.311 62.0643 327.21 Q62.0643 324.085 60.143 322.302 Q58.2448 320.52 54.8884 320.52 M50.2125 318.529 Q47.2032 317.788 45.5134 315.728 Q43.8468 313.668 43.8468 310.705 Q43.8468 306.562 46.7866 304.154 Q49.7495 301.747 54.8884 301.747 Q60.0504 301.747 62.9902 304.154 Q65.93 306.562 65.93 310.705 Q65.93 313.668 64.2402 315.728 Q62.5735 317.788 59.5874 318.529 Q62.967 319.316 64.842 321.608 Q66.7402 323.899 66.7402 327.21 Q66.7402 332.233 63.6615 334.918 Q60.6059 337.603 54.8884 337.603 Q49.1708 337.603 46.0921 334.918 Q43.0366 332.233 43.0366 327.21 Q43.0366 323.899 44.9347 321.608 Q46.8329 319.316 50.2125 318.529 M48.4995 311.145 Q48.4995 313.83 50.1662 315.335 Q51.856 316.839 54.8884 316.839 Q57.8976 316.839 59.5874 315.335 Q61.3004 313.83 61.3004 311.145 Q61.3004 308.46 59.5874 306.955 Q57.8976 305.45 54.8884 305.45 Q51.856 305.45 50.1662 306.955 Q48.4995 308.46 48.4995 311.145 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-96.2814 1066.53 Q-96.2814 1073.53 -91.0616 1077.67 Q-85.8417 1081.77 -76.8342 1081.77 Q-67.8586 1081.77 -62.6387 1077.67 Q-57.4188 1073.53 -57.4188 1066.53 Q-57.4188 1059.53 -62.6387 1055.45 Q-67.8586 1051.35 -76.8342 1051.35 Q-85.8417 1051.35 -91.0616 1055.45 Q-96.2814 1059.53 -96.2814 1066.53 M-101.501 1066.53 Q-101.501 1056.53 -94.7855 1050.55 Q-88.1015 1044.57 -76.8342 1044.57 Q-65.5987 1044.57 -58.8829 1050.55 Q-52.1989 1056.53 -52.1989 1066.53 Q-52.1989 1076.55 -58.8829 1082.57 Q-65.5669 1088.55 -76.8342 1088.55 Q-88.1015 1088.55 -94.7855 1082.57 Q-101.501 1076.55 -101.501 1066.53 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-87.4013 1009.11 L-81.9268 1009.11 Q-83.2954 1011.59 -83.9638 1014.11 Q-84.664 1016.59 -84.664 1019.14 Q-84.664 1024.83 -81.0356 1027.98 Q-77.439 1031.13 -70.9141 1031.13 Q-64.3893 1031.13 -60.7608 1027.98 Q-57.1642 1024.83 -57.1642 1019.14 Q-57.1642 1016.59 -57.8326 1014.11 Q-58.5328 1011.59 -59.9014 1009.11 L-54.4906 1009.11 Q-53.3448 1011.56 -52.7718 1014.2 Q-52.1989 1016.81 -52.1989 1019.77 Q-52.1989 1027.82 -57.2597 1032.57 Q-62.3204 1037.31 -70.9141 1037.31 Q-79.6351 1037.31 -84.6322 1032.54 Q-89.6293 1027.73 -89.6293 1019.39 Q-89.6293 1016.68 -89.0564 1014.11 Q-88.5153 1011.53 -87.4013 1009.11 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-87.4013 973.271 L-81.9268 973.271 Q-83.2954 975.753 -83.9638 978.268 Q-84.664 980.75 -84.664 983.297 Q-84.664 988.994 -81.0356 992.145 Q-77.439 995.296 -70.9141 995.296 Q-64.3893 995.296 -60.7608 992.145 Q-57.1642 988.994 -57.1642 983.297 Q-57.1642 980.75 -57.8326 978.268 Q-58.5328 975.753 -59.9014 973.271 L-54.4906 973.271 Q-53.3448 975.721 -52.7718 978.363 Q-52.1989 980.973 -52.1989 983.933 Q-52.1989 991.986 -57.2597 996.728 Q-62.3204 1001.47 -70.9141 1001.47 Q-79.6351 1001.47 -84.6322 996.696 Q-89.6293 991.89 -89.6293 983.551 Q-89.6293 980.846 -89.0564 978.268 Q-88.5153 975.69 -87.4013 973.271 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-67.1902 963.69 L-88.7699 963.69 L-88.7699 957.834 L-67.413 957.834 Q-62.3522 957.834 -59.8059 955.86 Q-57.2915 953.887 -57.2915 949.94 Q-57.2915 945.198 -60.3152 942.461 Q-63.3389 939.691 -68.5588 939.691 L-88.7699 939.691 L-88.7699 933.835 L-53.122 933.835 L-53.122 939.691 L-58.5965 939.691 Q-55.3499 941.824 -53.7585 944.657 Q-52.1989 947.458 -52.1989 951.182 Q-52.1989 957.324 -56.0183 960.507 Q-59.8378 963.69 -67.1902 963.69 M-89.6293 948.954 L-89.6293 948.954 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-58.4691 916.107 L-39.563 916.107 L-39.563 921.995 L-88.7699 921.995 L-88.7699 916.107 L-83.3591 916.107 Q-86.5419 914.26 -88.0697 911.46 Q-89.6293 908.627 -89.6293 904.712 Q-89.6293 898.219 -84.4731 894.177 Q-79.3168 890.103 -70.9141 890.103 Q-62.5114 890.103 -57.3551 894.177 Q-52.1989 898.219 -52.1989 904.712 Q-52.1989 908.627 -53.7267 911.46 Q-55.2863 914.26 -58.4691 916.107 M-70.9141 896.182 Q-77.3753 896.182 -81.0356 898.855 Q-84.7277 901.497 -84.7277 906.144 Q-84.7277 910.791 -81.0356 913.465 Q-77.3753 916.107 -70.9141 916.107 Q-64.4529 916.107 -60.7608 913.465 Q-57.1005 910.791 -57.1005 906.144 Q-57.1005 901.497 -60.7608 898.855 Q-64.4529 896.182 -70.9141 896.182 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-71.0414 864.194 Q-71.0414 871.292 -69.4182 874.029 Q-67.7949 876.766 -63.88 876.766 Q-60.7608 876.766 -58.9147 874.729 Q-57.1005 872.661 -57.1005 869.128 Q-57.1005 864.258 -60.538 861.33 Q-64.0073 858.37 -69.7364 858.37 L-71.0414 858.37 L-71.0414 864.194 M-73.4604 852.513 L-53.122 852.513 L-53.122 858.37 L-58.5328 858.37 Q-55.2863 860.375 -53.7267 863.367 Q-52.1989 866.359 -52.1989 870.687 Q-52.1989 876.162 -55.2545 879.408 Q-58.3418 882.623 -63.4981 882.623 Q-69.5136 882.623 -72.5692 878.613 Q-75.6247 874.57 -75.6247 866.581 L-75.6247 858.37 L-76.1976 858.37 Q-80.2399 858.37 -82.436 861.043 Q-84.664 863.685 -84.664 868.491 Q-84.664 871.547 -83.932 874.443 Q-83.1999 877.339 -81.7358 880.013 L-87.1467 880.013 Q-88.388 876.798 -88.9927 873.775 Q-89.6293 870.751 -89.6293 867.886 Q-89.6293 860.152 -85.6189 856.333 Q-81.6085 852.513 -73.4604 852.513 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-98.8914 834.657 L-88.7699 834.657 L-88.7699 822.594 L-84.2184 822.594 L-84.2184 834.657 L-64.8667 834.657 Q-60.5062 834.657 -59.2649 833.48 Q-58.0235 832.27 -58.0235 828.61 L-58.0235 822.594 L-53.122 822.594 L-53.122 828.61 Q-53.122 835.389 -55.6364 837.967 Q-58.1827 840.546 -64.8667 840.546 L-84.2184 840.546 L-84.2184 844.842 L-88.7699 844.842 L-88.7699 840.546 L-98.8914 840.546 L-98.8914 834.657 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-88.7699 814.892 L-88.7699 809.035 L-53.122 809.035 L-53.122 814.892 L-88.7699 814.892 M-102.647 814.892 L-102.647 809.035 L-95.2311 809.035 L-95.2311 814.892 L-102.647 814.892 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-84.664 782.968 Q-84.664 787.678 -80.9719 790.416 Q-77.3116 793.153 -70.9141 793.153 Q-64.5166 793.153 -60.8245 790.447 Q-57.1642 787.71 -57.1642 782.968 Q-57.1642 778.289 -60.8563 775.552 Q-64.5484 772.814 -70.9141 772.814 Q-77.248 772.814 -80.9401 775.552 Q-84.664 778.289 -84.664 782.968 M-89.6293 782.968 Q-89.6293 775.329 -84.664 770.968 Q-79.6988 766.608 -70.9141 766.608 Q-62.1613 766.608 -57.1642 770.968 Q-52.1989 775.329 -52.1989 782.968 Q-52.1989 790.638 -57.1642 794.999 Q-62.1613 799.328 -70.9141 799.328 Q-79.6988 799.328 -84.664 794.999 Q-89.6293 790.638 -89.6293 782.968 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-74.638 727.268 L-53.122 727.268 L-53.122 733.124 L-74.4471 733.124 Q-79.5078 733.124 -82.0223 735.098 Q-84.5367 737.071 -84.5367 741.018 Q-84.5367 745.76 -81.513 748.497 Q-78.4893 751.235 -73.2694 751.235 L-53.122 751.235 L-53.122 757.123 L-88.7699 757.123 L-88.7699 751.235 L-83.2317 751.235 Q-86.4464 749.134 -88.0379 746.301 Q-89.6293 743.437 -89.6293 739.713 Q-89.6293 733.57 -85.8099 730.419 Q-82.0223 727.268 -74.638 727.268 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-83.3591 671.409 L-102.647 671.409 L-102.647 665.552 L-53.122 665.552 L-53.122 671.409 L-58.4691 671.409 Q-55.2863 673.255 -53.7267 676.088 Q-52.1989 678.888 -52.1989 682.835 Q-52.1989 689.296 -57.3551 693.37 Q-62.5114 697.413 -70.9141 697.413 Q-79.3168 697.413 -84.4731 693.37 Q-89.6293 689.296 -89.6293 682.835 Q-89.6293 678.888 -88.0697 676.088 Q-86.5419 673.255 -83.3591 671.409 M-70.9141 691.365 Q-64.4529 691.365 -60.7608 688.724 Q-57.1005 686.05 -57.1005 681.403 Q-57.1005 676.756 -60.7608 674.082 Q-64.4529 671.409 -70.9141 671.409 Q-77.3753 671.409 -81.0356 674.082 Q-84.7277 676.756 -84.7277 681.403 Q-84.7277 686.05 -81.0356 688.724 Q-77.3753 691.365 -70.9141 691.365 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-72.41 622.998 L-69.5455 622.998 L-69.5455 649.925 Q-63.4981 649.543 -60.3152 646.296 Q-57.1642 643.018 -57.1642 637.193 Q-57.1642 633.819 -57.9917 630.668 Q-58.8193 627.485 -60.4743 624.366 L-54.9362 624.366 Q-53.5994 627.517 -52.8992 630.827 Q-52.1989 634.138 -52.1989 637.543 Q-52.1989 646.073 -57.1642 651.07 Q-62.1294 656.036 -70.5958 656.036 Q-79.3487 656.036 -84.4731 651.325 Q-89.6293 646.583 -89.6293 638.562 Q-89.6293 631.368 -84.9823 627.199 Q-80.3672 622.998 -72.41 622.998 M-74.1288 628.854 Q-78.9349 628.918 -81.7995 631.559 Q-84.664 634.169 -84.664 638.498 Q-84.664 643.4 -81.8949 646.36 Q-79.1259 649.288 -74.097 649.734 L-74.1288 628.854 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-74.638 583.753 L-53.122 583.753 L-53.122 589.609 L-74.4471 589.609 Q-79.5078 589.609 -82.0223 591.583 Q-84.5367 593.556 -84.5367 597.503 Q-84.5367 602.245 -81.513 604.983 Q-78.4893 607.72 -73.2694 607.72 L-53.122 607.72 L-53.122 613.608 L-88.7699 613.608 L-88.7699 607.72 L-83.2317 607.72 Q-86.4464 605.619 -88.0379 602.786 Q-89.6293 599.922 -89.6293 596.198 Q-89.6293 590.055 -85.8099 586.904 Q-82.0223 583.753 -74.638 583.753 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-87.7196 549.346 L-82.1814 549.346 Q-83.4545 551.829 -84.0911 554.503 Q-84.7277 557.176 -84.7277 560.041 Q-84.7277 564.401 -83.3909 566.597 Q-82.0541 568.762 -79.3805 568.762 Q-77.3435 568.762 -76.1658 567.202 Q-75.02 565.643 -73.9696 560.932 L-73.524 558.927 Q-72.1872 552.688 -69.7364 550.078 Q-67.3175 547.437 -62.957 547.437 Q-57.9917 547.437 -55.0953 551.383 Q-52.1989 555.298 -52.1989 562.173 Q-52.1989 565.038 -52.7718 568.157 Q-53.3129 571.244 -54.4269 574.682 L-60.4743 574.682 Q-58.7874 571.435 -57.9281 568.284 Q-57.1005 565.133 -57.1005 562.046 Q-57.1005 557.908 -58.501 555.68 Q-59.9333 553.452 -62.5114 553.452 Q-64.8985 553.452 -66.1716 555.075 Q-67.4448 556.667 -68.6224 562.11 L-69.0999 564.147 Q-70.2457 569.589 -72.601 572.008 Q-74.9882 574.427 -79.1259 574.427 Q-84.1548 574.427 -86.892 570.862 Q-89.6293 567.298 -89.6293 560.741 Q-89.6293 557.494 -89.1519 554.63 Q-88.6744 551.765 -87.7196 549.346 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-88.7699 538.111 L-88.7699 532.254 L-53.122 532.254 L-53.122 538.111 L-88.7699 538.111 M-102.647 538.111 L-102.647 532.254 L-95.2311 532.254 L-95.2311 538.111 L-102.647 538.111 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-98.8914 514.208 L-88.7699 514.208 L-88.7699 502.145 L-84.2184 502.145 L-84.2184 514.208 L-64.8667 514.208 Q-60.5062 514.208 -59.2649 513.03 Q-58.0235 511.821 -58.0235 508.16 L-58.0235 502.145 L-53.122 502.145 L-53.122 508.16 Q-53.122 514.94 -55.6364 517.518 Q-58.1827 520.096 -64.8667 520.096 L-84.2184 520.096 L-84.2184 524.393 L-88.7699 524.393 L-88.7699 520.096 L-98.8914 520.096 L-98.8914 514.208 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip550)\" d=\"M-49.8118 479.61 Q-43.4461 482.093 -41.5045 484.448 Q-39.563 486.803 -39.563 490.75 L-39.563 495.429 L-44.4646 495.429 L-44.4646 491.991 Q-44.4646 489.572 -45.6104 488.236 Q-46.7562 486.899 -51.0213 485.276 L-53.6949 484.225 L-88.7699 498.644 L-88.7699 492.437 L-60.8881 481.297 L-88.7699 470.157 L-88.7699 463.95 L-49.8118 479.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip552)\" d=\"M226.495 93.8871 L226.495 1464 L408.541 1464 L408.541 93.8871 L226.495 93.8871 L226.495 93.8871  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"226.495,93.8871 226.495,1464 408.541,1464 408.541,93.8871 226.495,93.8871 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M454.053 1454.87 L454.053 1464 L636.099 1464 L636.099 1454.87 L454.053 1454.87 L454.053 1454.87  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.053,1454.87 454.053,1464 636.099,1464 636.099,1454.87 454.053,1454.87 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M681.61 103.986 L681.61 1464 L863.656 1464 L863.656 103.986 L681.61 103.986 L681.61 103.986  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"681.61,103.986 681.61,1464 863.656,1464 863.656,103.986 681.61,103.986 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M909.168 1454.34 L909.168 1464 L1091.21 1464 L1091.21 1454.34 L909.168 1454.34 L909.168 1454.34  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"909.168,1454.34 909.168,1464 1091.21,1464 1091.21,1454.34 909.168,1454.34 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M1136.73 102.112 L1136.73 1464 L1318.77 1464 L1318.77 102.112 L1136.73 102.112 L1136.73 102.112  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1136.73,102.112 1136.73,1464 1318.77,1464 1318.77,102.112 1136.73,102.112 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M1364.28 1458.23 L1364.28 1464 L1546.33 1464 L1546.33 1458.23 L1364.28 1458.23 L1364.28 1458.23  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1364.28,1458.23 1364.28,1464 1546.33,1464 1546.33,1458.23 1364.28,1458.23 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M1591.84 97.0913 L1591.84 1464 L1773.89 1464 L1773.89 97.0913 L1591.84 97.0913 L1591.84 97.0913  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.84,97.0913 1591.84,1464 1773.89,1464 1773.89,97.0913 1591.84,97.0913 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M1819.4 1459.53 L1819.4 1464 L2001.44 1464 L2001.44 1459.53 L1819.4 1459.53 L1819.4 1459.53  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1819.4,1459.53 1819.4,1464 2001.44,1464 2001.44,1459.53 1819.4,1459.53 \"/>\n<path clip-path=\"url(#clip552)\" d=\"M2046.96 88.5087 L2046.96 1464 L2229 1464 L2229 88.5087 L2046.96 88.5087 L2046.96 88.5087  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip552)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2046.96,88.5087 2046.96,1464 2229,1464 2229,88.5087 2046.96,88.5087 \"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"317.518\" cy=\"93.8871\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"545.076\" cy=\"1454.87\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"772.633\" cy=\"103.986\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1000.19\" cy=\"1454.34\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1227.75\" cy=\"102.112\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1455.31\" cy=\"1458.23\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1682.86\" cy=\"97.0913\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1910.42\" cy=\"1459.53\" r=\"2\"/>\n<circle clip-path=\"url(#clip552)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2137.98\" cy=\"88.5087\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"As expected, we see a mathbbZ_2 pattern has emerged, just as we saw using the exact diagonalization method. So let us try an example that goes beyond what is feasible with ED.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We run the same code as before, substituting the 1D chain with 9 atoms for a 2D square lattice with 100 atoms.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"nx = ny = 10;\nnsites = nx*ny;\natoms = generate_sites(SquareLattice(), nx, ny, scale = 6.51);","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"(Image: 100atoms)","category":"page"},{"location":"tutorials/7.QMC/main/#Calculating-Observables-using-BloqadeQMC","page":"Quantum Monte Carlo Method","title":"Calculating Observables using BloqadeQMC","text":"","category":"section"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"The final question we will address in this tutorial is how to calculate observables using BloqadeQMC. We will choose to investigate the energy during a detuning sweep. Furthermore, we will limit ourselves to a system size which ED can also handle such that we may compare the results from both methods.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Let us start by returning to the 1D chain and defining the Hamiltonian parameters. We will keep the constant Rabi drive from before, i.e. Omega = 2pi times 4 MHz. For the detuning, we will choose the following ramp.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"nsites = 9;\natoms = generate_sites(ChainLattice(), nsites, scale = 5.72);\n\nΔ_step = 15;\nΔ = LinRange(-2π * 9, 2π * 9, Δ_step);","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Now, we only need to make two small changes to our previous MC code. First, for each value of Delta specified in this ramp, we will run a separate QMC simulation that will produce one data point in the final energy plot. Second, we need to store the number of operators contained in each sample. Yes, this is where the picture we introduced earlier comes in. This number will fluctuate from sample to sample as we build the Markov chain. It is directly returned by the mc_step_beta!() function.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We can then use the number of operators to compute the energy due to the following observation. Firstly, we know from statistical physics that:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"langle E rangle = -fracpartial ln Zpartial beta","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Yet in the SSE formalism we can find another expression for the expectation value langle E rangle. Let us work backwards and consider the SSE expectation value of the length of the operator sequence:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"beginaligned\nlangle n rangle = frac1Z Tr(sum_n=0^infty n frac(-beta hatH)^nn) \n                  = frac1Z Tr(sum_n=1^infty n frac(-beta hatH)^nn) \n                  = frac1Z Tr(sum_n=1^infty frac(-beta hatH)^n(n-1)) \n                  = frac1Z Tr(sum_n=0^infty (-beta hatH) * frac(-beta hatH)^nn)\nendaligned","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"where in the second line we dropped the vanishing n=0 term and in the fourth line we shifted the sum over n by 1 and obtained the extra factor -beta hatH. From this, we directly read of the SSE formula for the energy expectation value:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"langle E rangle = -fraclangle n ranglebeta","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"using BinningAnalysis\n\nenergy_QMC = []\n\nfor ii in 1:Δ_step\n    h_ii = rydberg_h(atoms; Δ = Δ[ii], Ω)\n    h_ii_qmc = rydberg_qmc(h_ii)\n    ts_ii = BinaryThermalState(h_ii_qmc,M)\n    d_ii = Diagnostics()\n\n    [mc_step_beta!(rng, ts_ii, h_ii_qmc, β, d_ii, eq=true) for i in 1:EQ_MCS] #equilibration phase\n\n    ns = zeros(MCS)\n\n    for i in 1:MCS # Monte Carlo Steps\n        ns[i] = mc_step_beta!(rng, ts_ii, h_ii_qmc, β, d_ii, eq=false)\n    end\n\n    energy(x) = -x / β + h_ii_qmc.energy_shift  # The energy shift here ensures that all matrix elements are non-negative. See Merali et al for details.\n    BE = LogBinner(energy.(ns)) # Binning analysis\n    τ_energy = tau(BE)\n    ratio = 2 * τ_energy + 1\n    energy_binned = measurement(mean(BE), std_error(BE)*sqrt(ratio))\n    append!(energy_QMC, energy_binned)\nend","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"There is one last point worth addressing when calculating expectation values using a MCMC method. As mentioned previously, the samples are not statistically independent, instead they are correlated due to the Markov Chain property. This point is crucial. After all, Monte Carlo is exact only in a statistical sense. We must construct error bars around the mean values generated by our simulation. The correlation of samples has the effect of reducing the effective variance, thus purporting an accuracy we cannot in fact justify.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"One method of addressing this issue is via binning analysis. The idea is to bin small sequences of samples together and average over them. This gives rise to an reduced effective sample size given by:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"N_eff = fracN_orig2tau + 1","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"where tau is the autocorrelation time.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We use this effective sample size to rescale the standard error by sqrt2tau + 1. For details, please see the documentation of the BinningAnalysis package. If the error bars thus achieved are still too large, increasing the number of samples taken, i.e. the number of Monte Carlo steps can help alleviate the problem.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"Finally, let us carry out the ED calculation as well and plot both results together.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"energy_ED = zeros(Δ_step)\n\nfor ii in 1:Δ_step\n    h_ii = rydberg_h(atoms; Δ = Δ[ii], Ω)\n    h_m = Matrix(mat(h_ii))\n    energies, vecs = LinearAlgebra.eigen(h_m)\n\n    w = exp.(-β .* (energies .- energies[1]))\n    energy_ED[ii] = sum(w .* energies) / sum(w)\nend\n\nfig_energy = scatter(Δ/2π, energy_ED, label=\"ED\", marker=:x);\nscatter!(Δ/2π, value.(energy_QMC); yerror=uncertainty.(energy_QMC), label=\"QMC\", marker=:x)\nxlabel!(\"Δ/2π\")\nylabel!(\"Energy\")\nfig_energy","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip580\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip581\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip582\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"343.308,1505.26 343.308,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"638.121,1505.26 638.121,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"932.935,1505.26 932.935,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1227.75,1505.26 1227.75,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1522.56,1505.26 1522.56,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1817.37,1505.26 1817.37,47.2441 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2112.19,1505.26 2112.19,47.2441 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"343.308,1505.26 343.308,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"638.121,1505.26 638.121,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"932.935,1505.26 932.935,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1227.75,1505.26 1227.75,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1522.56,1505.26 1522.56,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1817.37,1505.26 1817.37,1486.36 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2112.19,1505.26 2112.19,1486.36 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M290.334 1550.83 L320.009 1550.83 L320.009 1554.77 L290.334 1554.77 L290.334 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M328.921 1533.1 L351.143 1533.1 L351.143 1535.09 L338.597 1567.66 L333.713 1567.66 L345.519 1537.04 L328.921 1537.04 L328.921 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M360.264 1561.78 L365.148 1561.78 L365.148 1567.66 L360.264 1567.66 L360.264 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M375.379 1533.1 L393.736 1533.1 L393.736 1537.04 L379.662 1537.04 L379.662 1545.51 Q380.68 1545.16 381.699 1545 Q382.717 1544.81 383.736 1544.81 Q389.523 1544.81 392.903 1547.98 Q396.282 1551.16 396.282 1556.57 Q396.282 1562.15 392.81 1565.25 Q389.338 1568.33 383.018 1568.33 Q380.842 1568.33 378.574 1567.96 Q376.329 1567.59 373.921 1566.85 L373.921 1562.15 Q376.004 1563.28 378.227 1563.84 Q380.449 1564.4 382.926 1564.4 Q386.93 1564.4 389.268 1562.29 Q391.606 1560.18 391.606 1556.57 Q391.606 1552.96 389.268 1550.85 Q386.93 1548.75 382.926 1548.75 Q381.051 1548.75 379.176 1549.16 Q377.324 1549.58 375.379 1550.46 L375.379 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M584.649 1550.83 L614.325 1550.83 L614.325 1554.77 L584.649 1554.77 L584.649 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M624.464 1533.1 L642.82 1533.1 L642.82 1537.04 L628.746 1537.04 L628.746 1545.51 Q629.765 1545.16 630.783 1545 Q631.802 1544.81 632.82 1544.81 Q638.607 1544.81 641.987 1547.98 Q645.367 1551.16 645.367 1556.57 Q645.367 1562.15 641.894 1565.25 Q638.422 1568.33 632.103 1568.33 Q629.927 1568.33 627.658 1567.96 Q625.413 1567.59 623.006 1566.85 L623.006 1562.15 Q625.089 1563.28 627.311 1563.84 Q629.533 1564.4 632.01 1564.4 Q636.015 1564.4 638.353 1562.29 Q640.691 1560.18 640.691 1556.57 Q640.691 1552.96 638.353 1550.85 Q636.015 1548.75 632.01 1548.75 Q630.135 1548.75 628.26 1549.16 Q626.408 1549.58 624.464 1550.46 L624.464 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M654.58 1561.78 L659.464 1561.78 L659.464 1567.66 L654.58 1567.66 L654.58 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M679.649 1536.18 Q676.038 1536.18 674.209 1539.74 Q672.403 1543.28 672.403 1550.41 Q672.403 1557.52 674.209 1561.09 Q676.038 1564.63 679.649 1564.63 Q683.283 1564.63 685.089 1561.09 Q686.917 1557.52 686.917 1550.41 Q686.917 1543.28 685.089 1539.74 Q683.283 1536.18 679.649 1536.18 M679.649 1532.47 Q685.459 1532.47 688.515 1537.08 Q691.593 1541.66 691.593 1550.41 Q691.593 1559.14 688.515 1563.75 Q685.459 1568.33 679.649 1568.33 Q673.839 1568.33 670.76 1563.75 Q667.704 1559.14 667.704 1550.41 Q667.704 1541.66 670.76 1537.08 Q673.839 1532.47 679.649 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M879.96 1550.83 L909.636 1550.83 L909.636 1554.77 L879.96 1554.77 L879.96 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M923.756 1563.72 L940.076 1563.72 L940.076 1567.66 L918.131 1567.66 L918.131 1563.72 Q920.794 1560.97 925.377 1556.34 Q929.983 1551.69 931.164 1550.35 Q933.409 1547.82 934.289 1546.09 Q935.192 1544.33 935.192 1542.64 Q935.192 1539.88 933.247 1538.15 Q931.326 1536.41 928.224 1536.41 Q926.025 1536.41 923.571 1537.17 Q921.141 1537.94 918.363 1539.49 L918.363 1534.77 Q921.187 1533.63 923.641 1533.05 Q926.094 1532.47 928.131 1532.47 Q933.502 1532.47 936.696 1535.16 Q939.891 1537.85 939.891 1542.34 Q939.891 1544.47 939.08 1546.39 Q938.293 1548.28 936.187 1550.88 Q935.608 1551.55 932.506 1554.77 Q929.405 1557.96 923.756 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M949.891 1561.78 L954.775 1561.78 L954.775 1567.66 L949.891 1567.66 L949.891 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M965.006 1533.1 L983.363 1533.1 L983.363 1537.04 L969.289 1537.04 L969.289 1545.51 Q970.307 1545.16 971.326 1545 Q972.344 1544.81 973.363 1544.81 Q979.15 1544.81 982.529 1547.98 Q985.909 1551.16 985.909 1556.57 Q985.909 1562.15 982.437 1565.25 Q978.964 1568.33 972.645 1568.33 Q970.469 1568.33 968.201 1567.96 Q965.955 1567.59 963.548 1566.85 L963.548 1562.15 Q965.631 1563.28 967.853 1563.84 Q970.076 1564.4 972.552 1564.4 Q976.557 1564.4 978.895 1562.29 Q981.233 1560.18 981.233 1556.57 Q981.233 1552.96 978.895 1550.85 Q976.557 1548.75 972.552 1548.75 Q970.678 1548.75 968.803 1549.16 Q966.951 1549.58 965.006 1550.46 L965.006 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1205.13 1536.18 Q1201.52 1536.18 1199.69 1539.74 Q1197.89 1543.28 1197.89 1550.41 Q1197.89 1557.52 1199.69 1561.09 Q1201.52 1564.63 1205.13 1564.63 Q1208.77 1564.63 1210.57 1561.09 Q1212.4 1557.52 1212.4 1550.41 Q1212.4 1543.28 1210.57 1539.74 Q1208.77 1536.18 1205.13 1536.18 M1205.13 1532.47 Q1210.94 1532.47 1214 1537.08 Q1217.08 1541.66 1217.08 1550.41 Q1217.08 1559.14 1214 1563.75 Q1210.94 1568.33 1205.13 1568.33 Q1199.32 1568.33 1196.24 1563.75 Q1193.19 1559.14 1193.19 1550.41 Q1193.19 1541.66 1196.24 1537.08 Q1199.32 1532.47 1205.13 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1225.29 1561.78 L1230.18 1561.78 L1230.18 1567.66 L1225.29 1567.66 L1225.29 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1250.36 1536.18 Q1246.75 1536.18 1244.92 1539.74 Q1243.12 1543.28 1243.12 1550.41 Q1243.12 1557.52 1244.92 1561.09 Q1246.75 1564.63 1250.36 1564.63 Q1254 1564.63 1255.8 1561.09 Q1257.63 1557.52 1257.63 1550.41 Q1257.63 1543.28 1255.8 1539.74 Q1254 1536.18 1250.36 1536.18 M1250.36 1532.47 Q1256.17 1532.47 1259.23 1537.08 Q1262.31 1541.66 1262.31 1550.41 Q1262.31 1559.14 1259.23 1563.75 Q1256.17 1568.33 1250.36 1568.33 Q1244.55 1568.33 1241.47 1563.75 Q1238.42 1559.14 1238.42 1550.41 Q1238.42 1541.66 1241.47 1537.08 Q1244.55 1532.47 1250.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1494.3 1563.72 L1510.62 1563.72 L1510.62 1567.66 L1488.67 1567.66 L1488.67 1563.72 Q1491.33 1560.97 1495.92 1556.34 Q1500.52 1551.69 1501.71 1550.35 Q1503.95 1547.82 1504.83 1546.09 Q1505.73 1544.33 1505.73 1542.64 Q1505.73 1539.88 1503.79 1538.15 Q1501.87 1536.41 1498.77 1536.41 Q1496.57 1536.41 1494.11 1537.17 Q1491.68 1537.94 1488.9 1539.49 L1488.9 1534.77 Q1491.73 1533.63 1494.18 1533.05 Q1496.64 1532.47 1498.67 1532.47 Q1504.04 1532.47 1507.24 1535.16 Q1510.43 1537.85 1510.43 1542.34 Q1510.43 1544.47 1509.62 1546.39 Q1508.83 1548.28 1506.73 1550.88 Q1506.15 1551.55 1503.05 1554.77 Q1499.95 1557.96 1494.3 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1520.43 1561.78 L1525.32 1561.78 L1525.32 1567.66 L1520.43 1567.66 L1520.43 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1535.55 1533.1 L1553.9 1533.1 L1553.9 1537.04 L1539.83 1537.04 L1539.83 1545.51 Q1540.85 1545.16 1541.87 1545 Q1542.89 1544.81 1543.9 1544.81 Q1549.69 1544.81 1553.07 1547.98 Q1556.45 1551.16 1556.45 1556.57 Q1556.45 1562.15 1552.98 1565.25 Q1549.51 1568.33 1543.19 1568.33 Q1541.01 1568.33 1538.74 1567.96 Q1536.5 1567.59 1534.09 1566.85 L1534.09 1562.15 Q1536.17 1563.28 1538.39 1563.84 Q1540.62 1564.4 1543.09 1564.4 Q1547.1 1564.4 1549.44 1562.29 Q1551.77 1560.18 1551.77 1556.57 Q1551.77 1552.96 1549.44 1550.85 Q1547.1 1548.75 1543.09 1548.75 Q1541.22 1548.75 1539.34 1549.16 Q1537.49 1549.58 1535.55 1550.46 L1535.55 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1784.54 1533.1 L1802.9 1533.1 L1802.9 1537.04 L1788.82 1537.04 L1788.82 1545.51 Q1789.84 1545.16 1790.86 1545 Q1791.88 1544.81 1792.9 1544.81 Q1798.68 1544.81 1802.06 1547.98 Q1805.44 1551.16 1805.44 1556.57 Q1805.44 1562.15 1801.97 1565.25 Q1798.5 1568.33 1792.18 1568.33 Q1790 1568.33 1787.73 1567.96 Q1785.49 1567.59 1783.08 1566.85 L1783.08 1562.15 Q1785.16 1563.28 1787.39 1563.84 Q1789.61 1564.4 1792.09 1564.4 Q1796.09 1564.4 1798.43 1562.29 Q1800.77 1560.18 1800.77 1556.57 Q1800.77 1552.96 1798.43 1550.85 Q1796.09 1548.75 1792.09 1548.75 Q1790.21 1548.75 1788.34 1549.16 Q1786.48 1549.58 1784.54 1550.46 L1784.54 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1814.65 1561.78 L1819.54 1561.78 L1819.54 1567.66 L1814.65 1567.66 L1814.65 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1839.72 1536.18 Q1836.11 1536.18 1834.28 1539.74 Q1832.48 1543.28 1832.48 1550.41 Q1832.48 1557.52 1834.28 1561.09 Q1836.11 1564.63 1839.72 1564.63 Q1843.36 1564.63 1845.16 1561.09 Q1846.99 1557.52 1846.99 1550.41 Q1846.99 1543.28 1845.16 1539.74 Q1843.36 1536.18 1839.72 1536.18 M1839.72 1532.47 Q1845.53 1532.47 1848.59 1537.08 Q1851.67 1541.66 1851.67 1550.41 Q1851.67 1559.14 1848.59 1563.75 Q1845.53 1568.33 1839.72 1568.33 Q1833.91 1568.33 1830.84 1563.75 Q1827.78 1559.14 1827.78 1550.41 Q1827.78 1541.66 1830.84 1537.08 Q1833.91 1532.47 1839.72 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2078.51 1533.1 L2100.73 1533.1 L2100.73 1535.09 L2088.18 1567.66 L2083.3 1567.66 L2095.1 1537.04 L2078.51 1537.04 L2078.51 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2109.85 1561.78 L2114.73 1561.78 L2114.73 1567.66 L2109.85 1567.66 L2109.85 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2124.97 1533.1 L2143.32 1533.1 L2143.32 1537.04 L2129.25 1537.04 L2129.25 1545.51 Q2130.27 1545.16 2131.29 1545 Q2132.3 1544.81 2133.32 1544.81 Q2139.11 1544.81 2142.49 1547.98 Q2145.87 1551.16 2145.87 1556.57 Q2145.87 1562.15 2142.4 1565.25 Q2138.92 1568.33 2132.6 1568.33 Q2130.43 1568.33 2128.16 1567.96 Q2125.91 1567.59 2123.51 1566.85 L2123.51 1562.15 Q2125.59 1563.28 2127.81 1563.84 Q2130.04 1564.4 2132.51 1564.4 Q2136.52 1564.4 2138.85 1562.29 Q2141.19 1560.18 2141.19 1556.57 Q2141.19 1552.96 2138.85 1550.85 Q2136.52 1548.75 2132.51 1548.75 Q2130.64 1548.75 2128.76 1549.16 Q2126.91 1549.58 2124.97 1550.46 L2124.97 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1177.05 1608.94 L1164 1644.78 L1190.13 1644.78 L1177.05 1608.94 M1155.27 1650.12 L1173.42 1602.6 L1180.71 1602.6 L1198.82 1650.12 L1155.27 1650.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1215.91 1602.6 L1221.32 1602.6 L1204.77 1656.17 L1199.36 1656.17 L1215.91 1602.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1233.83 1644.71 L1256.27 1644.71 L1256.27 1650.12 L1226.09 1650.12 L1226.09 1644.71 Q1229.75 1640.93 1236.06 1634.56 Q1242.39 1628.16 1244.01 1626.32 Q1247.1 1622.85 1248.31 1620.46 Q1249.55 1618.04 1249.55 1615.72 Q1249.55 1611.93 1246.88 1609.54 Q1244.24 1607.16 1239.97 1607.16 Q1236.95 1607.16 1233.57 1608.21 Q1230.23 1609.26 1226.41 1611.39 L1226.41 1604.9 Q1230.29 1603.34 1233.67 1602.54 Q1237.04 1601.74 1239.84 1601.74 Q1247.23 1601.74 1251.62 1605.44 Q1256.01 1609.13 1256.01 1615.3 Q1256.01 1618.23 1254.9 1620.87 Q1253.82 1623.48 1250.92 1627.05 Q1250.12 1627.97 1245.86 1632.4 Q1241.59 1636.79 1233.83 1644.71 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1265.15 1614.48 L1299.3 1614.48 L1299.3 1620.33 L1294.81 1620.33 L1294.81 1642.23 Q1294.81 1644.52 1295.57 1645.54 Q1296.37 1646.53 1298.12 1646.53 Q1298.6 1646.53 1299.3 1646.46 Q1300 1646.37 1300.22 1646.34 L1300.22 1650.57 Q1299.11 1650.98 1297.93 1651.17 Q1296.75 1651.37 1295.57 1651.37 Q1291.76 1651.37 1290.29 1649.3 Q1288.83 1647.2 1288.83 1641.59 L1288.83 1620.33 L1275.68 1620.33 L1275.68 1650.12 L1269.7 1650.12 L1269.7 1620.33 L1265.15 1620.33 L1265.15 1614.48 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1255.8 2352.76,1255.8 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,998.861 2352.76,998.861 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,741.918 2352.76,741.918 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,484.975 2352.76,484.975 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,228.032 2352.76,228.032 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1255.8 121.638,1255.8 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,998.861 121.638,998.861 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,741.918 121.638,741.918 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,484.975 121.638,484.975 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,228.032 121.638,228.032 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M-55.2962 1256.26 L-25.6205 1256.26 L-25.6205 1260.19 L-55.2962 1260.19 L-55.2962 1256.26 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-11.5002 1269.15 L4.81919 1269.15 L4.81919 1273.08 L-17.1251 1273.08 L-17.1251 1269.15 Q-14.4631 1266.39 -9.8798 1261.76 Q-5.27335 1257.11 -4.0928 1255.77 Q-1.84744 1253.25 -0.967813 1251.51 Q-0.0650401 1249.75 -0.0650401 1248.06 Q-0.0650401 1245.31 -2.00947 1243.57 Q-3.93076 1241.83 -7.0326 1241.83 Q-9.23166 1241.83 -11.6853 1242.6 Q-14.1159 1243.36 -16.8937 1244.91 L-16.8937 1240.19 Q-14.0696 1239.06 -11.6159 1238.48 Q-9.16221 1237.9 -7.12519 1237.9 Q-1.75485 1237.9 1.43958 1240.58 Q4.63401 1243.27 4.63401 1247.76 Q4.63401 1249.89 3.82383 1251.81 Q3.0368 1253.71 0.930325 1256.3 Q0.351624 1256.97 -2.75021 1260.19 Q-5.85205 1263.39 -11.5002 1269.15 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M14.6803 1238.52 L33.0366 1238.52 L33.0366 1242.46 L18.9626 1242.46 L18.9626 1250.93 Q19.9811 1250.58 20.9997 1250.42 Q22.0182 1250.24 23.0367 1250.24 Q28.8237 1250.24 32.2033 1253.41 Q35.5829 1256.58 35.5829 1262 Q35.5829 1267.57 32.1107 1270.68 Q28.6385 1273.76 22.3191 1273.76 Q20.1432 1273.76 17.8747 1273.38 Q15.6293 1273.01 13.2219 1272.27 L13.2219 1267.57 Q15.3052 1268.71 17.5275 1269.26 Q19.7497 1269.82 22.2265 1269.82 Q26.2311 1269.82 28.5691 1267.71 Q30.907 1265.61 30.907 1262 Q30.907 1258.39 28.5691 1256.28 Q26.2311 1254.17 22.2265 1254.17 Q20.3515 1254.17 18.4765 1254.59 Q16.6247 1255.01 14.6803 1255.89 L14.6803 1238.52 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M54.7958 1241.6 Q51.1847 1241.6 49.356 1245.17 Q47.5504 1248.71 47.5504 1255.84 Q47.5504 1262.95 49.356 1266.51 Q51.1847 1270.05 54.7958 1270.05 Q58.43 1270.05 60.2356 1266.51 Q62.0643 1262.95 62.0643 1255.84 Q62.0643 1248.71 60.2356 1245.17 Q58.43 1241.6 54.7958 1241.6 M54.7958 1237.9 Q60.6059 1237.9 63.6615 1242.51 Q66.7402 1247.09 66.7402 1255.84 Q66.7402 1264.57 63.6615 1269.17 Q60.6059 1273.76 54.7958 1273.76 Q48.9856 1273.76 45.9069 1269.17 Q42.8514 1264.57 42.8514 1255.84 Q42.8514 1247.09 45.9069 1242.51 Q48.9856 1237.9 54.7958 1237.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-55.2962 999.312 L-25.6205 999.312 L-25.6205 1003.25 L-55.2962 1003.25 L-55.2962 999.312 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-11.5002 1012.21 L4.81919 1012.21 L4.81919 1016.14 L-17.1251 1016.14 L-17.1251 1012.21 Q-14.4631 1009.45 -9.8798 1004.82 Q-5.27335 1000.17 -4.0928 998.826 Q-1.84744 996.303 -0.967813 994.567 Q-0.0650401 992.808 -0.0650401 991.118 Q-0.0650401 988.363 -2.00947 986.627 Q-3.93076 984.891 -7.0326 984.891 Q-9.23166 984.891 -11.6853 985.655 Q-14.1159 986.419 -16.8937 987.97 L-16.8937 983.248 Q-14.0696 982.113 -11.6159 981.535 Q-9.16221 980.956 -7.12519 980.956 Q-1.75485 980.956 1.43958 983.641 Q4.63401 986.326 4.63401 990.817 Q4.63401 992.947 3.82383 994.868 Q3.0368 996.766 0.930325 999.359 Q0.351624 1000.03 -2.75021 1003.25 Q-5.85205 1006.44 -11.5002 1012.21 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M24.6339 984.66 Q21.0228 984.66 19.1941 988.225 Q17.3886 991.766 17.3886 998.896 Q17.3886 1006 19.1941 1009.57 Q21.0228 1013.11 24.6339 1013.11 Q28.2681 1013.11 30.0737 1009.57 Q31.9024 1006 31.9024 998.896 Q31.9024 991.766 30.0737 988.225 Q28.2681 984.66 24.6339 984.66 M24.6339 980.956 Q30.4441 980.956 33.4996 985.563 Q36.5783 990.146 36.5783 998.896 Q36.5783 1007.62 33.4996 1012.23 Q30.4441 1016.81 24.6339 1016.81 Q18.8237 1016.81 15.7451 1012.23 Q12.6895 1007.62 12.6895 998.896 Q12.6895 990.146 15.7451 985.563 Q18.8237 980.956 24.6339 980.956 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M54.7958 984.66 Q51.1847 984.66 49.356 988.225 Q47.5504 991.766 47.5504 998.896 Q47.5504 1006 49.356 1009.57 Q51.1847 1013.11 54.7958 1013.11 Q58.43 1013.11 60.2356 1009.57 Q62.0643 1006 62.0643 998.896 Q62.0643 991.766 60.2356 988.225 Q58.43 984.66 54.7958 984.66 M54.7958 980.956 Q60.6059 980.956 63.6615 985.563 Q66.7402 990.146 66.7402 998.896 Q66.7402 1007.62 63.6615 1012.23 Q60.6059 1016.81 54.7958 1016.81 Q48.9856 1016.81 45.9069 1012.23 Q42.8514 1007.62 42.8514 998.896 Q42.8514 990.146 45.9069 985.563 Q48.9856 980.956 54.7958 980.956 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-55.2962 742.369 L-25.6205 742.369 L-25.6205 746.305 L-55.2962 746.305 L-55.2962 742.369 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-14.7177 755.263 L-7.07889 755.263 L-7.07889 728.897 L-15.389 730.564 L-15.389 726.305 L-7.12519 724.638 L-2.44929 724.638 L-2.44929 755.263 L5.18956 755.263 L5.18956 759.198 L-14.7177 759.198 L-14.7177 755.263 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M14.6803 724.638 L33.0366 724.638 L33.0366 728.573 L18.9626 728.573 L18.9626 737.045 Q19.9811 736.698 20.9997 736.536 Q22.0182 736.351 23.0367 736.351 Q28.8237 736.351 32.2033 739.522 Q35.5829 742.694 35.5829 748.11 Q35.5829 753.689 32.1107 756.791 Q28.6385 759.869 22.3191 759.869 Q20.1432 759.869 17.8747 759.499 Q15.6293 759.129 13.2219 758.388 L13.2219 753.689 Q15.3052 754.823 17.5275 755.379 Q19.7497 755.934 22.2265 755.934 Q26.2311 755.934 28.5691 753.828 Q30.907 751.721 30.907 748.11 Q30.907 744.499 28.5691 742.393 Q26.2311 740.286 22.2265 740.286 Q20.3515 740.286 18.4765 740.703 Q16.6247 741.119 14.6803 741.999 L14.6803 724.638 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M54.7958 727.717 Q51.1847 727.717 49.356 731.282 Q47.5504 734.823 47.5504 741.953 Q47.5504 749.059 49.356 752.624 Q51.1847 756.166 54.7958 756.166 Q58.43 756.166 60.2356 752.624 Q62.0643 749.059 62.0643 741.953 Q62.0643 734.823 60.2356 731.282 Q58.43 727.717 54.7958 727.717 M54.7958 724.013 Q60.6059 724.013 63.6615 728.62 Q66.7402 733.203 66.7402 741.953 Q66.7402 750.68 63.6615 755.286 Q60.6059 759.869 54.7958 759.869 Q48.9856 759.869 45.9069 755.286 Q42.8514 750.68 42.8514 741.953 Q42.8514 733.203 45.9069 728.62 Q48.9856 724.013 54.7958 724.013 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-55.2962 485.426 L-25.6205 485.426 L-25.6205 489.362 L-55.2962 489.362 L-55.2962 485.426 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-14.7177 498.32 L-7.07889 498.32 L-7.07889 471.954 L-15.389 473.621 L-15.389 469.362 L-7.12519 467.695 L-2.44929 467.695 L-2.44929 498.32 L5.18956 498.32 L5.18956 502.255 L-14.7177 502.255 L-14.7177 498.32 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M24.6339 470.774 Q21.0228 470.774 19.1941 474.339 Q17.3886 477.88 17.3886 485.01 Q17.3886 492.116 19.1941 495.681 Q21.0228 499.223 24.6339 499.223 Q28.2681 499.223 30.0737 495.681 Q31.9024 492.116 31.9024 485.01 Q31.9024 477.88 30.0737 474.339 Q28.2681 470.774 24.6339 470.774 M24.6339 467.07 Q30.4441 467.07 33.4996 471.676 Q36.5783 476.26 36.5783 485.01 Q36.5783 493.737 33.4996 498.343 Q30.4441 502.926 24.6339 502.926 Q18.8237 502.926 15.7451 498.343 Q12.6895 493.737 12.6895 485.01 Q12.6895 476.26 15.7451 471.676 Q18.8237 467.07 24.6339 467.07 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M54.7958 470.774 Q51.1847 470.774 49.356 474.339 Q47.5504 477.88 47.5504 485.01 Q47.5504 492.116 49.356 495.681 Q51.1847 499.223 54.7958 499.223 Q58.43 499.223 60.2356 495.681 Q62.0643 492.116 62.0643 485.01 Q62.0643 477.88 60.2356 474.339 Q58.43 470.774 54.7958 470.774 M54.7958 467.07 Q60.6059 467.07 63.6615 471.676 Q66.7402 476.26 66.7402 485.01 Q66.7402 493.737 63.6615 498.343 Q60.6059 502.926 54.7958 502.926 Q48.9856 502.926 45.9069 498.343 Q42.8514 493.737 42.8514 485.01 Q42.8514 476.26 45.9069 471.676 Q48.9856 467.07 54.7958 467.07 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-25.1344 228.483 L4.54142 228.483 L4.54142 232.419 L-25.1344 232.419 L-25.1344 228.483 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M14.6803 210.752 L33.0366 210.752 L33.0366 214.687 L18.9626 214.687 L18.9626 223.159 Q19.9811 222.812 20.9997 222.65 Q22.0182 222.465 23.0367 222.465 Q28.8237 222.465 32.2033 225.636 Q35.5829 228.807 35.5829 234.224 Q35.5829 239.803 32.1107 242.905 Q28.6385 245.983 22.3191 245.983 Q20.1432 245.983 17.8747 245.613 Q15.6293 245.243 13.2219 244.502 L13.2219 239.803 Q15.3052 240.937 17.5275 241.493 Q19.7497 242.048 22.2265 242.048 Q26.2311 242.048 28.5691 239.942 Q30.907 237.835 30.907 234.224 Q30.907 230.613 28.5691 228.507 Q26.2311 226.4 22.2265 226.4 Q20.3515 226.4 18.4765 226.817 Q16.6247 227.233 14.6803 228.113 L14.6803 210.752 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M54.7958 213.831 Q51.1847 213.831 49.356 217.395 Q47.5504 220.937 47.5504 228.067 Q47.5504 235.173 49.356 238.738 Q51.1847 242.28 54.7958 242.28 Q58.43 242.28 60.2356 238.738 Q62.0643 235.173 62.0643 228.067 Q62.0643 220.937 60.2356 217.395 Q58.43 213.831 54.7958 213.831 M54.7958 210.127 Q60.6059 210.127 63.6615 214.733 Q66.7402 219.317 66.7402 228.067 Q66.7402 236.794 63.6615 241.4 Q60.6059 245.983 54.7958 245.983 Q48.9856 245.983 45.9069 241.4 Q42.8514 236.794 42.8514 228.067 Q42.8514 219.317 45.9069 214.733 Q48.9856 210.127 54.7958 210.127 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-153.072 886.188 L-153.072 856.142 L-147.661 856.142 L-147.661 879.758 L-133.593 879.758 L-133.593 857.128 L-128.182 857.128 L-128.182 879.758 L-110.963 879.758 L-110.963 855.569 L-105.552 855.569 L-105.552 886.188 L-153.072 886.188 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-127.068 815.624 L-105.552 815.624 L-105.552 821.48 L-126.877 821.48 Q-131.938 821.48 -134.453 823.454 Q-136.967 825.427 -136.967 829.374 Q-136.967 834.116 -133.943 836.853 Q-130.92 839.591 -125.7 839.591 L-105.552 839.591 L-105.552 845.479 L-141.2 845.479 L-141.2 839.591 L-135.662 839.591 Q-138.877 837.49 -140.468 834.657 Q-142.06 831.793 -142.06 828.069 Q-142.06 821.926 -138.24 818.775 Q-134.453 815.624 -127.068 815.624 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-124.84 773.451 L-121.976 773.451 L-121.976 800.378 Q-115.928 799.996 -112.745 796.75 Q-109.594 793.471 -109.594 787.647 Q-109.594 784.273 -110.422 781.122 Q-111.25 777.939 -112.905 774.82 L-107.366 774.82 Q-106.03 777.971 -105.329 781.281 Q-104.629 784.591 -104.629 787.997 Q-104.629 796.527 -109.594 801.524 Q-114.56 806.489 -123.026 806.489 Q-131.779 806.489 -136.903 801.778 Q-142.06 797.036 -142.06 789.015 Q-142.06 781.822 -137.413 777.652 Q-132.797 773.451 -124.84 773.451 M-126.559 779.308 Q-131.365 779.371 -134.23 782.013 Q-137.094 784.623 -137.094 788.952 Q-137.094 793.853 -134.325 796.813 Q-131.556 799.741 -126.527 800.187 L-126.559 779.308 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-135.726 743.182 Q-136.299 744.169 -136.553 745.346 Q-136.84 746.492 -136.84 747.893 Q-136.84 752.858 -133.593 755.532 Q-130.378 758.173 -124.331 758.173 L-105.552 758.173 L-105.552 764.062 L-141.2 764.062 L-141.2 758.173 L-135.662 758.173 Q-138.909 756.327 -140.468 753.367 Q-142.06 750.407 -142.06 746.174 Q-142.06 745.569 -141.964 744.837 Q-141.9 744.105 -141.741 743.214 L-135.726 743.182 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-123.79 714.727 Q-130.156 714.727 -133.657 717.369 Q-137.158 719.979 -137.158 724.722 Q-137.158 729.432 -133.657 732.074 Q-130.156 734.684 -123.79 734.684 Q-117.456 734.684 -113.955 732.074 Q-110.454 729.432 -110.454 724.722 Q-110.454 719.979 -113.955 717.369 Q-117.456 714.727 -123.79 714.727 M-109.976 708.871 Q-100.873 708.871 -96.4493 712.913 Q-91.9933 716.955 -91.9933 725.294 Q-91.9933 728.382 -92.4707 731.119 Q-92.9163 733.856 -93.8712 736.434 L-99.5685 736.434 Q-98.168 733.856 -97.4996 731.342 Q-96.8312 728.827 -96.8312 726.218 Q-96.8312 720.457 -99.8549 717.592 Q-102.847 714.727 -108.926 714.727 L-111.822 714.727 Q-108.671 716.542 -107.112 719.374 Q-105.552 722.207 -105.552 726.154 Q-105.552 732.711 -110.549 736.721 Q-115.546 740.731 -123.79 740.731 Q-132.065 740.731 -137.062 736.721 Q-142.06 732.711 -142.06 726.154 Q-142.06 722.207 -140.5 719.374 Q-138.94 716.542 -135.789 714.727 L-141.2 714.727 L-141.2 708.871 L-109.976 708.871 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M-102.242 681.976 Q-95.8764 684.458 -93.9348 686.814 Q-91.9933 689.169 -91.9933 693.116 L-91.9933 697.795 L-96.8949 697.795 L-96.8949 694.357 Q-96.8949 691.938 -98.0407 690.601 Q-99.1865 689.265 -103.452 687.641 L-106.125 686.591 L-141.2 701.009 L-141.2 694.803 L-113.318 683.663 L-141.2 672.523 L-141.2 666.316 L-102.242 681.976 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"89.538\" x2=\"150.42\" y2=\"73.538\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"89.538\" x2=\"150.42\" y2=\"105.538\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"89.538\" x2=\"182.42\" y2=\"105.538\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"89.538\" x2=\"182.42\" y2=\"73.538\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"105.325\" x2=\"302.038\" y2=\"89.3246\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"105.325\" x2=\"302.038\" y2=\"121.325\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"105.325\" x2=\"334.038\" y2=\"121.325\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"105.325\" x2=\"334.038\" y2=\"89.3246\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"125.226\" x2=\"453.656\" y2=\"109.226\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"125.226\" x2=\"453.656\" y2=\"141.226\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"125.226\" x2=\"485.656\" y2=\"141.226\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"125.226\" x2=\"485.656\" y2=\"109.226\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"150.706\" x2=\"605.275\" y2=\"134.706\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"150.706\" x2=\"605.275\" y2=\"166.706\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"150.706\" x2=\"637.275\" y2=\"166.706\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"150.706\" x2=\"637.275\" y2=\"134.706\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"183.76\" x2=\"756.893\" y2=\"167.76\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"183.76\" x2=\"756.893\" y2=\"199.76\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"183.76\" x2=\"788.893\" y2=\"199.76\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"183.76\" x2=\"788.893\" y2=\"167.76\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"227.002\" x2=\"908.511\" y2=\"211.002\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"227.002\" x2=\"908.511\" y2=\"243.002\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"227.002\" x2=\"940.511\" y2=\"243.002\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"227.002\" x2=\"940.511\" y2=\"211.002\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"283.617\" x2=\"1060.13\" y2=\"267.617\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"283.617\" x2=\"1060.13\" y2=\"299.617\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"283.617\" x2=\"1092.13\" y2=\"299.617\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"283.617\" x2=\"1092.13\" y2=\"267.617\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"357.138\" x2=\"1211.75\" y2=\"341.138\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"357.138\" x2=\"1211.75\" y2=\"373.138\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"357.138\" x2=\"1243.75\" y2=\"373.138\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"357.138\" x2=\"1243.75\" y2=\"341.138\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"451.201\" x2=\"1363.37\" y2=\"435.201\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"451.201\" x2=\"1363.37\" y2=\"467.201\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"451.201\" x2=\"1395.37\" y2=\"467.201\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"451.201\" x2=\"1395.37\" y2=\"435.201\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"570.473\" x2=\"1514.98\" y2=\"554.473\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"570.473\" x2=\"1514.98\" y2=\"586.473\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"570.473\" x2=\"1546.98\" y2=\"586.473\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"570.473\" x2=\"1546.98\" y2=\"554.473\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"719.366\" x2=\"1666.6\" y2=\"703.366\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"719.366\" x2=\"1666.6\" y2=\"735.366\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"719.366\" x2=\"1698.6\" y2=\"735.366\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"719.366\" x2=\"1698.6\" y2=\"703.366\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"890.679\" x2=\"1818.22\" y2=\"874.679\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"890.679\" x2=\"1818.22\" y2=\"906.679\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"890.679\" x2=\"1850.22\" y2=\"906.679\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"890.679\" x2=\"1850.22\" y2=\"874.679\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.6\" x2=\"1969.84\" y2=\"1058.6\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.6\" x2=\"1969.84\" y2=\"1090.6\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.6\" x2=\"2001.84\" y2=\"1090.6\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.6\" x2=\"2001.84\" y2=\"1058.6\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1265.8\" x2=\"2121.46\" y2=\"1249.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1265.8\" x2=\"2121.46\" y2=\"1281.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1265.8\" x2=\"2153.46\" y2=\"1281.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1265.8\" x2=\"2153.46\" y2=\"1249.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1461.51\" x2=\"2273.08\" y2=\"1445.51\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1461.51\" x2=\"2273.08\" y2=\"1477.51\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1461.51\" x2=\"2305.08\" y2=\"1477.51\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1461.51\" x2=\"2305.08\" y2=\"1445.51\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,88.9046 166.42,88.5087 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"318.038,105.645 318.038,103.719 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"469.656,127.691 469.656,126.577 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"621.275,152.244 621.275,150.826 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"772.893,182.026 772.893,180.583 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"924.511,227.235 924.511,226.706 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1076.13,286.253 1076.13,282.209 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1227.75,355.863 1227.75,354.951 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1379.37,453.296 1379.37,451.035 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1530.98,570.456 1530.98,568.197 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1682.6,721.646 1682.6,718.857 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1834.22,892.063 1834.22,887.593 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1985.84,1075.66 1985.84,1073.21 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2137.46,1270.78 2137.46,1263.9 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1464 2289.08,1456.22 \"/>\n<line clip-path=\"url(#clip582)\" x1=\"182.42\" y1=\"88.9046\" x2=\"150.42\" y2=\"88.9046\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"182.42\" y1=\"88.5087\" x2=\"150.42\" y2=\"88.5087\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"334.038\" y1=\"105.645\" x2=\"302.038\" y2=\"105.645\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"334.038\" y1=\"103.719\" x2=\"302.038\" y2=\"103.719\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"485.656\" y1=\"127.691\" x2=\"453.656\" y2=\"127.691\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"485.656\" y1=\"126.577\" x2=\"453.656\" y2=\"126.577\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"637.275\" y1=\"152.244\" x2=\"605.275\" y2=\"152.244\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"637.275\" y1=\"150.826\" x2=\"605.275\" y2=\"150.826\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"788.893\" y1=\"182.026\" x2=\"756.893\" y2=\"182.026\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"788.893\" y1=\"180.583\" x2=\"756.893\" y2=\"180.583\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"940.511\" y1=\"227.235\" x2=\"908.511\" y2=\"227.235\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"940.511\" y1=\"226.706\" x2=\"908.511\" y2=\"226.706\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1092.13\" y1=\"286.253\" x2=\"1060.13\" y2=\"286.253\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1092.13\" y1=\"282.209\" x2=\"1060.13\" y2=\"282.209\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1243.75\" y1=\"355.863\" x2=\"1211.75\" y2=\"355.863\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1243.75\" y1=\"354.951\" x2=\"1211.75\" y2=\"354.951\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1395.37\" y1=\"453.296\" x2=\"1363.37\" y2=\"453.296\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1395.37\" y1=\"451.035\" x2=\"1363.37\" y2=\"451.035\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1546.98\" y1=\"570.456\" x2=\"1514.98\" y2=\"570.456\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1546.98\" y1=\"568.197\" x2=\"1514.98\" y2=\"568.197\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1698.6\" y1=\"721.646\" x2=\"1666.6\" y2=\"721.646\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1698.6\" y1=\"718.857\" x2=\"1666.6\" y2=\"718.857\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1850.22\" y1=\"892.063\" x2=\"1818.22\" y2=\"892.063\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1850.22\" y1=\"887.593\" x2=\"1818.22\" y2=\"887.593\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2001.84\" y1=\"1075.66\" x2=\"1969.84\" y2=\"1075.66\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2001.84\" y1=\"1073.21\" x2=\"1969.84\" y2=\"1073.21\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2153.46\" y1=\"1270.78\" x2=\"2121.46\" y2=\"1270.78\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2153.46\" y1=\"1263.9\" x2=\"2121.46\" y2=\"1263.9\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2305.08\" y1=\"1464\" x2=\"2273.08\" y2=\"1464\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2305.08\" y1=\"1456.22\" x2=\"2273.08\" y2=\"1456.22\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"88.7066\" x2=\"150.42\" y2=\"72.7066\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"88.7066\" x2=\"150.42\" y2=\"104.707\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"88.7066\" x2=\"182.42\" y2=\"104.707\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"166.42\" y1=\"88.7066\" x2=\"182.42\" y2=\"72.7066\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"104.682\" x2=\"302.038\" y2=\"88.6821\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"104.682\" x2=\"302.038\" y2=\"120.682\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"104.682\" x2=\"334.038\" y2=\"120.682\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"318.038\" y1=\"104.682\" x2=\"334.038\" y2=\"88.6821\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"127.134\" x2=\"453.656\" y2=\"111.134\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"127.134\" x2=\"453.656\" y2=\"143.134\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"127.134\" x2=\"485.656\" y2=\"143.134\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"469.656\" y1=\"127.134\" x2=\"485.656\" y2=\"111.134\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"151.535\" x2=\"605.275\" y2=\"135.535\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"151.535\" x2=\"605.275\" y2=\"167.535\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"151.535\" x2=\"637.275\" y2=\"167.535\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"621.275\" y1=\"151.535\" x2=\"637.275\" y2=\"135.535\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"181.305\" x2=\"756.893\" y2=\"165.305\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"181.305\" x2=\"756.893\" y2=\"197.305\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"181.305\" x2=\"788.893\" y2=\"197.305\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"772.893\" y1=\"181.305\" x2=\"788.893\" y2=\"165.305\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"226.97\" x2=\"908.511\" y2=\"210.97\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"226.97\" x2=\"908.511\" y2=\"242.97\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"226.97\" x2=\"940.511\" y2=\"242.97\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"924.511\" y1=\"226.97\" x2=\"940.511\" y2=\"210.97\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"284.231\" x2=\"1060.13\" y2=\"268.231\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"284.231\" x2=\"1060.13\" y2=\"300.231\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"284.231\" x2=\"1092.13\" y2=\"300.231\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1076.13\" y1=\"284.231\" x2=\"1092.13\" y2=\"268.231\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"355.407\" x2=\"1211.75\" y2=\"339.407\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"355.407\" x2=\"1211.75\" y2=\"371.407\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"355.407\" x2=\"1243.75\" y2=\"371.407\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1227.75\" y1=\"355.407\" x2=\"1243.75\" y2=\"339.407\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"452.165\" x2=\"1363.37\" y2=\"436.165\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"452.165\" x2=\"1363.37\" y2=\"468.165\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"452.165\" x2=\"1395.37\" y2=\"468.165\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1379.37\" y1=\"452.165\" x2=\"1395.37\" y2=\"436.165\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"569.326\" x2=\"1514.98\" y2=\"553.326\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"569.326\" x2=\"1514.98\" y2=\"585.326\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"569.326\" x2=\"1546.98\" y2=\"585.326\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1530.98\" y1=\"569.326\" x2=\"1546.98\" y2=\"553.326\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"720.251\" x2=\"1666.6\" y2=\"704.251\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"720.251\" x2=\"1666.6\" y2=\"736.251\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"720.251\" x2=\"1698.6\" y2=\"736.251\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1682.6\" y1=\"720.251\" x2=\"1698.6\" y2=\"704.251\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"889.828\" x2=\"1818.22\" y2=\"873.828\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"889.828\" x2=\"1818.22\" y2=\"905.828\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"889.828\" x2=\"1850.22\" y2=\"905.828\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1834.22\" y1=\"889.828\" x2=\"1850.22\" y2=\"873.828\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.43\" x2=\"1969.84\" y2=\"1058.43\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.43\" x2=\"1969.84\" y2=\"1090.43\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.43\" x2=\"2001.84\" y2=\"1090.43\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"1985.84\" y1=\"1074.43\" x2=\"2001.84\" y2=\"1058.43\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1267.34\" x2=\"2121.46\" y2=\"1251.34\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1267.34\" x2=\"2121.46\" y2=\"1283.34\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1267.34\" x2=\"2153.46\" y2=\"1283.34\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2137.46\" y1=\"1267.34\" x2=\"2153.46\" y2=\"1251.34\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1460.11\" x2=\"2273.08\" y2=\"1444.11\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1460.11\" x2=\"2273.08\" y2=\"1476.11\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1460.11\" x2=\"2305.08\" y2=\"1476.11\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip582)\" x1=\"2289.08\" y1=\"1460.11\" x2=\"2305.08\" y2=\"1444.11\" style=\"stroke:#e26f46; stroke-width:3.2; stroke-opacity:1\"/>\n<path clip-path=\"url(#clip580)\" d=\"M1946.67 251.365 L2277.76 251.365 L2277.76 95.8446 L1946.67 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1946.67,251.365 2277.76,251.365 2277.76,95.8446 1946.67,95.8446 1946.67,251.365 \"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"147.685\" x2=\"2021.07\" y2=\"122.085\" style=\"stroke:#009af9; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"147.685\" x2=\"2021.07\" y2=\"173.285\" style=\"stroke:#009af9; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"147.685\" x2=\"2072.27\" y2=\"173.285\" style=\"stroke:#009af9; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"147.685\" x2=\"2072.27\" y2=\"122.085\" style=\"stroke:#009af9; stroke-width:5.12; stroke-opacity:1\"/>\n<path clip-path=\"url(#clip580)\" d=\"M2146.67 130.405 L2168.52 130.405 L2168.52 134.34 L2151.34 134.34 L2151.34 144.571 L2167.8 144.571 L2167.8 148.506 L2151.34 148.506 L2151.34 161.029 L2168.94 161.029 L2168.94 164.965 L2146.67 164.965 L2146.67 130.405 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2181.3 134.247 L2181.3 161.122 L2186.95 161.122 Q2194.1 161.122 2197.41 157.881 Q2200.74 154.641 2200.74 147.65 Q2200.74 140.705 2197.41 137.488 Q2194.1 134.247 2186.95 134.247 L2181.3 134.247 M2176.62 130.405 L2186.23 130.405 Q2196.27 130.405 2200.97 134.594 Q2205.67 138.761 2205.67 147.65 Q2205.67 156.585 2200.95 160.775 Q2196.23 164.965 2186.23 164.965 L2176.62 164.965 L2176.62 130.405 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"199.525\" x2=\"2021.07\" y2=\"173.925\" style=\"stroke:#e26f46; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"199.525\" x2=\"2021.07\" y2=\"225.125\" style=\"stroke:#e26f46; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"199.525\" x2=\"2072.27\" y2=\"225.125\" style=\"stroke:#e26f46; stroke-width:5.12; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip580)\" x1=\"2046.67\" y1=\"199.525\" x2=\"2072.27\" y2=\"173.925\" style=\"stroke:#e26f46; stroke-width:5.12; stroke-opacity:1\"/>\n<path clip-path=\"url(#clip580)\" d=\"M2162.69 185.416 Q2157.59 185.416 2154.58 189.212 Q2151.6 193.008 2151.6 199.559 Q2151.6 206.087 2154.58 209.883 Q2157.59 213.68 2162.69 213.68 Q2167.78 213.68 2170.74 209.883 Q2173.73 206.087 2173.73 199.559 Q2173.73 193.008 2170.74 189.212 Q2167.78 185.416 2162.69 185.416 M2169.24 216.18 L2175.39 222.916 L2169.75 222.916 L2164.63 217.383 Q2163.87 217.43 2163.45 217.453 Q2163.06 217.476 2162.69 217.476 Q2155.39 217.476 2151.02 212.615 Q2146.67 207.731 2146.67 199.559 Q2146.67 191.365 2151.02 186.504 Q2155.39 181.62 2162.69 181.62 Q2169.95 181.62 2174.31 186.504 Q2178.66 191.365 2178.66 199.559 Q2178.66 205.578 2176.23 209.86 Q2173.82 214.143 2169.24 216.18 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2185.97 182.245 L2192.94 182.245 L2201.76 205.763 L2210.63 182.245 L2217.59 182.245 L2217.59 216.805 L2213.03 216.805 L2213.03 186.458 L2204.12 210.161 L2199.42 210.161 L2190.51 186.458 L2190.51 216.805 L2185.97 216.805 L2185.97 182.245 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2252.76 184.907 L2252.76 189.837 Q2250.39 187.638 2247.71 186.55 Q2245.05 185.462 2242.04 185.462 Q2236.11 185.462 2232.96 189.096 Q2229.82 192.708 2229.82 199.559 Q2229.82 206.388 2232.96 210.022 Q2236.11 213.633 2242.04 213.633 Q2245.05 213.633 2247.71 212.545 Q2250.39 211.457 2252.76 209.258 L2252.76 214.143 Q2250.3 215.809 2247.55 216.643 Q2244.82 217.476 2241.76 217.476 Q2233.91 217.476 2229.4 212.684 Q2224.88 207.869 2224.88 199.559 Q2224.88 191.226 2229.4 186.434 Q2233.91 181.62 2241.76 181.62 Q2244.86 181.62 2247.59 182.453 Q2250.35 183.263 2252.76 184.907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"We see that using the QMC, we have achieved the same results as for the ED with high accuracy.","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"As a final note, it is possible to also calculate other observables in the SSE formalism if they are products of the operators present in the Hamiltonian itself. For example, to calculate langle X rangle, one would count the number of times the off-diagonal operator sigma_x appears in each sample and take its average. For more examples and derivations, please see A. Sandvik (10.1088/0305-4470/25/13/017)*","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"To conclude this tutorial, we will leave with one final plot of the staggered magnetization which acts as an order parameter to observe the transition from the disordered to the mathbbZ_2 phase achieved before:","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"densities_QMC = []\norder_param_QMC = []\n\nfor ii in 1:Δ_step\n    h_ii = rydberg_h(atoms; Δ = Δ[ii], Ω)\n    h_ii_qmc = rydberg_qmc(h_ii)\n    ts_ii = BinaryThermalState(h_ii_qmc,M)\n    d_ii = Diagnostics()\n\n    [mc_step_beta!(rng, ts_ii, h_ii_qmc, β, d_ii, eq=true) for i in 1:EQ_MCS] #equilibration phase\n\n    order_param = zeros(MCS)\n\n    for i in 1:MCS # Monte Carlo Steps\n        mc_step_beta!(rng, ts_ii, h_ii_qmc, β, d_ii, eq=false) do lsize, ts_ii, h_ii_qmc\n            SSE_slice = sample(h_ii_qmc, ts_ii, 1) # occ = 0,1\n            spin = 2 .* SSE_slice .- 1 # spin = -1, 1\n            order_param[i] = abs(sum(spin[1:2:end]) - sum(spin[2:2:end]))/length(spin)\n        end\n    end\n\n    BD = LogBinner(order_param)\n    τ_energy = tau(BD)\n    ratio = 2 * τ_energy + 1\n    energy_binned = measurement(mean(BD), std_error(BD)*sqrt(ratio))\n    append!(order_param_QMC, measurement(mean(BD), std_error(BD)*sqrt(ratio)) )\nend\n\n\nfig_order = scatter(Δ/2π, value.(order_param_QMC); yerror=uncertainty.(order_param_QMC), label=\"\", marker=:x);\nxlabel!(\"Δ/2π (MHz)\")\nylabel!(\"Stag mag\")\nfig_order","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"343.308,1505.26 343.308,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"638.121,1505.26 638.121,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"932.935,1505.26 932.935,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1227.75,1505.26 1227.75,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1522.56,1505.26 1522.56,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1817.37,1505.26 1817.37,47.2441 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2112.19,1505.26 2112.19,47.2441 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"343.308,1505.26 343.308,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"638.121,1505.26 638.121,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"932.935,1505.26 932.935,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1227.75,1505.26 1227.75,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1522.56,1505.26 1522.56,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1817.37,1505.26 1817.37,1486.36 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2112.19,1505.26 2112.19,1486.36 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M290.334 1550.83 L320.009 1550.83 L320.009 1554.77 L290.334 1554.77 L290.334 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M328.921 1533.1 L351.143 1533.1 L351.143 1535.09 L338.597 1567.66 L333.713 1567.66 L345.519 1537.04 L328.921 1537.04 L328.921 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M360.264 1561.78 L365.148 1561.78 L365.148 1567.66 L360.264 1567.66 L360.264 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M375.379 1533.1 L393.736 1533.1 L393.736 1537.04 L379.662 1537.04 L379.662 1545.51 Q380.68 1545.16 381.699 1545 Q382.717 1544.81 383.736 1544.81 Q389.523 1544.81 392.903 1547.98 Q396.282 1551.16 396.282 1556.57 Q396.282 1562.15 392.81 1565.25 Q389.338 1568.33 383.018 1568.33 Q380.842 1568.33 378.574 1567.96 Q376.329 1567.59 373.921 1566.85 L373.921 1562.15 Q376.004 1563.28 378.227 1563.84 Q380.449 1564.4 382.926 1564.4 Q386.93 1564.4 389.268 1562.29 Q391.606 1560.18 391.606 1556.57 Q391.606 1552.96 389.268 1550.85 Q386.93 1548.75 382.926 1548.75 Q381.051 1548.75 379.176 1549.16 Q377.324 1549.58 375.379 1550.46 L375.379 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M584.649 1550.83 L614.325 1550.83 L614.325 1554.77 L584.649 1554.77 L584.649 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M624.464 1533.1 L642.82 1533.1 L642.82 1537.04 L628.746 1537.04 L628.746 1545.51 Q629.765 1545.16 630.783 1545 Q631.802 1544.81 632.82 1544.81 Q638.607 1544.81 641.987 1547.98 Q645.367 1551.16 645.367 1556.57 Q645.367 1562.15 641.894 1565.25 Q638.422 1568.33 632.103 1568.33 Q629.927 1568.33 627.658 1567.96 Q625.413 1567.59 623.006 1566.85 L623.006 1562.15 Q625.089 1563.28 627.311 1563.84 Q629.533 1564.4 632.01 1564.4 Q636.015 1564.4 638.353 1562.29 Q640.691 1560.18 640.691 1556.57 Q640.691 1552.96 638.353 1550.85 Q636.015 1548.75 632.01 1548.75 Q630.135 1548.75 628.26 1549.16 Q626.408 1549.58 624.464 1550.46 L624.464 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M654.58 1561.78 L659.464 1561.78 L659.464 1567.66 L654.58 1567.66 L654.58 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M679.649 1536.18 Q676.038 1536.18 674.209 1539.74 Q672.403 1543.28 672.403 1550.41 Q672.403 1557.52 674.209 1561.09 Q676.038 1564.63 679.649 1564.63 Q683.283 1564.63 685.089 1561.09 Q686.917 1557.52 686.917 1550.41 Q686.917 1543.28 685.089 1539.74 Q683.283 1536.18 679.649 1536.18 M679.649 1532.47 Q685.459 1532.47 688.515 1537.08 Q691.593 1541.66 691.593 1550.41 Q691.593 1559.14 688.515 1563.75 Q685.459 1568.33 679.649 1568.33 Q673.839 1568.33 670.76 1563.75 Q667.704 1559.14 667.704 1550.41 Q667.704 1541.66 670.76 1537.08 Q673.839 1532.47 679.649 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M879.96 1550.83 L909.636 1550.83 L909.636 1554.77 L879.96 1554.77 L879.96 1550.83 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M923.756 1563.72 L940.076 1563.72 L940.076 1567.66 L918.131 1567.66 L918.131 1563.72 Q920.794 1560.97 925.377 1556.34 Q929.983 1551.69 931.164 1550.35 Q933.409 1547.82 934.289 1546.09 Q935.192 1544.33 935.192 1542.64 Q935.192 1539.88 933.247 1538.15 Q931.326 1536.41 928.224 1536.41 Q926.025 1536.41 923.571 1537.17 Q921.141 1537.94 918.363 1539.49 L918.363 1534.77 Q921.187 1533.63 923.641 1533.05 Q926.094 1532.47 928.131 1532.47 Q933.502 1532.47 936.696 1535.16 Q939.891 1537.85 939.891 1542.34 Q939.891 1544.47 939.08 1546.39 Q938.293 1548.28 936.187 1550.88 Q935.608 1551.55 932.506 1554.77 Q929.405 1557.96 923.756 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M949.891 1561.78 L954.775 1561.78 L954.775 1567.66 L949.891 1567.66 L949.891 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M965.006 1533.1 L983.363 1533.1 L983.363 1537.04 L969.289 1537.04 L969.289 1545.51 Q970.307 1545.16 971.326 1545 Q972.344 1544.81 973.363 1544.81 Q979.15 1544.81 982.529 1547.98 Q985.909 1551.16 985.909 1556.57 Q985.909 1562.15 982.437 1565.25 Q978.964 1568.33 972.645 1568.33 Q970.469 1568.33 968.201 1567.96 Q965.955 1567.59 963.548 1566.85 L963.548 1562.15 Q965.631 1563.28 967.853 1563.84 Q970.076 1564.4 972.552 1564.4 Q976.557 1564.4 978.895 1562.29 Q981.233 1560.18 981.233 1556.57 Q981.233 1552.96 978.895 1550.85 Q976.557 1548.75 972.552 1548.75 Q970.678 1548.75 968.803 1549.16 Q966.951 1549.58 965.006 1550.46 L965.006 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1205.13 1536.18 Q1201.52 1536.18 1199.69 1539.74 Q1197.89 1543.28 1197.89 1550.41 Q1197.89 1557.52 1199.69 1561.09 Q1201.52 1564.63 1205.13 1564.63 Q1208.77 1564.63 1210.57 1561.09 Q1212.4 1557.52 1212.4 1550.41 Q1212.4 1543.28 1210.57 1539.74 Q1208.77 1536.18 1205.13 1536.18 M1205.13 1532.47 Q1210.94 1532.47 1214 1537.08 Q1217.08 1541.66 1217.08 1550.41 Q1217.08 1559.14 1214 1563.75 Q1210.94 1568.33 1205.13 1568.33 Q1199.32 1568.33 1196.24 1563.75 Q1193.19 1559.14 1193.19 1550.41 Q1193.19 1541.66 1196.24 1537.08 Q1199.32 1532.47 1205.13 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1225.29 1561.78 L1230.18 1561.78 L1230.18 1567.66 L1225.29 1567.66 L1225.29 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1250.36 1536.18 Q1246.75 1536.18 1244.92 1539.74 Q1243.12 1543.28 1243.12 1550.41 Q1243.12 1557.52 1244.92 1561.09 Q1246.75 1564.63 1250.36 1564.63 Q1254 1564.63 1255.8 1561.09 Q1257.63 1557.52 1257.63 1550.41 Q1257.63 1543.28 1255.8 1539.74 Q1254 1536.18 1250.36 1536.18 M1250.36 1532.47 Q1256.17 1532.47 1259.23 1537.08 Q1262.31 1541.66 1262.31 1550.41 Q1262.31 1559.14 1259.23 1563.75 Q1256.17 1568.33 1250.36 1568.33 Q1244.55 1568.33 1241.47 1563.75 Q1238.42 1559.14 1238.42 1550.41 Q1238.42 1541.66 1241.47 1537.08 Q1244.55 1532.47 1250.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1494.3 1563.72 L1510.62 1563.72 L1510.62 1567.66 L1488.67 1567.66 L1488.67 1563.72 Q1491.33 1560.97 1495.92 1556.34 Q1500.52 1551.69 1501.71 1550.35 Q1503.95 1547.82 1504.83 1546.09 Q1505.73 1544.33 1505.73 1542.64 Q1505.73 1539.88 1503.79 1538.15 Q1501.87 1536.41 1498.77 1536.41 Q1496.57 1536.41 1494.11 1537.17 Q1491.68 1537.94 1488.9 1539.49 L1488.9 1534.77 Q1491.73 1533.63 1494.18 1533.05 Q1496.64 1532.47 1498.67 1532.47 Q1504.04 1532.47 1507.24 1535.16 Q1510.43 1537.85 1510.43 1542.34 Q1510.43 1544.47 1509.62 1546.39 Q1508.83 1548.28 1506.73 1550.88 Q1506.15 1551.55 1503.05 1554.77 Q1499.95 1557.96 1494.3 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1520.43 1561.78 L1525.32 1561.78 L1525.32 1567.66 L1520.43 1567.66 L1520.43 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1535.55 1533.1 L1553.9 1533.1 L1553.9 1537.04 L1539.83 1537.04 L1539.83 1545.51 Q1540.85 1545.16 1541.87 1545 Q1542.89 1544.81 1543.9 1544.81 Q1549.69 1544.81 1553.07 1547.98 Q1556.45 1551.16 1556.45 1556.57 Q1556.45 1562.15 1552.98 1565.25 Q1549.51 1568.33 1543.19 1568.33 Q1541.01 1568.33 1538.74 1567.96 Q1536.5 1567.59 1534.09 1566.85 L1534.09 1562.15 Q1536.17 1563.28 1538.39 1563.84 Q1540.62 1564.4 1543.09 1564.4 Q1547.1 1564.4 1549.44 1562.29 Q1551.77 1560.18 1551.77 1556.57 Q1551.77 1552.96 1549.44 1550.85 Q1547.1 1548.75 1543.09 1548.75 Q1541.22 1548.75 1539.34 1549.16 Q1537.49 1549.58 1535.55 1550.46 L1535.55 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1784.54 1533.1 L1802.9 1533.1 L1802.9 1537.04 L1788.82 1537.04 L1788.82 1545.51 Q1789.84 1545.16 1790.86 1545 Q1791.88 1544.81 1792.9 1544.81 Q1798.68 1544.81 1802.06 1547.98 Q1805.44 1551.16 1805.44 1556.57 Q1805.44 1562.15 1801.97 1565.25 Q1798.5 1568.33 1792.18 1568.33 Q1790 1568.33 1787.73 1567.96 Q1785.49 1567.59 1783.08 1566.85 L1783.08 1562.15 Q1785.16 1563.28 1787.39 1563.84 Q1789.61 1564.4 1792.09 1564.4 Q1796.09 1564.4 1798.43 1562.29 Q1800.77 1560.18 1800.77 1556.57 Q1800.77 1552.96 1798.43 1550.85 Q1796.09 1548.75 1792.09 1548.75 Q1790.21 1548.75 1788.34 1549.16 Q1786.48 1549.58 1784.54 1550.46 L1784.54 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1814.65 1561.78 L1819.54 1561.78 L1819.54 1567.66 L1814.65 1567.66 L1814.65 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1839.72 1536.18 Q1836.11 1536.18 1834.28 1539.74 Q1832.48 1543.28 1832.48 1550.41 Q1832.48 1557.52 1834.28 1561.09 Q1836.11 1564.63 1839.72 1564.63 Q1843.36 1564.63 1845.16 1561.09 Q1846.99 1557.52 1846.99 1550.41 Q1846.99 1543.28 1845.16 1539.74 Q1843.36 1536.18 1839.72 1536.18 M1839.72 1532.47 Q1845.53 1532.47 1848.59 1537.08 Q1851.67 1541.66 1851.67 1550.41 Q1851.67 1559.14 1848.59 1563.75 Q1845.53 1568.33 1839.72 1568.33 Q1833.91 1568.33 1830.84 1563.75 Q1827.78 1559.14 1827.78 1550.41 Q1827.78 1541.66 1830.84 1537.08 Q1833.91 1532.47 1839.72 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2078.51 1533.1 L2100.73 1533.1 L2100.73 1535.09 L2088.18 1567.66 L2083.3 1567.66 L2095.1 1537.04 L2078.51 1537.04 L2078.51 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2109.85 1561.78 L2114.73 1561.78 L2114.73 1567.66 L2109.85 1567.66 L2109.85 1561.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2124.97 1533.1 L2143.32 1533.1 L2143.32 1537.04 L2129.25 1537.04 L2129.25 1545.51 Q2130.27 1545.16 2131.29 1545 Q2132.3 1544.81 2133.32 1544.81 Q2139.11 1544.81 2142.49 1547.98 Q2145.87 1551.16 2145.87 1556.57 Q2145.87 1562.15 2142.4 1565.25 Q2138.92 1568.33 2132.6 1568.33 Q2130.43 1568.33 2128.16 1567.96 Q2125.91 1567.59 2123.51 1566.85 L2123.51 1562.15 Q2125.59 1563.28 2127.81 1563.84 Q2130.04 1564.4 2132.51 1564.4 Q2136.52 1564.4 2138.85 1562.29 Q2141.19 1560.18 2141.19 1556.57 Q2141.19 1552.96 2138.85 1550.85 Q2136.52 1548.75 2132.51 1548.75 Q2130.64 1548.75 2128.76 1549.16 Q2126.91 1549.58 2124.97 1550.46 L2124.97 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1073.41 1608.94 L1060.36 1644.78 L1086.49 1644.78 L1073.41 1608.94 M1051.64 1650.12 L1069.78 1602.6 L1077.07 1602.6 L1095.18 1650.12 L1051.64 1650.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1112.27 1602.6 L1117.68 1602.6 L1101.13 1656.17 L1095.72 1656.17 L1112.27 1602.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1130.19 1644.71 L1152.63 1644.71 L1152.63 1650.12 L1122.46 1650.12 L1122.46 1644.71 Q1126.12 1640.93 1132.42 1634.56 Q1138.76 1628.16 1140.38 1626.32 Q1143.47 1622.85 1144.68 1620.46 Q1145.92 1618.04 1145.92 1615.72 Q1145.92 1611.93 1143.24 1609.54 Q1140.6 1607.16 1136.34 1607.16 Q1133.31 1607.16 1129.94 1608.21 Q1126.6 1609.26 1122.78 1611.39 L1122.78 1604.9 Q1126.66 1603.34 1130.03 1602.54 Q1133.41 1601.74 1136.21 1601.74 Q1143.59 1601.74 1147.99 1605.44 Q1152.38 1609.13 1152.38 1615.3 Q1152.38 1618.23 1151.26 1620.87 Q1150.18 1623.48 1147.29 1627.05 Q1146.49 1627.97 1142.22 1632.4 Q1137.96 1636.79 1130.19 1644.71 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1161.51 1614.48 L1195.66 1614.48 L1195.66 1620.33 L1191.18 1620.33 L1191.18 1642.23 Q1191.18 1644.52 1191.94 1645.54 Q1192.74 1646.53 1194.49 1646.53 Q1194.96 1646.53 1195.66 1646.46 Q1196.37 1646.37 1196.59 1646.34 L1196.59 1650.57 Q1195.47 1650.98 1194.3 1651.17 Q1193.12 1651.37 1191.94 1651.37 Q1188.12 1651.37 1186.66 1649.3 Q1185.19 1647.2 1185.19 1641.59 L1185.19 1620.33 L1172.05 1620.33 L1172.05 1650.12 L1166.06 1650.12 L1166.06 1620.33 L1161.51 1620.33 L1161.51 1614.48 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1239.33 1600.66 Q1235.07 1607.98 1233 1615.14 Q1230.93 1622.31 1230.93 1629.66 Q1230.93 1637.01 1233 1644.24 Q1235.1 1651.43 1239.33 1658.72 L1234.24 1658.72 Q1229.47 1651.24 1227.08 1644.01 Q1224.72 1636.79 1224.72 1629.66 Q1224.72 1622.56 1227.08 1615.37 Q1229.43 1608.17 1234.24 1600.66 L1239.33 1600.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1250.95 1602.6 L1260.53 1602.6 L1272.66 1634.94 L1284.85 1602.6 L1294.43 1602.6 L1294.43 1650.12 L1288.16 1650.12 L1288.16 1608.4 L1275.9 1640.99 L1269.44 1640.99 L1257.19 1608.4 L1257.19 1650.12 L1250.95 1650.12 L1250.95 1602.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1307.19 1602.6 L1313.62 1602.6 L1313.62 1622.08 L1336.98 1622.08 L1336.98 1602.6 L1343.41 1602.6 L1343.41 1650.12 L1336.98 1650.12 L1336.98 1627.49 L1313.62 1627.49 L1313.62 1650.12 L1307.19 1650.12 L1307.19 1602.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1353.41 1614.48 L1381.23 1614.48 L1381.23 1619.82 L1359.2 1645.45 L1381.23 1645.45 L1381.23 1650.12 L1352.61 1650.12 L1352.61 1644.78 L1374.64 1619.15 L1353.41 1619.15 L1353.41 1614.48 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1389.25 1600.66 L1394.34 1600.66 Q1399.11 1608.17 1401.47 1615.37 Q1403.86 1622.56 1403.86 1629.66 Q1403.86 1636.79 1401.47 1644.01 Q1399.11 1651.24 1394.34 1658.72 L1389.25 1658.72 Q1393.48 1651.43 1395.55 1644.24 Q1397.65 1637.01 1397.65 1629.66 Q1397.65 1622.31 1395.55 1615.14 Q1393.48 1607.98 1389.25 1600.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1365.56 2352.76,1365.56 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1020.64 2352.76,1020.64 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,675.72 2352.76,675.72 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,330.797 2352.76,330.797 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1365.56 121.638,1365.56 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1020.64 121.638,1020.64 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,675.72 121.638,675.72 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,330.797 121.638,330.797 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M11.1618 1351.36 Q7.55066 1351.36 5.72197 1354.93 Q3.91642 1358.47 3.91642 1365.6 Q3.91642 1372.71 5.72197 1376.27 Q7.55066 1379.81 11.1618 1379.81 Q14.796 1379.81 16.6015 1376.27 Q18.4302 1372.71 18.4302 1365.6 Q18.4302 1358.47 16.6015 1354.93 Q14.796 1351.36 11.1618 1351.36 M11.1618 1347.66 Q16.9719 1347.66 20.0274 1352.27 Q23.1061 1356.85 23.1061 1365.6 Q23.1061 1374.33 20.0274 1378.93 Q16.9719 1383.52 11.1618 1383.52 Q5.3516 1383.52 2.27291 1378.93 Q-0.782629 1374.33 -0.782629 1365.6 Q-0.782629 1356.85 2.27291 1352.27 Q5.3516 1347.66 11.1618 1347.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M31.3237 1376.97 L36.2079 1376.97 L36.2079 1382.84 L31.3237 1382.84 L31.3237 1376.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M50.4208 1378.91 L66.7402 1378.91 L66.7402 1382.84 L44.7958 1382.84 L44.7958 1378.91 Q47.4579 1376.15 52.0412 1371.53 Q56.6476 1366.87 57.8282 1365.53 Q60.0735 1363.01 60.9532 1361.27 Q61.8559 1359.51 61.8559 1357.82 Q61.8559 1355.07 59.9115 1353.33 Q57.9902 1351.59 54.8884 1351.59 Q52.6893 1351.59 50.2356 1352.36 Q47.8051 1353.12 45.0273 1354.67 L45.0273 1349.95 Q47.8514 1348.82 50.3051 1348.24 Q52.7588 1347.66 54.7958 1347.66 Q60.1661 1347.66 63.3605 1350.34 Q66.555 1353.03 66.555 1357.52 Q66.555 1359.65 65.7448 1361.57 Q64.9578 1363.47 62.8513 1366.06 Q62.2726 1366.73 59.1708 1369.95 Q56.0689 1373.15 50.4208 1378.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M9.07843 1006.44 Q5.46734 1006.44 3.63864 1010.01 Q1.8331 1013.55 1.8331 1020.68 Q1.8331 1027.78 3.63864 1031.35 Q5.46734 1034.89 9.07843 1034.89 Q12.7127 1034.89 14.5182 1031.35 Q16.3469 1027.78 16.3469 1020.68 Q16.3469 1013.55 14.5182 1010.01 Q12.7127 1006.44 9.07843 1006.44 M9.07843 1002.74 Q14.8886 1002.74 17.9441 1007.34 Q21.0228 1011.93 21.0228 1020.68 Q21.0228 1029.4 17.9441 1034.01 Q14.8886 1038.59 9.07843 1038.59 Q3.26828 1038.59 0.189588 1034.01 Q-2.86595 1029.4 -2.86595 1020.68 Q-2.86595 1011.93 0.189588 1007.34 Q3.26828 1002.74 9.07843 1002.74 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M29.2404 1032.04 L34.1246 1032.04 L34.1246 1037.92 L29.2404 1037.92 L29.2404 1032.04 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M57.1569 1007.44 L45.3514 1025.89 L57.1569 1025.89 L57.1569 1007.44 M55.93 1003.36 L61.8096 1003.36 L61.8096 1025.89 L66.7402 1025.89 L66.7402 1029.77 L61.8096 1029.77 L61.8096 1037.92 L57.1569 1037.92 L57.1569 1029.77 L41.5551 1029.77 L41.5551 1025.26 L55.93 1003.36 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M9.4025 661.519 Q5.79141 661.519 3.96272 665.083 Q2.15717 668.625 2.15717 675.755 Q2.15717 682.861 3.96272 686.426 Q5.79141 689.967 9.4025 689.967 Q13.0367 689.967 14.8423 686.426 Q16.671 682.861 16.671 675.755 Q16.671 668.625 14.8423 665.083 Q13.0367 661.519 9.4025 661.519 M9.4025 657.815 Q15.2127 657.815 18.2682 662.421 Q21.3469 667.005 21.3469 675.755 Q21.3469 684.481 18.2682 689.088 Q15.2127 693.671 9.4025 693.671 Q3.59235 693.671 0.51366 689.088 Q-2.54188 684.481 -2.54188 675.755 Q-2.54188 667.005 0.51366 662.421 Q3.59235 657.815 9.4025 657.815 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M29.5644 687.12 L34.4487 687.12 L34.4487 693 L29.5644 693 L29.5644 687.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M55.2124 673.856 Q52.0643 673.856 50.2125 676.009 Q48.3838 678.162 48.3838 681.912 Q48.3838 685.639 50.2125 687.815 Q52.0643 689.967 55.2124 689.967 Q58.3606 689.967 60.1893 687.815 Q62.0411 685.639 62.0411 681.912 Q62.0411 678.162 60.1893 676.009 Q58.3606 673.856 55.2124 673.856 M64.4948 659.204 L64.4948 663.463 Q62.7355 662.63 60.93 662.19 Q59.1476 661.75 57.3884 661.75 Q52.7588 661.75 50.3051 664.875 Q47.8745 668 47.5273 674.319 Q48.893 672.306 50.9532 671.241 Q53.0134 670.153 55.4902 670.153 Q60.6985 670.153 63.7078 673.324 Q66.7402 676.472 66.7402 681.912 Q66.7402 687.236 63.592 690.454 Q60.4439 693.671 55.2124 693.671 Q49.2171 693.671 46.0458 689.088 Q42.8745 684.481 42.8745 675.755 Q42.8745 667.56 46.7634 662.699 Q50.6523 657.815 57.2032 657.815 Q58.9624 657.815 60.7448 658.162 Q62.5504 658.509 64.4948 659.204 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M9.65713 316.596 Q6.04604 316.596 4.21734 320.161 Q2.4118 323.703 2.4118 330.832 Q2.4118 337.939 4.21734 341.503 Q6.04604 345.045 9.65713 345.045 Q13.2914 345.045 15.0969 341.503 Q16.9256 337.939 16.9256 330.832 Q16.9256 323.703 15.0969 320.161 Q13.2914 316.596 9.65713 316.596 M9.65713 312.892 Q15.4673 312.892 18.5228 317.499 Q21.6015 322.082 21.6015 330.832 Q21.6015 339.559 18.5228 344.165 Q15.4673 348.749 9.65713 348.749 Q3.84698 348.749 0.768289 344.165 Q-2.28725 339.559 -2.28725 330.832 Q-2.28725 322.082 0.768289 317.499 Q3.84698 312.892 9.65713 312.892 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M29.8191 342.198 L34.7033 342.198 L34.7033 348.077 L29.8191 348.077 L29.8191 342.198 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M54.8884 331.665 Q51.5551 331.665 49.6338 333.448 Q47.7356 335.23 47.7356 338.355 Q47.7356 341.48 49.6338 343.263 Q51.5551 345.045 54.8884 345.045 Q58.2217 345.045 60.143 343.263 Q62.0643 341.457 62.0643 338.355 Q62.0643 335.23 60.143 333.448 Q58.2448 331.665 54.8884 331.665 M50.2125 329.675 Q47.2032 328.934 45.5134 326.874 Q43.8468 324.814 43.8468 321.851 Q43.8468 317.707 46.7866 315.3 Q49.7495 312.892 54.8884 312.892 Q60.0504 312.892 62.9902 315.3 Q65.93 317.707 65.93 321.851 Q65.93 324.814 64.2402 326.874 Q62.5735 328.934 59.5874 329.675 Q62.967 330.462 64.842 332.753 Q66.7402 335.045 66.7402 338.355 Q66.7402 343.378 63.6615 346.063 Q60.6059 348.749 54.8884 348.749 Q49.1708 348.749 46.0921 346.063 Q43.0366 343.378 43.0366 338.355 Q43.0366 335.045 44.9347 332.753 Q46.8329 330.462 50.2125 329.675 M48.4995 322.29 Q48.4995 324.976 50.1662 326.48 Q51.856 327.985 54.8884 327.985 Q57.8976 327.985 59.5874 326.48 Q61.3004 324.976 61.3004 322.29 Q61.3004 319.605 59.5874 318.101 Q57.8976 316.596 54.8884 316.596 Q51.856 316.596 50.1662 318.101 Q48.4995 319.605 48.4995 322.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-99.0824 897.455 L-92.8121 897.455 Q-94.5627 901.115 -95.4221 904.362 Q-96.2814 907.608 -96.2814 910.632 Q-96.2814 915.884 -94.2444 918.748 Q-92.2074 921.581 -88.4516 921.581 Q-85.3006 921.581 -83.6773 919.703 Q-82.0859 917.793 -81.0992 912.51 L-80.3035 908.627 Q-78.9349 901.434 -75.4656 898.028 Q-72.0281 894.59 -66.2353 894.59 Q-59.3285 894.59 -55.7637 899.237 Q-52.1989 903.853 -52.1989 912.796 Q-52.1989 916.17 -52.9628 919.99 Q-53.7267 923.777 -55.2226 927.851 L-61.843 927.851 Q-59.6468 923.936 -58.5328 920.181 Q-57.4188 916.425 -57.4188 912.796 Q-57.4188 907.29 -59.5831 904.298 Q-61.7475 901.306 -65.7579 901.306 Q-69.259 901.306 -71.2324 903.471 Q-73.2058 905.603 -74.1924 910.505 L-74.9563 914.42 Q-76.3886 921.613 -79.4441 924.828 Q-82.4997 928.042 -87.9424 928.042 Q-94.2444 928.042 -97.8729 923.618 Q-101.501 919.162 -101.501 911.364 Q-101.501 908.022 -100.897 904.553 Q-100.292 901.083 -99.0824 897.455 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-98.8914 879.026 L-88.7699 879.026 L-88.7699 866.963 L-84.2184 866.963 L-84.2184 879.026 L-64.8667 879.026 Q-60.5062 879.026 -59.2649 877.849 Q-58.0235 876.639 -58.0235 872.979 L-58.0235 866.963 L-53.122 866.963 L-53.122 872.979 Q-53.122 879.758 -55.6364 882.336 Q-58.1827 884.915 -64.8667 884.915 L-84.2184 884.915 L-84.2184 889.211 L-88.7699 889.211 L-88.7699 884.915 L-98.8914 884.915 L-98.8914 879.026 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-71.0414 843.06 Q-71.0414 850.158 -69.4182 852.895 Q-67.7949 855.632 -63.88 855.632 Q-60.7608 855.632 -58.9147 853.595 Q-57.1005 851.526 -57.1005 847.993 Q-57.1005 843.124 -60.538 840.195 Q-64.0073 837.235 -69.7364 837.235 L-71.0414 837.235 L-71.0414 843.06 M-73.4604 831.379 L-53.122 831.379 L-53.122 837.235 L-58.5328 837.235 Q-55.2863 839.241 -53.7267 842.233 Q-52.1989 845.224 -52.1989 849.553 Q-52.1989 855.028 -55.2545 858.274 Q-58.3418 861.489 -63.4981 861.489 Q-69.5136 861.489 -72.5692 857.478 Q-75.6247 853.436 -75.6247 845.447 L-75.6247 837.235 L-76.1976 837.235 Q-80.2399 837.235 -82.436 839.909 Q-84.664 842.551 -84.664 847.357 Q-84.664 850.412 -83.932 853.309 Q-83.1999 856.205 -81.7358 858.879 L-87.1467 858.879 Q-88.388 855.664 -88.9927 852.64 Q-89.6293 849.617 -89.6293 846.752 Q-89.6293 839.018 -85.6189 835.198 Q-81.6085 831.379 -73.4604 831.379 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-71.3597 795.858 Q-77.7254 795.858 -81.2265 798.5 Q-84.7277 801.11 -84.7277 805.853 Q-84.7277 810.563 -81.2265 813.205 Q-77.7254 815.815 -71.3597 815.815 Q-65.0258 815.815 -61.5247 813.205 Q-58.0235 810.563 -58.0235 805.853 Q-58.0235 801.11 -61.5247 798.5 Q-65.0258 795.858 -71.3597 795.858 M-57.5461 790.002 Q-48.4432 790.002 -44.019 794.044 Q-39.563 798.086 -39.563 806.425 Q-39.563 809.513 -40.0404 812.25 Q-40.486 814.987 -41.4409 817.565 L-47.1382 817.565 Q-45.7377 814.987 -45.0693 812.473 Q-44.4009 809.958 -44.4009 807.348 Q-44.4009 801.587 -47.4246 798.723 Q-50.4165 795.858 -56.4958 795.858 L-59.3922 795.858 Q-56.2411 797.673 -54.6815 800.505 Q-53.122 803.338 -53.122 807.285 Q-53.122 813.841 -58.119 817.852 Q-63.1161 821.862 -71.3597 821.862 Q-79.6351 821.862 -84.6322 817.852 Q-89.6293 813.841 -89.6293 807.285 Q-89.6293 803.338 -88.0697 800.505 Q-86.5101 797.673 -83.3591 795.858 L-88.7699 795.858 L-88.7699 790.002 L-57.5461 790.002 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-81.9268 729.464 Q-85.8735 727.268 -87.7514 724.212 Q-89.6293 721.157 -89.6293 717.019 Q-89.6293 711.449 -85.7144 708.425 Q-81.8313 705.402 -74.638 705.402 L-53.122 705.402 L-53.122 711.29 L-74.4471 711.29 Q-79.5715 711.29 -82.0541 713.104 Q-84.5367 714.918 -84.5367 718.642 Q-84.5367 723.194 -81.513 725.836 Q-78.4893 728.477 -73.2694 728.477 L-53.122 728.477 L-53.122 734.366 L-74.4471 734.366 Q-79.6033 734.366 -82.0541 736.18 Q-84.5367 737.994 -84.5367 741.782 Q-84.5367 746.269 -81.4812 748.911 Q-78.4575 751.553 -73.2694 751.553 L-53.122 751.553 L-53.122 757.441 L-88.7699 757.441 L-88.7699 751.553 L-83.2317 751.553 Q-86.5101 749.548 -88.0697 746.747 Q-89.6293 743.946 -89.6293 740.095 Q-89.6293 736.212 -87.6559 733.506 Q-85.6825 730.769 -81.9268 729.464 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-71.0414 677.52 Q-71.0414 684.618 -69.4182 687.355 Q-67.7949 690.092 -63.88 690.092 Q-60.7608 690.092 -58.9147 688.055 Q-57.1005 685.986 -57.1005 682.453 Q-57.1005 677.584 -60.538 674.655 Q-64.0073 671.695 -69.7364 671.695 L-71.0414 671.695 L-71.0414 677.52 M-73.4604 665.839 L-53.122 665.839 L-53.122 671.695 L-58.5328 671.695 Q-55.2863 673.7 -53.7267 676.692 Q-52.1989 679.684 -52.1989 684.013 Q-52.1989 689.487 -55.2545 692.734 Q-58.3418 695.949 -63.4981 695.949 Q-69.5136 695.949 -72.5692 691.938 Q-75.6247 687.896 -75.6247 679.907 L-75.6247 671.695 L-76.1976 671.695 Q-80.2399 671.695 -82.436 674.369 Q-84.664 677.011 -84.664 681.817 Q-84.664 684.872 -83.932 687.769 Q-83.1999 690.665 -81.7358 693.339 L-87.1467 693.339 Q-88.388 690.124 -88.9927 687.1 Q-89.6293 684.077 -89.6293 681.212 Q-89.6293 673.478 -85.6189 669.658 Q-81.6085 665.839 -73.4604 665.839 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M-71.3597 630.318 Q-77.7254 630.318 -81.2265 632.96 Q-84.7277 635.57 -84.7277 640.312 Q-84.7277 645.023 -81.2265 647.665 Q-77.7254 650.275 -71.3597 650.275 Q-65.0258 650.275 -61.5247 647.665 Q-58.0235 645.023 -58.0235 640.312 Q-58.0235 635.57 -61.5247 632.96 Q-65.0258 630.318 -71.3597 630.318 M-57.5461 624.462 Q-48.4432 624.462 -44.019 628.504 Q-39.563 632.546 -39.563 640.885 Q-39.563 643.973 -40.0404 646.71 Q-40.486 649.447 -41.4409 652.025 L-47.1382 652.025 Q-45.7377 649.447 -45.0693 646.933 Q-44.4009 644.418 -44.4009 641.808 Q-44.4009 636.047 -47.4246 633.183 Q-50.4165 630.318 -56.4958 630.318 L-59.3922 630.318 Q-56.2411 632.132 -54.6815 634.965 Q-53.122 637.798 -53.122 641.745 Q-53.122 648.301 -58.119 652.312 Q-63.1161 656.322 -71.3597 656.322 Q-79.6351 656.322 -84.6322 652.312 Q-89.6293 648.301 -89.6293 641.745 Q-89.6293 637.798 -88.0697 634.965 Q-86.5101 632.132 -83.3591 630.318 L-88.7699 630.318 L-88.7699 624.462 L-57.5461 624.462 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1464 166.42,1463.28 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"318.038,1450.95 318.038,1450.09 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"469.656,1434.86 469.656,1433.67 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"621.275,1411.68 621.275,1409.92 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"772.893,1382.2 772.893,1380.7 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"924.511,1341.11 924.511,1338.52 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1076.13,1293.91 1076.13,1291.92 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1227.75,1223.99 1227.75,1221.43 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1379.37,1106.72 1379.37,1096.25 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1530.98,846.851 1530.98,810.903 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1682.6,519.632 1682.6,451.55 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1834.22,309.324 1834.22,270.608 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1985.84,191.455 1985.84,178.282 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2137.46,136.317 2137.46,121.665 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,96.8478 2289.08,88.5087 \"/>\n<line clip-path=\"url(#clip612)\" x1=\"182.42\" y1=\"1464\" x2=\"150.42\" y2=\"1464\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"182.42\" y1=\"1463.28\" x2=\"150.42\" y2=\"1463.28\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"334.038\" y1=\"1450.95\" x2=\"302.038\" y2=\"1450.95\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"334.038\" y1=\"1450.09\" x2=\"302.038\" y2=\"1450.09\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"485.656\" y1=\"1434.86\" x2=\"453.656\" y2=\"1434.86\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"485.656\" y1=\"1433.67\" x2=\"453.656\" y2=\"1433.67\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"637.275\" y1=\"1411.68\" x2=\"605.275\" y2=\"1411.68\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"637.275\" y1=\"1409.92\" x2=\"605.275\" y2=\"1409.92\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"788.893\" y1=\"1382.2\" x2=\"756.893\" y2=\"1382.2\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"788.893\" y1=\"1380.7\" x2=\"756.893\" y2=\"1380.7\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"940.511\" y1=\"1341.11\" x2=\"908.511\" y2=\"1341.11\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"940.511\" y1=\"1338.52\" x2=\"908.511\" y2=\"1338.52\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1092.13\" y1=\"1293.91\" x2=\"1060.13\" y2=\"1293.91\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1092.13\" y1=\"1291.92\" x2=\"1060.13\" y2=\"1291.92\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1243.75\" y1=\"1223.99\" x2=\"1211.75\" y2=\"1223.99\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1243.75\" y1=\"1221.43\" x2=\"1211.75\" y2=\"1221.43\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1395.37\" y1=\"1106.72\" x2=\"1363.37\" y2=\"1106.72\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1395.37\" y1=\"1096.25\" x2=\"1363.37\" y2=\"1096.25\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1546.98\" y1=\"846.851\" x2=\"1514.98\" y2=\"846.851\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1546.98\" y1=\"810.903\" x2=\"1514.98\" y2=\"810.903\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1698.6\" y1=\"519.632\" x2=\"1666.6\" y2=\"519.632\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1698.6\" y1=\"451.55\" x2=\"1666.6\" y2=\"451.55\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1850.22\" y1=\"309.324\" x2=\"1818.22\" y2=\"309.324\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1850.22\" y1=\"270.608\" x2=\"1818.22\" y2=\"270.608\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2001.84\" y1=\"191.455\" x2=\"1969.84\" y2=\"191.455\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2001.84\" y1=\"178.282\" x2=\"1969.84\" y2=\"178.282\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2153.46\" y1=\"136.317\" x2=\"2121.46\" y2=\"136.317\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2153.46\" y1=\"121.665\" x2=\"2121.46\" y2=\"121.665\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2305.08\" y1=\"96.8478\" x2=\"2273.08\" y2=\"96.8478\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2305.08\" y1=\"88.5087\" x2=\"2273.08\" y2=\"88.5087\" style=\"stroke:#000000; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"166.42\" y1=\"1463.64\" x2=\"150.42\" y2=\"1447.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"166.42\" y1=\"1463.64\" x2=\"150.42\" y2=\"1479.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"166.42\" y1=\"1463.64\" x2=\"182.42\" y2=\"1479.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"166.42\" y1=\"1463.64\" x2=\"182.42\" y2=\"1447.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"318.038\" y1=\"1450.52\" x2=\"302.038\" y2=\"1434.52\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"318.038\" y1=\"1450.52\" x2=\"302.038\" y2=\"1466.52\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"318.038\" y1=\"1450.52\" x2=\"334.038\" y2=\"1466.52\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"318.038\" y1=\"1450.52\" x2=\"334.038\" y2=\"1434.52\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"469.656\" y1=\"1434.26\" x2=\"453.656\" y2=\"1418.26\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"469.656\" y1=\"1434.26\" x2=\"453.656\" y2=\"1450.26\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"469.656\" y1=\"1434.26\" x2=\"485.656\" y2=\"1450.26\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"469.656\" y1=\"1434.26\" x2=\"485.656\" y2=\"1418.26\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"621.275\" y1=\"1410.8\" x2=\"605.275\" y2=\"1394.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"621.275\" y1=\"1410.8\" x2=\"605.275\" y2=\"1426.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"621.275\" y1=\"1410.8\" x2=\"637.275\" y2=\"1426.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"621.275\" y1=\"1410.8\" x2=\"637.275\" y2=\"1394.8\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"772.893\" y1=\"1381.45\" x2=\"756.893\" y2=\"1365.45\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"772.893\" y1=\"1381.45\" x2=\"756.893\" y2=\"1397.45\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"772.893\" y1=\"1381.45\" x2=\"788.893\" y2=\"1397.45\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"772.893\" y1=\"1381.45\" x2=\"788.893\" y2=\"1365.45\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"924.511\" y1=\"1339.81\" x2=\"908.511\" y2=\"1323.81\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"924.511\" y1=\"1339.81\" x2=\"908.511\" y2=\"1355.81\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"924.511\" y1=\"1339.81\" x2=\"940.511\" y2=\"1355.81\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"924.511\" y1=\"1339.81\" x2=\"940.511\" y2=\"1323.81\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1076.13\" y1=\"1292.92\" x2=\"1060.13\" y2=\"1276.92\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1076.13\" y1=\"1292.92\" x2=\"1060.13\" y2=\"1308.92\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1076.13\" y1=\"1292.92\" x2=\"1092.13\" y2=\"1308.92\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1076.13\" y1=\"1292.92\" x2=\"1092.13\" y2=\"1276.92\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1227.75\" y1=\"1222.71\" x2=\"1211.75\" y2=\"1206.71\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1227.75\" y1=\"1222.71\" x2=\"1211.75\" y2=\"1238.71\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1227.75\" y1=\"1222.71\" x2=\"1243.75\" y2=\"1238.71\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1227.75\" y1=\"1222.71\" x2=\"1243.75\" y2=\"1206.71\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1379.37\" y1=\"1101.48\" x2=\"1363.37\" y2=\"1085.48\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1379.37\" y1=\"1101.48\" x2=\"1363.37\" y2=\"1117.48\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1379.37\" y1=\"1101.48\" x2=\"1395.37\" y2=\"1117.48\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1379.37\" y1=\"1101.48\" x2=\"1395.37\" y2=\"1085.48\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1530.98\" y1=\"828.877\" x2=\"1514.98\" y2=\"812.877\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1530.98\" y1=\"828.877\" x2=\"1514.98\" y2=\"844.877\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1530.98\" y1=\"828.877\" x2=\"1546.98\" y2=\"844.877\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1530.98\" y1=\"828.877\" x2=\"1546.98\" y2=\"812.877\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1682.6\" y1=\"485.591\" x2=\"1666.6\" y2=\"469.591\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1682.6\" y1=\"485.591\" x2=\"1666.6\" y2=\"501.591\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1682.6\" y1=\"485.591\" x2=\"1698.6\" y2=\"501.591\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1682.6\" y1=\"485.591\" x2=\"1698.6\" y2=\"469.591\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1834.22\" y1=\"289.966\" x2=\"1818.22\" y2=\"273.966\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1834.22\" y1=\"289.966\" x2=\"1818.22\" y2=\"305.966\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1834.22\" y1=\"289.966\" x2=\"1850.22\" y2=\"305.966\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1834.22\" y1=\"289.966\" x2=\"1850.22\" y2=\"273.966\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1985.84\" y1=\"184.868\" x2=\"1969.84\" y2=\"168.868\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1985.84\" y1=\"184.868\" x2=\"1969.84\" y2=\"200.868\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1985.84\" y1=\"184.868\" x2=\"2001.84\" y2=\"200.868\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"1985.84\" y1=\"184.868\" x2=\"2001.84\" y2=\"168.868\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2137.46\" y1=\"128.991\" x2=\"2121.46\" y2=\"112.991\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2137.46\" y1=\"128.991\" x2=\"2121.46\" y2=\"144.991\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2137.46\" y1=\"128.991\" x2=\"2153.46\" y2=\"144.991\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2137.46\" y1=\"128.991\" x2=\"2153.46\" y2=\"112.991\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2289.08\" y1=\"92.6782\" x2=\"2273.08\" y2=\"76.6782\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2289.08\" y1=\"92.6782\" x2=\"2273.08\" y2=\"108.678\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2289.08\" y1=\"92.6782\" x2=\"2305.08\" y2=\"108.678\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip612)\" x1=\"2289.08\" y1=\"92.6782\" x2=\"2305.08\" y2=\"76.6782\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n</svg>\n","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"","category":"page"},{"location":"tutorials/7.QMC/main/","page":"Quantum Monte Carlo Method","title":"Quantum Monte Carlo Method","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lattices/#Lattices","page":"Lattices","title":"Lattices","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"We can use Bloqade to simulate the quantum evolution of information stored in neutral atoms. Present-day neutral-atom hardware permits the arrangement of atoms in a regular lattice structure and even in nearly arbitrary geometries in 1D, 2D, and 3D. This makes neutral atom platform a natural playground for quantum simulation of statistical models and quantum matters. With Bloqade, we support several built-in lattice structures and also allow the users to specify atom positions by inputting coordinates. Please refer to the Rydberg Blockade page for recommendations on how to set the lattice constants for different lattices.","category":"page"},{"location":"lattices/#Types-of-Lattices","page":"Lattices","title":"Types of Lattices","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"A crystal lattice is completely determined by a set of Bravais lattice vectors (in unit of μm) plus the locations of atoms within a unit cell. A Bravais lattice is an infinite array of discrete points generated by a set of discrete translation operations described by","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"mathbfR = n_1 mathbfa_1 + n_2 mathbfa_2 + ldots + n_d mathbfa_d","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"where d is the dimension of space, n_1 ldots n_d in Z are integers. The unit cell of a Bravais lattice is defined by specifying its lattice vectors (mathbfa_1 mathbfa_2 ldots mathbfa_d). To create a simple lattice, we first specify the locations of the atoms within a unit cell and then specify the lattice vectors of the Bravais lattice. For example, for a triangular lattice, we need just one site (atom) at the location (0.0, 0.0) in the unit cell and then lattice vectors (1.0, 0.0) and (0.5, 0.5*sqrt(3)):","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"using Bloqade\ntriangular = GeneralLattice([(1.0, 0.0), (0.5, 0.5*sqrt(3))], [(0.0, 0.0)])","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"For composite lattices, one should provide multiple sites as the second argument to specify their locations in a unit cell. For example, the honeycomb lattice can be defined by:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"honeycomb = GeneralLattice([(1.0, 0.0), (0.5, 0.5*sqrt(3))],\n    [(0.0, 0.0), (0.5, 0.5/sqrt(3))])","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"We provide a few shorthands for several useful lattices, including the ChainLattice, SquareLattice, HoneycombLattice, TriangularLattice, LiebLattice, and KagomeLattice shown below.  One can use lattice_vectors and lattice_sites to access the lattice vectors and site locations in a unit cell as described in the above section.","category":"page"},{"location":"lattices/#[ChainLattice](@ref)","page":"Lattices","title":"ChainLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"using Bloqade\nchain = ChainLattice()","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"# to make the plot look good in both light and dark backgrounds.\nBloqadeLattices.DEFAULT_BACKGROUND_COLOR[] = \"#FFFFFF\"\n\n# to show the lattice vectors (rescaled a bit to shrink the head).\nunitvectors(lattice::AbstractLattice{2}) = [((0.0, 0.0), v) for v in lattice_vectors(lattice)]\n\nBloqade.plot(generate_sites(chain, 10); vectors=[((0.0, 0.0), (0.9, 0.0))], bond_linewidth=0.015)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"note: Note\nYou can see the above visualization in one of the following editorsa VSCode editor,\na Jupyter notebook,\nor a Pluto notebook,but not in a Julia REPL which does not have a graphical display.","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"lattice_vectors(chain)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"lattice_sites(chain)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Once we have defined certain lattice shapes (which have fixed lattice vectors and site positions in the unit cell), we can generate the atom positions by  specifying the number of atoms and the scale size of the lattice.  This is done by using the function generate_sites , which will return a AtomList instance containing the coordinates of each atom, e.g.:  ","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"atoms = generate_sites(HoneycombLattice(), 3, 5; scale = 4.5)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"where scale defines the unit distance in the unit μm of the lattice, and 3, 5 specifies the repetitions of unit cells in each lattice vector direction. The default scale is 1 μm.","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Here are some examples of other lattices:","category":"page"},{"location":"lattices/#[SquareLattice](@ref)","page":"Lattices","title":"SquareLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"square = SquareLattice()\nBloqade.plot(generate_sites(square, 10, 10); vectors=unitvectors(square), bond_linewidth=0.015)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Note that the indices showing on the sites are consistent with the indices of the qubits for performing computation.  In other words, if we want to do measurement or apply operations on individual sites (qubits), we can refer to the numbering on the atoms for convenience.  For more details on how to generate Hamiltonians by using the lattice as an argument, please see the section Hamiltonians.","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"lattice_vectors(square)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"lattice_sites(square)","category":"page"},{"location":"lattices/#[HoneycombLattice](@ref)","page":"Lattices","title":"HoneycombLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"honeycomb = HoneycombLattice()\nBloqade.plot(generate_sites(honeycomb, 5, 5); vectors=unitvectors(honeycomb), bond_linewidth=0.015)","category":"page"},{"location":"lattices/#[TriangularLattice](@ref)","page":"Lattices","title":"TriangularLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"triangular = TriangularLattice()\nBloqade.plot(generate_sites(triangular, 8, 8); vectors=unitvectors(triangular), bond_linewidth=0.015)","category":"page"},{"location":"lattices/#[LiebLattice](@ref)","page":"Lattices","title":"LiebLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"lieb = LiebLattice()\nBloqade.plot(generate_sites(lieb, 5, 5); vectors=unitvectors(lieb), bond_linewidth=0.015)","category":"page"},{"location":"lattices/#[KagomeLattice](@ref)","page":"Lattices","title":"KagomeLattice","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"kagome = KagomeLattice()\nBloqade.plot(generate_sites(kagome, 5, 5); vectors=unitvectors(kagome), bond_linewidth=0.015)","category":"page"},{"location":"lattices/#Sort-Sites-and-Other-Operations-on-Lattices","page":"Lattices","title":"Sort Sites and Other Operations on Lattices","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"We also support different operations on the generated lattices. For instance,  one can apply some predefined filters, e.g. rescale_axes, clip_axes, offset_axes, to manipulate atom locations:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"atoms = generate_sites(HoneycombLattice(), 3, 5; scale = 4.5)\nrescale_axes(atoms, 0.8)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"where the above operation rescales the coordinates of the original sites by a factor of 0.8. ","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"The code below restricts the atoms sitting in the window (0.0, 5.0), (0.0, 6.0) and throw away those outside this area: ","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"clip_axes(atoms, (0.0, 5.0), (0.0, 6.0))","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Furthermore, we can shift the origin of the atoms by some vector (5.0, 5.0) simply by typing the code:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"offset_axes(atoms, 5.0, 5.0)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"To sort the atoms by their x-coordinates, one can convert these locations to a MaskedGrid representation of the atoms:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"atoms_in_grid = make_grid(atoms)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Then one can get the sorted atoms by typing:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"sorted_atoms = collect_atoms(atoms_in_grid)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Note that the sorting has changed the index numbering of the atoms. ","category":"page"},{"location":"lattices/#User-Defined-Arbitrary-Geometries","page":"Lattices","title":"User-Defined Arbitrary Geometries","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"One can also generate atoms located at arbitrary positions by directly inputting the coordinates of the atoms:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"atom_coordinate = AtomList([(0.0, 0.0), (0, 5), (0, 8), (5, 2), (6, 7), (9, 6)])","category":"page"},{"location":"lattices/#Query-Neighbors","page":"Lattices","title":"Query Neighbors","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"One can use make_kdtree to generate a k-d tree data type for the efficient querying of neighborhoods in a low-dimensional space.","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"tree = make_kdtree(sorted_atoms)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"The return value is a KDTree instance, which is defined in the package NearestNeigbors. One can use it to query the neighbors of an atom: e.g. one can find the 20 nearest neighbors of the 5-th site by typing:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"neighbors = grouped_nearest(tree, 5, 20)","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"The return value is a DistanceGroup instance, and the indices of the second nearest neighbors are:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"neighbors[2]","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"One can select and display these atoms with the correct labeling by typing:","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"Bloqade.plot(sorted_atoms[neighbors[2]]; texts=string.(neighbors[2]))","category":"page"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"It shows the correct second nearest neighbors of the site 5. One can check the docstring of Bloqade.plot to know more about how to customize lattice visualization.","category":"page"},{"location":"lattices/#References","page":"Lattices","title":"References","text":"","category":"section"},{"location":"lattices/","page":"Lattices","title":"Lattices","text":"AbstractLattice\nGeneralLattice\nSquareLattice\nRectangularLattice\nHoneycombLattice\nTriangularLattice\nChainLattice\nLiebLattice\nKagomeLattice\n\nlattice_vectors\nlattice_sites\nBloqadeLattices.dimension\ngenerate_sites\noffset_axes\nrandom_dropout\nrescale_axes\nclip_axes\n\nMaskedGrid\nAtomList\nmake_grid\ncollect_atoms\n\nimg_atoms\nimg_maskedgrid\nByDensity\n\nAbstractRegion\nParallelepiped\nParallelepiped(vecs)\nParallelepiped(vecs::T) where {T<:Real}\n\ndistance\ngenerate_sites_in_region\n\nBoundedLattice\nparallelepiped_region\n\ntwo_body_interaction_matrix\nrydberg_interaction_matrix\n","category":"page"},{"location":"lattices/#BloqadeLattices.AbstractLattice","page":"Lattices","title":"BloqadeLattices.AbstractLattice","text":"AbstractLattice{D}\n\nSupertype for all D dimensional lattices.\n\nImplementation\n\nlattice_vectors and lattice_sites functions must be defined which should both return an indexable iterable containing the Bravais lattice vectors and  lattice sites respectively. (e.g.: GeneralLattice returns a tuple of tuples containing the  Bravais lattice vectors and lattice sites).\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.GeneralLattice","page":"Lattices","title":"BloqadeLattices.GeneralLattice","text":"GeneralLattice{D,K,T} <: AbstractLattice{D}\nGeneralLattice(vectors, sites)\n\nThe general lattice type for tiling the space. Type parameter D is the dimension, K is the number of sites in a unit cell and T is the data type for coordinates, e.g. Float64. Input arguments are\n\nvectors is a vector/tuple of D-tuple. Its length is D, it specifies the Bravais lattice vectors.\nsites is a vector/tuple of D-tuple. Its length is K, it specifies the sites inside a Bravais cell.\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.SquareLattice","page":"Lattices","title":"BloqadeLattices.SquareLattice","text":"struct SquareLattice <: AbstractLattice{2}\n\nType representing 2D Square Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::SquareLattice) and lattice_sites(::SquareLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.RectangularLattice","page":"Lattices","title":"BloqadeLattices.RectangularLattice","text":"struct RectangularLattice <: AbstractLattice{2}\n\nType representing 2D Rectangular Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::RectangularLattice) and lattice_sites(::RectangularLattice).\n\nFields\n\naspect_ratio::Float64: defines the length of one of the Bravais lattice vectors\n\n(see lattice_vectors(r::RectangularLattice))\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.HoneycombLattice","page":"Lattices","title":"BloqadeLattices.HoneycombLattice","text":"struct HoneycombLattice <: AbstractLattice{2}\n\nType representing 2D Honeycomb Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::HoneycombLattice) and lattice_sites(::HoneycombLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.TriangularLattice","page":"Lattices","title":"BloqadeLattices.TriangularLattice","text":"struct TriangularLattice <: AbstractLattice{2}\n\nType representing 2D Square Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::TriangularLattice) and lattice_sites(::TriangularLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.ChainLattice","page":"Lattices","title":"BloqadeLattices.ChainLattice","text":"struct ChainLattice <: AbstractLattice{1}\n\nType representing 1D Chain Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::ChainLattice) and lattice_sites(::ChainLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.LiebLattice","page":"Lattices","title":"BloqadeLattices.LiebLattice","text":"struct LiebLattice <: AbstractLattice{2}\n\nType representing 1D Chain Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::LiebLattice) and lattice_sites(::LiebLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.KagomeLattice","page":"Lattices","title":"BloqadeLattices.KagomeLattice","text":"struct KagomeLattice <: AbstractLattice{2}\n\nType representing 2D Kagome Lattice.\n\nOverriden functions to return lattice vectors and sites exists as  lattice_vectors(::KagomeLattice) and lattice_sites(::KagomeLattice).\n\nFields\n\nNone\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.lattice_vectors","page":"Lattices","title":"BloqadeLattices.lattice_vectors","text":"lattice_vectors(lattice::AbstractLattice)\n\nReturns Bravais lattice vectors as a D-Tuple of D-Tuple, where D is the space dimension.\n\n\n\n\n\nlattice_vectors(::HoneycombLattice)\n\nReturns the Bravais lattice vectors for a Honeycomb lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.5, 0.5√3)\n\n\n\n\n\nlattice_vectors(::SquareLattice)\n\nReturns the Bravais lattice vectors for a Square lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.0, 1.0)\n\n\n\n\n\nlattice_vectors(::TriangularLattice)\n\nReturns the Bravais lattice vectors for a Triangular lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.5, 0.5√3)\n\n\n\n\n\nlattice_vectors(::ChainLattice)\n\nReturns the Bravais lattice vectors for a Chain lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0,)\n\n\n\n\n\nlattice_vectors(::LiebLattice)\n\nReturns the Bravais lattice vectors for a Lieb lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.0, 1.0)\n\n\n\n\n\nlattice_vectors(::KagomeLattice)\n\nReturns the Bravais lattice vectors for a Kagome lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.5, 0.5√3)\n\n\n\n\n\nlattice_vectors(r::RectangularLattice)\n\nReturns the Bravais lattice vectors for a Rectangular lattice as a Tuple of Tuples containing floats.\n\nThe vectors are defined as:\n\n𝐚₁ = (1.0, 0.0)\n𝐚₂ = (0.0, r.aspect_ratio), where aspect_ratio is a Float64.\n\n\n\n\n\nlattice_vectors(lattice::BoundedLattice{L,C})\n\nReturns the underlying Bravais lattice vectors of the BoundedLattice\n\njulia> bl = parallelepiped_region(SquareLattice(),(3,0),(0,2);) # create a 2D BoundedLattice\n\njulia> lattice_vectors(bl) # lattice vectors used in Bravais Lattice definition of underlying SquareLattice\n((1.0, 0.0), (0.0, 1.0))\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.lattice_sites","page":"Lattices","title":"BloqadeLattices.lattice_sites","text":"lattice_sites(lattice::AbstractLattice)\n\nReturns sites in a Bravais lattice unit cell as a Tuple of D-Tuple, where D is the space dimension.\n\n\n\n\n\nlattice_sites(::HoneycombLattice)\n\nReturns the Bravais Lattice sites for a Honeycomb lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n(0.5, 0.5√3)\n\n\n\n\n\nlattice_sites(::SquareLattice)\n\nReturns the Bravais Lattice sites for a Square lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n\n\n\n\n\nlattice_sites(::TriangularLattice)\n\nReturns the Bravais Lattice sites for a Triangular lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n\n\n\n\n\nlattice_sites(::ChainLattice)\n\nReturns the Bravais Lattice sites for a Chain lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0,)\n\n\n\n\n\nlattice_sites(::LiebLattice)\n\nReturns the Bravais Lattice sites for a Lieb lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n(0.5, 0.0)\n(0.0, 0.5)\n\n\n\n\n\nlattice_sites(::KagomeLattice)\n\nReturns the Bravais Lattice sites for a Lieb lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n(0.25, 0.25√3)\n(0.75, 0.25√3)\n\n\n\n\n\nlattice_sites(::RectangularLattice)\n\nReturns the Bravais Lattice sites for a Rectangular lattice as a Tuple of Tuples containing floats.\n\nThe sites are defined as:\n\n(0.0, 0.0)\n\n\n\n\n\nlattice_sites(lattice::BoundedLattice{L,C})\n\nReturns the underlying site vectors that define the unit-cell of the BoundedLattice\n\njulia> bl = parallelepiped_region(SquareLattice(),(3,0),(0,2);) # create a 2D BoundedLattice\n\njulia> lattice_sites(bl) # lattice vectors used in Bravais Lattice definition of underlying SquareLattice\n((0.0, 0.0), )\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.dimension","page":"Lattices","title":"BloqadeLattices.dimension","text":"dimension(::AbstractLattice{D})\n\nReturns the space dimension of target lattice. e.g. ChainLattice is a 1D lattice, hence returns 1.\n\n\n\n\n\ndimension(lattice::BoundedLattice{L,C})\n\nReturns the dimensions of the BoundedLattice (e.g.: 2 for 2D, 3 for 3D)\n\njulia> bl = parallelepiped_region(ChainLattice(),(4,);pbc=true) # create a 1D BoundedLattice\n\njulia> dimension(bl)\n1\n\njulia> bl = parallelepiped_region(SquareLattice(),(3,0),(0,2);) # create a 2D BoundedLattice\n\njulia> dimension(bl)\n2\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.generate_sites","page":"Lattices","title":"BloqadeLattices.generate_sites","text":"generate_sites(lattice::AbstractLattice{D}, repeats::Vararg{Int,D}; scale=1.0)\n\nReturns an AtomList instance by tiling the specified lattice. The tiling repeat the sites of the lattice m times along the first dimension, n times along the second dimension, and so on. scale is a real number that re-scales the lattice constant and atom locations.\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.offset_axes","page":"Lattices","title":"BloqadeLattices.offset_axes","text":"offset_axes(sites::AtomList{D, T}, offsets::Vararg{T,D}) where {D, T}\noffset_axes(offsets...)\n\nOffset the sites by distance specified by offsets.\n\njulia> sites = AtomList([(1.0, 2.0), (10.0, 3.0), (1.0, 12.0), (3.0, 5.0)])\n4-element AtomList{2, Float64}:\n (1.0, 2.0)\n (10.0, 3.0)\n (1.0, 12.0)\n (3.0, 5.0)\n\njulia> offset_axes(sites, 1.0, 3.0)\n4-element AtomList{2, Float64}:\n (2.0, 5.0)\n (11.0, 6.0)\n (2.0, 15.0)\n (4.0, 8.0)\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.random_dropout","page":"Lattices","title":"BloqadeLattices.random_dropout","text":"random_dropout(sites::AtomList{D, T}, ratio::Real) where {D, T}\nrandom_dropout(ratio)\n\nRandomly drop out ratio * number of sites atoms from sites, where ratio ∈ [0, 1].\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.rescale_axes","page":"Lattices","title":"BloqadeLattices.rescale_axes","text":"rescale_axes(sites::AtomList{D, T}, scale::Real) where {D, T}\nrescale_axes(scale)\n\nRescale the sites by a constant scale.\n\njulia> sites = AtomList([(1.0, 2.0), (10.0, 3.0), (1.0, 12.0), (3.0, 5.0)])\n4-element AtomList{2, Float64}:\n (1.0, 2.0)\n (10.0, 3.0)\n (1.0, 12.0)\n (3.0, 5.0)\n\njulia> rescale_axes(sites, 2.0)\n4-element AtomList{2, Float64}:\n (2.0, 4.0)\n (20.0, 6.0)\n (2.0, 24.0)\n (6.0, 10.0)\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.clip_axes","page":"Lattices","title":"BloqadeLattices.clip_axes","text":"clip_axes(sites::AtomList{D, T}, bounds::Vararg{Tuple{T,T},D}) where {D, T}\nclip_axes(bounds...)\n\nRemove sites out of bounds, where bounds is specified by D D-tuples.\n\njulia> sites = AtomList([(1.0, 2.0), (10.0, 3.0), (1.0, 12.0), (3.0, 5.0)])\n4-element AtomList{2, Float64}:\n (1.0, 2.0)\n (10.0, 3.0)\n (1.0, 12.0)\n (3.0, 5.0)\n\njulia> clip_axes(sites, (-5.0, 5.0), (-5.0, 5.0))\n2-element AtomList{2, Float64}:\n (1.0, 2.0)\n (3.0, 5.0)\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.MaskedGrid","page":"Lattices","title":"BloqadeLattices.MaskedGrid","text":"MaskedGrid{T}\nMaskedGrid(xs, ys, mask)\n\nMasked square lattice contains 3 fields, the x-coordinates, y-coordinates and a mask. e.g. MaskedGrid([0.0, 1.0, 3.0], [0.0, 2.0,6.0], Bool[1 0 0; 0 1 1; 0 1 0]) specifies the following lattice:\n\n     y₁   y₂        y₃\n     ↓    ↓         ↓\nx₁ → ●    ⋅         ●\nx₂ → ⋅    ●         ●\n\nx₃ → ⋅    ●         ⋅\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.AtomList","page":"Lattices","title":"BloqadeLattices.AtomList","text":"AtomList{D, T} <: AbstractVector{NTuple{D, T}}\nAtomList(atoms::Vector{<:NTuple})\n\nA list of atoms in D dimensional space.\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.make_grid","page":"Lattices","title":"BloqadeLattices.make_grid","text":"make_grid(sites::AtomList; atol=...)\n\nCreate a MaskedGrid from the sites. It is required by lattice preparation of Rydberg array. Because the grid will sort the sites by rows, we need atol (default value is 10 time sit data precision) determines up to what level of round off error, two atoms belong to the same row.\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.collect_atoms","page":"Lattices","title":"BloqadeLattices.collect_atoms","text":"collect_atoms(maskedgrid::MaskedGrid)\n\nReturns an list of atoms in the maskedgrid in order.\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.img_atoms","page":"Lattices","title":"BloqadeLattices.img_atoms","text":"img_atoms(atoms::AtomList;\n    colors = [DEFAULT_LINE_COLOR[], ...],\n    texts = [\"1\", \"2\", ...],\n    vectors = [],\n    format = :svg,\n    filename = nothing,\n    kwargs...\n    )\nimg_atoms(bounded_lattice::BoundedLattice;\n    colors = [DEFAULT_LINE_COLOR[], ...],\n    texts = [\"1\", \"2\", ...],\n    vectors = [],\n    format = :svg,\n    filename = nothing,\n    kwargs...\n    )\n\nPlots atoms or bounded_lattice.site_positions with colors specified by colors and texts specified by texts. You will need a VSCode, Pluto notebook or Jupyter notebook to show the image. If you want to write this image to the disk without displaying it in a frontend, please try\n\njulia> img_atoms(generate_sites(SquareLattice(), 5, 5); filename=\"test.png\")\n\nKeyword Arguments\n\ncolors is a vector of colors for nodes\ntexts is a vector of string displayed on nodes\nvectors is a vector of (startloc, endloc) pair to specify a list of arrows.\nformat can be :svg, :pdf or :png\nfilename can be a filename string with suffix .svg, .png or .pdf\n\nExtra Keyword Arguments\n\nbackground_color = DEFAULT_BACKGROUND_COLOR[]\nscale::Float64 = 1 is a multiplicative factor to rescale the atom distance for better visualization\nxpad::Float64 = 2.5 is the padding space in x axis\nypad::Float64 = 1.5 is the padding space in y axis\nunit::Int = 60 is the number of pixel per unit distance\n\naxes\n\naxes_text_color = DEFAULT_TEXT_COLOR[]\naxes_text_fontsize::Float64 = 16.0\naxes_num_of_xticks = 5\naxes_num_of_yticks = 5\naxes_x_offset::Float64 = 0.1\naxes_y_offset::Float64 = 0.06\naxes_unit::String = \"μm\"\n\nnode\n\nnode_text_fontsize::Float64 = 16.0\nnode_text_color = DEFAULT_TEXT_COLOR[]\nnode_stroke_color = DEFAULT_LINE_COLOR[]\nnode_stroke_linewidth = 1\nnode_fill_color = DEFAULT_NODE_COLOR[]\n\nbond\n\nbond_color = DEFAULT_LINE_COLOR[]\nbond_linewidth::Float64 = 1.0\n\nblockade\n\nblockade_radius::Float64=0, atoms within blockade_radius will be connected by edges.\nblockade_style::String = \"none\"\nblockade_stroke_color = DEFAULT_LINE_COLOR[]\nblockade_fill_color = \"transparent\"\nblockade_fill_opacity::Float64 = 0.5\nblockade_stroke_linewidth = 1.0   # in pt\n\narrow\n\narrow_linewidth\narrow_color\narrow_head_length\n\ngrid\n\ngrid_stroke_color=\"#AAAAAA\"\ngrid_stroke_width::Float64=1\ngrid_stroke_style::String=\"dashed\"\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.img_maskedgrid","page":"Lattices","title":"BloqadeLattices.img_maskedgrid","text":"img_maskedgrid(maskedgrid::MaskedGrid;\n    colors=[DEFAULT_LINE_COLOR[], ...],\n    texts=[\"1\", \"2\", ...],\n    vectors=[],\n    format=:svg,\n    filename=nothing,\n    kwargs...\n    )\n\nDraw a maskedgrid with colors specified by colors and texts specified by texts. You will need a VSCode, Pluto notebook or Jupyter notebook to show the image.\n\nKeyword Arguments\n\ncolors is a vector of colors for nodes\ntexts is a vector of string displayed on nodes\nvectors is a vector of arrows\nformat can be :svg, :pdf or :png\nfilename can be a filename string with suffix .svg, .png or .pdf\n\nExtra Keyword Arguments\n\nbackground_color = DEFAULT_BACKGROUND_COLOR[]\nscale::Float64 = 1 is a multiplicative factor to rescale the atom distance for better visualization\nxpad::Float64 = 2.5 is the padding space in x axis\nypad::Float64 = 1.5 is the padding space in y axis\nunit::Int = 60 is the number of pixel per unit distance\n\naxes\n\naxes_text_color = DEFAULT_TEXT_COLOR[]\naxes_text_fontsize::Float64 = 16.0\naxes_num_of_xticks = 5\naxes_num_of_yticks = 5\naxes_x_offset::Float64 = 0.1\naxes_y_offset::Float64 = 0.06\naxes_unit::String = \"μm\"\n\nnode\n\nnode_text_fontsize::Float64 = 16.0\nnode_text_color = DEFAULT_TEXT_COLOR[]\nnode_stroke_color = DEFAULT_LINE_COLOR[]\nnode_stroke_linewidth = 1\nnode_fill_color = DEFAULT_NODE_COLOR[]\n\nbond\n\nbond_color = DEFAULT_LINE_COLOR[]\nbond_linewidth::Float64 = 1.0\n\nblockade\n\nblockade_radius::Float64=0, atoms within blockade_radius will be connected by edges.\nblockade_style::String = \"none\"\nblockade_stroke_color = DEFAULT_LINE_COLOR[]\nblockade_fill_color = \"transparent\"\nblockade_fill_opacity::Float64 = 0.5\nblockade_stroke_linewidth = 1.0   # in pt\n\narrow\n\narrow_linewidth\narrow_color\narrow_head_length\n\ngrid\n\ngrid_stroke_color=\"#AAAAAA\"\ngrid_stroke_width::Float64=1\ngrid_stroke_style::String=\"dashed\"\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.ByDensity","page":"Lattices","title":"BloqadeLattices.ByDensity","text":"ByDensity(values; colormap=\"Grays\", vmin=minimum(values), vmax=maximum(values))\n\nFor specifying the colors for density plots, where values are densities.\n\nKeyword arguments\n\ncolormap is a string for specifying the color map, check the documentation of [Colors] package for the detailed description.\nvmin and vmax are the color range.\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.AbstractRegion","page":"Lattices","title":"BloqadeLattices.AbstractRegion","text":"AbstractRegion{D}\n\nSupertype for all D dimensional regions used to define bounds on lattices.\n\nImplementation\n\nThe following should be overriden:\n\nBase.in: Returns Bool on whether a point exists in the region\nBase.mod: Maps points outside the region back into the region\ndistance: Calculates distance between points with periodic boundary conditions enabled\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.Parallelepiped","page":"Lattices","title":"BloqadeLattices.Parallelepiped","text":"struct Parallelepiped{D, T} <: AbstractRegion{D}\n\nRegion that is a Parallelogram/Parallelepiped\n\nSee also Parallelepiped(vecs), Parallelepiped(vecs::T) where {T<:Real}\n\nFields\n\nvecs::Matrix{T}: Matrix with column vectors defining Parallelogram/Parallelepiped \nvecs_inv::Matrix{T}: Inverse of vecs.\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.Parallelepiped-Tuple{Any}","page":"Lattices","title":"BloqadeLattices.Parallelepiped","text":"Parallelepiped(vecs)\nParallelepiped(vecs::T) where {T<:Real}\n\nDefine a region (either a line segment, parallelogram, or parallelepiped depending on the dimensions of vecs) using a single value or column vectors in a matrix that can be used to create a BoundedLattice.\n\njulia> Parallelepiped(2.0) # can bound a 1D lattice\nParallelepiped{1, Float64}([2.0;;], [0.5;;])\n\njulia> bounds = zeros((2,2)); # Create 2x2 matrix to store vectors defining 2D region\n\njulia> bounds[:,1] .= (3,3); bounds[:,2] .= (4,0); # Column Vectors define the Parallelogram\n\njulia> Parallelepiped(bounds)\nParallelepiped{2, Float64}([3.0 4.0; 3.0 0.0], [0.0 0.3333333333333333; 0.25 -0.25])\n\n\n\n\n\n","category":"method"},{"location":"lattices/#BloqadeLattices.Parallelepiped-Tuple{T} where T<:Real","page":"Lattices","title":"BloqadeLattices.Parallelepiped","text":"Parallelepiped(vecs)\nParallelepiped(vecs::T) where {T<:Real}\n\nDefine a region (either a line segment, parallelogram, or parallelepiped depending on the dimensions of vecs) using a single value or column vectors in a matrix that can be used to create a BoundedLattice.\n\njulia> Parallelepiped(2.0) # can bound a 1D lattice\nParallelepiped{1, Float64}([2.0;;], [0.5;;])\n\njulia> bounds = zeros((2,2)); # Create 2x2 matrix to store vectors defining 2D region\n\njulia> bounds[:,1] .= (3,3); bounds[:,2] .= (4,0); # Column Vectors define the Parallelogram\n\njulia> Parallelepiped(bounds)\nParallelepiped{2, Float64}([3.0 4.0; 3.0 0.0], [0.0 0.3333333333333333; 0.25 -0.25])\n\n\n\n\n\n","category":"method"},{"location":"lattices/#BloqadeLattices.distance","page":"Lattices","title":"BloqadeLattices.distance","text":"distance(x, y)\ndistance(region::Parallelepiped{D,T},x,y)\n\nDistance between two points. \n\nIf just points x and y are provided, the Euclidean distance is calculated. \n\nIf a region is provided, then it is automatically assumed periodic boundary conditions are enabled and the smallest possible distance between the two points is returned.\n\njulia> distance((0.0, 0.0), (1.0, 1.0))\n1.4142135623730951\n\njulia> bounds = zeros(2,2); bounds[:,1] .= (3, 0); bounds[:,2] .= (0, 3);\n\njulia> distance(Parallelepiped(bounds), (0.5, 0.5), (2.5, 2.5))\n1.4142135623730951\n\n\n\n\n\ndistance(lattice::BoundedLattice,x,y)\n\nReturns the distance between two points in the BoundedLattice. \n\nPoints x and y can be any iterable and must have the same dimensions as the BoundedLattice  (ex: (x,y) for a 2D lattice, (x,y,z) for a 3D lattice).\n\nIf the Periodic Boundary Condition option has been set to true for the BoundedLattice, the smallest distance between points (modulo the region) is returned, otherwise the standard Euclidean metric is used.\n\njulia> bl = parallelepiped_region(SquareLattice(), (1,0),(0,1);) # Define 2D BoundedLattice\n\njulia> distance(bl, (0.1, 0.1), (0.5, 1.1)) # distance between two points\n1.077032961426901\n\njulia> bl_pbc = parallelepiped_region(SquareLattice(), (1,0),(0,1);pbc=true) # Define 2D BoundedLattice with Periodic Boundary Condition\n\njulia> distance(bl_pbc, (0.1, 0.1), (0.5, 1.1)) # distance with periodic boundary condition enabled\n0.4\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.generate_sites_in_region","page":"Lattices","title":"BloqadeLattices.generate_sites_in_region","text":"generate_sites_in_region(lattice::AbstractLattice{D}, region::AbstractRegion{D})\n\nGenerates sites from the lattice that are present in the region.\n\njulia> generate_sites_in_region(ChainLattice(), Parallelepiped(4.0))\n4-element Vector{Tuple{Float64}}:\n (0.0,)\n (1.0,)\n (2.0,)\n (3.0,)\n\njulia> bounds = zeros(2,2)\n2×2 Matrix{Float64}:\n 0.0  0.0\n 0.0  0.0\n\njulia> bounds[:,1] .= (0.0, 2.0); bounds[:,2] .= (2.0, 0.0);\n\njulia> generate_sites_in_region(SquareLattice(), Parallelepiped(bounds))\n4-element Vector{Tuple{Float64, Float64}}:\n (0.0, 0.0)\n (1.0, 0.0)\n (0.0, 1.0)\n (1.0, 1.0)\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.BoundedLattice","page":"Lattices","title":"BloqadeLattices.BoundedLattice","text":"struct BoundedLattice{L<:AbstractLattice, R<:AbstractRegion}\n\nDefines a lattice bounded by a region with the option for periodic boundary conditions.\n\nFields\n\nlattice <: AbstractLattice: Lattice to be bounded.\nregion <: AbstractRegion: Region that bounds the underlying lattice.\nsite_positions::AtomList: Positions of the atoms inside region.\npbc::Bool: Enable/Disable behavior for Periodic Boundary Conditions.\n\n\n\n\n\n","category":"type"},{"location":"lattices/#BloqadeLattices.parallelepiped_region","page":"Lattices","title":"BloqadeLattices.parallelepiped_region","text":"parallelepiped_region(lattice::AbstractLattice{D},M::Vararg{NTuple{D,Int},D};pbc::Bool=false;scale::Real=1)\n\nCreate a BoundedLattice given an existing lattice and tuples defining a parallelogram/paralelepiped /line segment defined by vectors that are integer multiples of the lattice vectors in lattice.\n\nPeriodic Boundary Conditions can be enable/disabled via pbc. Tuples must be the same length and quantity as the dimensions of the lattice argument.\n\njulia> parallelepiped_region(SquareLattice(),(2,0),(0,2);pbc=true);\n\njulia> parallelepiped_region(KagomeLattice(),(2,2),(-2,2));\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.two_body_interaction_matrix","page":"Lattices","title":"BloqadeLattices.two_body_interaction_matrix","text":"two_body_interaction_matrix(f, atoms)\n\nGenerates an interaction matrix given a function f that accepts two atom positions at a time  and an indexable iterable atoms containing atom positions.\n\nSee also rydberg_interaction_matrix\n\njulia> atoms = [(0.0,), (1.0,), (2.0,), (3.0,)]; # 1D chain, can also be AtomList\n\njulia> two_body_interaction_matrix(atoms) do x,y return 1/distance(x,y) end\n4×4 UpperTriangular{Float64, Matrix{Float64}}:\n 0.0  1.0  0.5  0.333333\n  ⋅   0.0  1.0  0.5\n  ⋅    ⋅   0.0  1.0\n  ⋅    ⋅    ⋅   0.0\n\n\n\n\n\n","category":"function"},{"location":"lattices/#BloqadeLattices.rydberg_interaction_matrix","page":"Lattices","title":"BloqadeLattices.rydberg_interaction_matrix","text":"rydberg_interaction_matrix(atoms, C::Real)\nrydberg_interaction_matrix(lattice::BoundedLattice{L,R},C::Real)\n\nGenerate the interaction matrix given an indexable iterable atoms containg atom positions and the Rydberg interaction constant C.\n\nA BoundedLattice can be used in place of atoms which generates the Rydberg interaction matrix for the lattice, factoring in Periodic Boundary Conditions.\n\nSee also two_body_interaction_matrix\n\njulia> atoms = [(0.0,), (1.0,), (2.0,), (3.0,)]; # 1D chain of atoms\n\njulia> rydberg_interaction_matrix(atoms, 2π * 862690) # provide Rydberg constant\n4×4 UpperTriangular{Float64, Matrix{Float64}}:\n 0.0  5.42044e6  84694.4         7435.45\n  ⋅   0.0            5.42044e6  84694.4\n  ⋅    ⋅             0.0            5.42044e6\n  ⋅    ⋅              ⋅             0.0\n\njulia> bl = parallelepiped_region(SquareLattice(),(2,0),(0,2);pbc=true); \n\njulia> rydberg_interaction_matrix(bl, 2π * 862690)\n4×4 UpperTriangular{Float64, Matrix{Float64}}:\n 0.0  5.42044e6  5.42044e6  6.77555e5\n  ⋅   0.0        6.77555e5  5.42044e6\n  ⋅    ⋅         0.0        5.42044e6\n  ⋅    ⋅          ⋅         0.0\n\n\n\n\n\n","category":"function"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"CurrentModule = Bloqade","category":"page"},{"location":"waveform/#Waveforms","page":"Waveforms","title":"Waveforms","text":"","category":"section"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Waveforms are essential ingredients for generating the Rydberg Hamiltonian. By controlling the waveforms of Omega, Delta, and phi, one can prepare the ground states of certain target Hamiltonians and study their non-equilibrium dynamics.  Bloqade supports several built-in waveforms and allows the users to specify waveforms by inputting functions. It also supports different operations of waveforms, such as waveform smoothening, composing, and more.","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"The generated waveforms can be directly used to build the time-dependent Hamiltonians. Please see the Hamiltonians section for more details.","category":"page"},{"location":"waveform/#Creating-Waveforms","page":"Waveforms","title":"Creating Waveforms","text":"","category":"section"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"In Bloqade, the waveforms are defined as a Waveform object, which is a created by providing a callable object and a real number duration:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Bloqade gives users the flexibility to specify general waveforms by inputting functions. The following code constructs a sinusoidal waveform with a time duration of 2 μs:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"using Bloqade\nusing PythonCall\nplt = pyimport(\"matplotlib.pyplot\")\nwaveform = Waveform(t->2.2*2π*sin(2π*t), duration = 2);\nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"In our documentation, we use the python package matplotlib for plotting.","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Bloqade supports built-in waveforms for convenience (see References below).  For example, the codes below create different waveform shapes with a single line:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"waveform = piecewise_linear(clocks=[0.0, 0.2, 0.5, 0.8, 1.0], values= 2π* [0.0, 1.5, 3.1, 3.1, 0.0]); \nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"waveform = piecewise_constant(clocks=[0.0, 0.2, 0.5, 0.7], values= 2π*[0.0, 1.5, 3.1]);\nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"waveform = linear_ramp(duration=0.5, start_value=0.0, stop_value=2π*1.0);\nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"waveform =  constant(duration=0.5, value=2π*2.1);\nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"waveform = sinusoidal(duration=2, amplitude=2π*2.2); \nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"In some cases, users may have their own waveforms specified by a vector of clocks and a vector of signal strengths. To build a waveform from the two vectors, we can directly use the functions piecewise_linear or piecewise_constant, corresponding to different interpolations. ","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"clocks = collect(0:1e-1:2);\nvalues1 = 2π*rand(length(clocks));\nwf1 = piecewise_linear(;clocks, values=values1); \nvalues2 = 2π*rand(length(clocks)-1)\nwf2 = piecewise_constant(;clocks, values=values2); \n\nfig, (ax1, ax2) = plt.subplots(figsize=(12, 4), ncols=2)\nBloqade.plot!(ax1, wf1)\nBloqade.plot!(ax2, wf2)\nfig","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"For more advanced interpolation options, please see the JuliaMath/Interpolations package.","category":"page"},{"location":"waveform/#Operations-on-Waveforms","page":"Waveforms","title":"Operations on Waveforms","text":"","category":"section"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Bloqade also supports several operations on the waveforms. ","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Waveforms can be sliced using the duration syntax start..stop, e.g.:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf = 2π*sinusoidal(duration=2.2);\nwf1 = wf[1.1..1.5];\nBloqade.plot(wf1)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Note that time starts from 0.0 again, so the total duration is stop - start.","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Waveforms can be composed together via append:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf2 = linear_ramp(;start_value=0.0, stop_value=1.1*2π, duration=0.5);\nwaveform = append(wf1, wf2); \nBloqade.plot(waveform)","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"where the waveform wf2 is appended at the end of wf1. ","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Sharp points in waveforms may result in bad performance in practice (e.g. for adiabatically preparing a ground state of a target Hamiltonian). It is sometimes preferred to smoothen the waveform using the moving average methods. One can use the smooth function to create a smoothened waveform from a piecewise linear waveform:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf = piecewise_linear(clocks=[0.0, 2.0, 3.0, 4.0], values=2π*[0.0, 3.0, 1.1, 2.2]);\nswf = smooth(wf;kernel_radius=0.1);\n\nfig, (ax1, ax2) = plt.subplots(figsize=(12, 4), ncols=2)\nBloqade.plot!(ax1, wf)\nBloqade.plot!(ax2, swf)\nfig","category":"page"},{"location":"waveform/#Waveform-Arithmetics","page":"Waveforms","title":"Waveform Arithmetics","text":"","category":"section"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Bloqade also supports several arithmetics on the waveforms. If two waveforms have the same duration, we can directly add up or subtract the strength of them, simply by using + or -: ","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf1 = linear_ramp(;duration=2.2, start_value=0.0, stop_value=1.0*2π);\nwf2 = sinusoidal(duration = 2.2, amplitude = 2.2*2π);\nwf3 = wf1 + wf2; \nwf4 = wf1 - wf2;\n\nfig, (ax1, ax2) = plt.subplots(figsize=(12, 4), ncols=2)\nBloqade.plot!(ax1, wf3)\nBloqade.plot!(ax2, wf4)\nfig\n","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"To increase the strength of a waveform by some factors, we can directly use *:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf = linear_ramp(;duration=2.2, start_value=0.0, stop_value=1.0*2π);\nwf_t = 3 * wf;\n\nfig, (ax1, ax2) = plt.subplots(figsize=(12, 4), ncols=2)\nBloqade.plot!(ax1, wf)\nBloqade.plot!(ax2, wf_t)\nfig\n","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"Such operations can also be broadcasted by using .*:","category":"page"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"wf2, wf3 = [2.0, 3.0] .* wf1; \n\nfig, (ax1, ax2) = plt.subplots(figsize=(12, 4), ncols=2)\nBloqade.plot!(ax1, wf2)\nBloqade.plot!(ax2, wf3)\nfig","category":"page"},{"location":"waveform/#References","page":"Waveforms","title":"References","text":"","category":"section"},{"location":"waveform/","page":"Waveforms","title":"Waveforms","text":"BloqadeWaveforms.Waveform\nWaveform(f; duration::Real)\nBloqadeWaveforms.:(..)\nsample_values\nsample_clock\npiecewise_linear\npiecewise_constant\npiecewise_linear_interpolate\npiecewise_constant_interpolate\nlinear_ramp\nconstant\nsinusoidal\nBloqadeWaveforms.LinearAlgebra.norm\nappend\nsmooth\nsmooth(kernel, Xi::Vector, Yi::Vector, kernel_radius::Real)\nKernels.biweight\nKernels.cosine\nKernels.gaussian\nKernels.logistic\nKernels.parabolic\nKernels.sigmoid\nKernels.triangle\nKernels.tricube\nKernels.triweight\nKernels.uniform","category":"page"},{"location":"waveform/#BloqadeWaveforms.Waveform","page":"Waveforms","title":"BloqadeWaveforms.Waveform","text":"struct Waveform{F,T<:Real}\n\nType for waveforms. Waveforms are defined as a function combined with a real number duration.\n\nFields\n\nf: a callable object.\nduration: a real number defines the duration of this waveform; default unit is μs.\n\n\n\n\n\n","category":"type"},{"location":"waveform/#BloqadeWaveforms.Waveform-Tuple{Any}","page":"Waveforms","title":"BloqadeWaveforms.Waveform","text":"Waveform(f; duration::Real)\n\nCreate a Waveform object from callable f, the unit of duration is μs.\n\nExample\n\njulia> Waveform(duration=1.5) do t\n            2π*(2t+1)\n        end\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Waveform{_, Float64}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n                    ┌────────────────────────────────────────┐\n                  4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n   value / 2π (MHz) │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                  1 │⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    └────────────────────────────────────────┘\n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀2⠀\n\njulia>\n\n\n\n\n\n","category":"method"},{"location":"waveform/#Intervals.:..","page":"Waveforms","title":"Intervals.:..","text":"function (..)(first, last)\n\nExported from Intervals, creates a closed interval from first..last  and can be used with Waveform structs to obtain a slice of a Waveform's values, with the waveform slice's time adjusted to begin at 0 μs and the duration being last - first.\n\nExample\n\njulia> wf = Waveform(t->2.2*2π*sin(2π*t), duration = 2)\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Waveform{_, Int64}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n                    ┌────────────────────────────────────────┐\n                  3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⡴⠋⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠋⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⡼⠁⠀⠀⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠁⠀⠀⠈⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⢰⠃⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⢀⡏⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡏⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⡼⠀⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n   value / 2π (MHz) │⠧⠤⠤⠤⠤⠤⠤⠤⠤⠼⡦⠤⠤⠤⠤⠤⠤⠤⠤⢤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠼⡦⠤⠤⠤⠤⠤⠤⠤⠤⢤│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⡞│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⢸⠁│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⢀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⢀⠇⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠀⠀⢀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠀⠀⢀⡞⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⣠⠞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⣠⠞⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀│\n                 -3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    └────────────────────────────────────────┘\n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀2⠀\n\njulia> wf[0.9..1.5]\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Waveform{_, Float64}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n                    ┌────────────────────────────────────────┐\n                  3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠔⠒⠒⠒⠦⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠞⠉⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⢦⡀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⠀⠀⠀│\n   value / 2π (MHz) │⠀⠀⠀⠀⠀⠀⠀⠀⣠⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⡀⠀│\n                    │⠀⠀⠀⠀⠀⠀⢀⡜⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦│\n                    │⠉⠉⠉⠉⠉⡽⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉│\n                    │⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⢀⡴⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                 -2 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    └────────────────────────────────────────┘\n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀0.6⠀\n\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.sample_values","page":"Waveforms","title":"BloqadeWaveforms.sample_values","text":"sample_values(wf::Waveform, clocks; offset::Real = zero(eltype(wf)))\nsample_values(wf::Waveform; offset::Real = zero(eltype(wf)), dt::Real = 1e-3)\n\nSamples of waveform wf values obtainable by either providing an iterable clocks containing exact time values to sample from or providing offset and dt values  which specify the offset to add to the beginning and end of the waveforms time span and  the step between time values. \n\nSee also sample_clock\n\njulia> wf = linear_ramp(duration=0.5, start_value=0.0, stop_value=2π*1.0);\n\njulia> sample_values(wf,0.0:0.1:0.5) # sample waveform values from range\n6-element Vector{Float64}:\n 0.0\n 1.2566370614359172\n 2.5132741228718345\n 3.7699111843077517\n 5.026548245743669\n 6.283185307179586\n\njulia> sample_values(wf; dt=5e-2) #5e-2 time gap between each sampled valued\n11-element Vector{Float64}:\n 0.0\n 0.6283185307179586\n 1.2566370614359172\n 1.8849555921538759\n 2.5132741228718345\n 3.141592653589793\n 3.7699111843077517\n 4.39822971502571\n 5.026548245743669\n 5.654866776461628\n 6.283185307179586\n\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.sample_clock","page":"Waveforms","title":"BloqadeWaveforms.sample_clock","text":"sample_clock(wf::Waveform; offset::Real = zero(eltype(wf)), dt::Real = 1e-3)\n\nGenerates range of time values based on wf's duration  with dt time between each time value along with offset time added to the beginning and end of the waveform's time span.\n\nSee also sample_values\n\njulia> wf = sinusoidal(duration=2, amplitude=2π*2.2); # create a waveform\n\njulia> sample_clock(wf;) # range from 0.0 to 2.0 with step of 0.001 (default arg)\n0.0:0.001:2.0\n\njulia> sample_clock(wf; offset=0.1) # offset beginning and end by 0.1\n0.1:0.001:2.1\n\njulia> sample_clock(wf; dt = 2e-3) # set step size of 2e-3\n0.0:0.002:2.0\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.piecewise_linear","page":"Waveforms","title":"BloqadeWaveforms.piecewise_linear","text":"piecewise_linear(;clocks, values)\n\nCreate a piecewise linear waveform.\n\nKeyword Arguments\n\nclocks::Vector{<:Real}: the list of clocks for the corresponding values.\nvalues::Vector{<:Real}: the list of values at each clock.\n\nExample\n\njulia> piecewise_linear(clocks=[0.0, 2.0, 3.0, 4.0], values=2π * [0.0, 2.0, 2.0, 0.0])\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Waveform{_, Float64}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n                    ┌────────────────────────────────────────┐ \n                  2 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡞⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⡀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀│ \n   value / 2π (MHz) │⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀│ \n                    │⠀⠀⠀⠀⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⡀⠀│ \n                    │⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀│ \n                    │⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆│ \n                  0 │⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱│ \n                    └────────────────────────────────────────┘ \n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀4⠀ \n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.piecewise_constant","page":"Waveforms","title":"BloqadeWaveforms.piecewise_constant","text":"piecewise_constant(;clocks, values, duration=last(clocks))\n\nCreate a piecewise constant waveform. \n\nThe number of elements in clocks should be one greater than the number of elements in values.  For example, if you wanted to define a piecewise constant waveform with the following:\n\n0.0 2π ⋅ MHz from 0.0 to 0.5 μs\n1.0 2π ⋅ MHz from 0.5 to 0.9 μs \n2.1 2π ⋅ MHz from 0.9 to 1.1 μs\n\nIt would be expressed as: piecewise_constant(clocks=[0.0, 0.5, 0.9, 2.1], values=[0.0, 1.0, 2.1])\n\nKeyword Arguments\n\nclocks::Vector{<:Real}: the list of clocks for the corresponding values.\nvalues::Vector{<:Real}: the list of values at each clock.\nduration::Real: the duration of the entire waveform, default is the last clock.\n\nExample\n\njulia> piecewise_constant(clocks=[0.0, 0.2, 0.5, 0.9], values=2π * [0.0, 1.5, 3.1])\n                    ┌────────────────────────────────────────┐\n                  4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡖⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n   value / 2π (MHz) │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⢰⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                  0 │⣀⣀⣀⣀⣀⣀⣀⣀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n                    └────────────────────────────────────────┘\n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀0.9⠀\n\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.piecewise_linear_interpolate","page":"Waveforms","title":"BloqadeWaveforms.piecewise_linear_interpolate","text":"piecewise_linear_interpolate(waveform;[max_vale=Inf64,max_slope=Inf64,min_step=0.0])\n\nFunction which takes a waveform and translates it to a linear interpolation subject to some constraints. The function returns a piecewise linear waveform. if the Waveform is piecewise linear only the constraints will be checked. \n\nArguments\n\nwaveform: 'Waveform'  to be discretized.\n\nKeyword Arguments\n\nmin_step: minimum possible step used in interpolation\nmax_slope: Maximum possible slope used in interpolation\natol: tolerance of interpolation, this is a bound to the area between the linear interpolation and the waveform.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.piecewise_constant_interpolate","page":"Waveforms","title":"BloqadeWaveforms.piecewise_constant_interpolate","text":"piecewise_constant_interpolate(wf::Waveform; min_step::Real=0.0, atol::Real = 1.0e-5)\n\nConverts wf to a piecewise_constant waveform subject to min_step  (the smallest allowable time step) and tolerance atol.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.linear_ramp","page":"Waveforms","title":"BloqadeWaveforms.linear_ramp","text":"linear_ramp(;duration, start_value, stop_value)\n\nCreate a linear ramp waveform.\n\nKeyword Arguments\n\nduration::Real: duration of the whole waveform.\nstart_value::Real: start value of the linear ramp.\nstop_value::Real: stop value of the linear ramp.\n\nExample\n\njulia> linear_ramp(;duration=2.2, start_value=0.0, stop_value=1.0 * 2π)\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Waveform{_, Float64}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n                    ┌────────────────────────────────────────┐ \n                  1 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   value / 2π (MHz) │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    │⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  0 │⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    └────────────────────────────────────────┘ \n                    ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀clock (μs)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀3⠀ \n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.constant","page":"Waveforms","title":"BloqadeWaveforms.constant","text":"constant(;duration::Real, value::Real)\n\nCreate a constant waveform.\n\nKeyword Arguments\n\nduration::Real: duration of the whole waveform.\nvalue::Real: value of the constant waveform.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.sinusoidal","page":"Waveforms","title":"BloqadeWaveforms.sinusoidal","text":"sinusoidal(;duration::Real, amplitude::Real=one(start))\n\nCreate a sinusoidal waveform of the following expression.\n\namplitude * sin(2π*t)\n\nKeyword Arguments\n\nduration: duration of the waveform.\namplitude: amplitude of the sin waveform.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#LinearAlgebra.norm","page":"Waveforms","title":"LinearAlgebra.norm","text":"LinearAlgebra.norm(x::Waveform;p::Real=1)\n\nDefines the norm function on Waveform type.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.append","page":"Waveforms","title":"BloqadeWaveforms.append","text":"append(wf::Waveform, wfs::Waveform...)\n\nAppend other waveforms to wf on time axis.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.smooth","page":"Waveforms","title":"BloqadeWaveforms.smooth","text":"smooth([kernel=Kernel.gaussian], f; edge_pad_size::Int=length(f.clocks))\n\nKernel smoother function for piece-wise linear function/waveform via weighted moving average method.\n\nArguments\n\nkernel: the kernel function, default is Kernels.gaussian.\nf: a Union{PiecewiseLinear, PiecewiseConstant} function or a Waveform{<:Union{PiecewiseLinear, PiecewiseConstant}}.\n\nKeyword Arguments\n\nkernel_radius: radius of the kernel.\nedge_pad_size: the size of edge padding.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.smooth-Tuple{Any, Vector, Vector, Real}","page":"Waveforms","title":"BloqadeWaveforms.smooth","text":"smooth(kernel, Xi::Vector, Yi::Vector, kernel_radius::Real)\n\nKernel smoother function via weighted moving average method. See also Kernel Smoother.\n\nTheory\n\nKernel function smoothing is a technique to define a smooth function f mathcalR^p  mathbfR from a set of discrete points by weighted averaging the neighboring points. It can be written as the following equation.\n\nY(X) = sum_i K(X X_i) Y_i  sum_i K(X X_i)\n\nwhere Y(X) is the smooth function by calculating the moving average of known data points X_i and Y_i. K is the kernel function, where K(fracX - X_ih_λ) decrease when the Euclidean norm X - X_i increase, h_λ is a parameter controls the radius of the kernel.\n\nAvailable Kernels\n\nThe following kernel functions are available via the Kernels module:\n\nKernels.biweight; Kernels.cosine; Kernels.gaussian; Kernels.logistic; Kernels.parabolic; Kernels.sigmoid; Kernels.triangle; Kernels.tricube; Kernels.triweight; Kernels.uniform\n\nArguments\n\nkernel: a Julia function that has method kernel(t::Real).\nXi::Vector: a list of inputs X_i.\nYi::Vector: a list of outputs Y_i.\nkernel_radius::Real: the radius of the kernel.\n\n\n\n\n\n","category":"method"},{"location":"waveform/#BloqadeWaveforms.Kernels.biweight","page":"Waveforms","title":"BloqadeWaveforms.Kernels.biweight","text":"biweight(t)\n\nBiweight kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac1516(1 - t^2)^2\n\nwhen t  1. Otherwise, f(t) = 0.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.cosine","page":"Waveforms","title":"BloqadeWaveforms.Kernels.cosine","text":"cosine(t)\n\nCosine kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = fracπ4cosleft(fracπ2tright)\n\nwhen t  1. Otherwise, f(t) = 0.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.gaussian","page":"Waveforms","title":"BloqadeWaveforms.Kernels.gaussian","text":"gaussian(t)\n\nGaussian kernel function for smoothing waveforms via smooth.\n\nThe function is defined as:\n\nf(t) = frac1sqrt2πe^-frac12t^2\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.logistic","page":"Waveforms","title":"BloqadeWaveforms.Kernels.logistic","text":"logistic(t)\n\nLogistic kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac1e^t + 2 + e^-t\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.parabolic","page":"Waveforms","title":"BloqadeWaveforms.Kernels.parabolic","text":"parabolic(t)\n\nParabolic kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac34(1 - t^2)\n\nwhen t  1. Otherwise, f(t) = 0.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.sigmoid","page":"Waveforms","title":"BloqadeWaveforms.Kernels.sigmoid","text":"simgoid(t)\n\nSigmoid kernel funciton for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac2pi (e^t + e^-t)\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.triangle","page":"Waveforms","title":"BloqadeWaveforms.Kernels.triangle","text":"triangle(t)\n\nTriangle kernel function for smoothing waveforms via smooth.\n\nThe function is defined as:\n\nf(t) = 1 - t\n\nwhere t  1. Otherwise, f(t) = 0\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.tricube","page":"Waveforms","title":"BloqadeWaveforms.Kernels.tricube","text":"tricube(t)\n\nTricube kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac7081(1 - t^3)^3\n\nwhen t  1. Otherwise, f(t) = 0.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.triweight","page":"Waveforms","title":"BloqadeWaveforms.Kernels.triweight","text":"triweight(t)\n\nBiweight kernel function for smoothing waveforms via smooth\n\nThe function is defined as:\n\nf(t) = frac3532(1 - t^2)^3\n\nwhen t  1. Otherwise, f(t) = 0.\n\n\n\n\n\n","category":"function"},{"location":"waveform/#BloqadeWaveforms.Kernels.uniform","page":"Waveforms","title":"BloqadeWaveforms.Kernels.uniform","text":"uniform(t::T) where {T}\n\nUniform kernel function for smoothing waveforms via smooth\n\nThe function returns 1 for t  1. Otherwise, it returns 0.\n\n\n\n\n\n","category":"function"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"CurrentModule = Bloqade","category":"page"},{"location":"emulation/#emulation","page":"Emulation","title":"Emulation of the Quantum Dynamics","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"After we create the Rydberg Hamiltonian and the register for storing the quantum information, we can  simulate the quantum many-body dynamics. The coherent dynamics of the system is governed by the Schrödinger equation. The emulation interface of Bloqade is designed in a   define-and-run style. With Bloqade, we have two major types of emulation:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"ODE-solver based emulation for most of the problems.\nKrylov based emulation for piecewise constant problems or QAOA-like problem.","category":"page"},{"location":"emulation/#Define-the-ODE-Emulation-Problem","page":"Emulation","title":"Define the ODE Emulation Problem","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"ODE solvers are the major backend we use for most of the exact quantum  dynamics simulation. The ODE solvers for Bloqade are powered by the DifferentialEquations.jl package.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"Bloqade provides a special problem type SchrodingerProblem that supports most of the  integrator interface of DifferentialEquations, and most of the solver options. Here, we introduce some common use cases of the integrator and solver options. For more advanced usage of the solvers, please refer to the above link.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"BloqadeODE.SchrodingerProblem","category":"page"},{"location":"emulation/#BloqadeODE.SchrodingerProblem","page":"Emulation","title":"BloqadeODE.SchrodingerProblem","text":"struct SchrodingerProblem\nSchrodingerProblem(reg, tspan, hamiltonian; kw...)\n\nDefine a Schrodinger equation problem that uses ODE solver from OrdinaryDiffEq to solve the dynamics.\n\nArguments\n\nregister: required, the evolution problem register, can be a SubspaceArrayReg or an ArrayReg   from Yao.\ntspan: required, a (start, stop) tuple or a single number t, the single value form t is equivalent   to (zero(t), t).\nhamiltonian: required, the evolution hamiltonian, can be created via rydberg_h.\n\nCommon Keyword Arguments\n\nalgo: optional, algorithm to use, this only works for the emulate! interface.   for solve or integrator interface, one will need to specify the algorithm explicitly.\nprogress: print progress bar or not, this may effect the performance when problem scale is small, default is true.\nprogress_steps: steps to update the progress bar, default is 5.\nreltol: relative tolerance, default is 1e-8.\nabstol: absolute tolerance, default is 1e-8.\n\nFurther References\n\nFor more ODE options, please refer to Common Solver Options. The SchrodingerProblem type supports most of the standard DiffEq problem interface.\n\n\n\n\n\n","category":"type"},{"location":"emulation/#Run-ODE-based-Emulation","page":"Emulation","title":"Run ODE-based Emulation","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"To run the emulation, you need to define the exact evolution and solver you would like to run with via BloqadeODE.SchrodingerProblem, and then feed the corresponding object to the emulate! function:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"emulate!","category":"page"},{"location":"emulation/#BloqadeExpr.emulate!","page":"Emulation","title":"BloqadeExpr.emulate!","text":"emulate!(prob)\n\nRun emulation of a given problem.\n\n\n\n\n\n","category":"function"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"For example, we can simulate the quantum dynamics of a time-dependent Hamiltonian with the following:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"using Bloqade\natoms = generate_sites(SquareLattice(), 3, 3; scale=5.1);\nclocks = [0.0, 0.1, 0.2, 0.3, 0.4];\nwf = piecewise_constant(;clocks, values=2π*[1.0, 2.0, 3.0, 4.0]);\nh = rydberg_h(atoms; Δ=2π*2.0, Ω=wf); # create the Hamiltonian \nreg = zero_state(length(atoms)); # create fullspace register\nev = SchrodingerProblem(reg, 0.3, h) # the second input is the total time\nemulate!(ev)","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"With emulate!, the quantum state stored in reg has been updated to the state after the time evolution. ","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"If you want to do operations during the real-time evolution, such as measuring observables, you can instead using the integrator interface with for loop and with TimeChoiceIterator on your desired clocks, e.g.:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"integrator = init(ev, Vern8())\nfor _ in TimeChoiceIterator(integrator, [0.1, 0.25])\n    ev.reg # state at selected time\n    @show measure(ev.reg)[] # measure the state at each time\nend","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"You can use any function on the reg object. For calculating observables,  please see the Registers and Observables section.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"tip: Tip\nRemember to make sure your operation does not mutate your state so that it won't affect the evolution itself, since the entire time evolution is simulated by mutating the state vector stored in reg. Avoid using any function that has a ! in its name (indicating that it mutates its arguments per Julia convention) on the register info.reg unless you are certain about what you are doing.","category":"page"},{"location":"emulation/#Choose-an-ODE-Solver","page":"Emulation","title":"Choose an ODE Solver","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"One of the most powerful tools of the Julia ecosystem is the DifferentialEquations ecosystem that implements many different solvers. These solvers have different advantages and trade-offs. Since simulating a quantum many-body Schrödinger equation has some special properties compared to a general ODE problem, we will discuss some general heuristics in this section on how to choose a good ODE solver and how to check if your simulation converges. Because the stiffness of the many-body Schrödinger equation is unknown, we will opt instead to use non-stiff problem algorithms or auto-switching algorithms.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"For most of the cases, one can use the VCABM solver for a large system simulation. However, this method requires more memory, which can be a bottleneck with GPUs.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"The Vern family is another set of solvers that is good for the many-body Schrödinger equation, such as Vern6, Vern7, and Vern8. They also have relatively good memory usage when utilizing GPUs.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"For a more detailed list of solvers, please refer to DifferentialEquations:Full List of Solvers. For more detailed explanation on ODE solvers, please refer to DifferentialEquations:Recommended Methods.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"tip: Default Solver and Auto-Switching\nBloqade uses the Dormand-Prince solver (DP8) by default for all SchrodingerProblem instances. For dealing with potentially stiff equations one can take advantage of DifferentialEquations auto-switching algorithms where a default solver can be supplied but upon encountering stiffness can switch to a specific solver. A recommended combination for Bloqade is AutoVern9(Rodas5) although other combinations are possible (see DifferentialEquations: Pre-Built Stiffness Detecting and Auto-Switching Algorithms)","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"If you are familiar with MATLAB or Python, you may wish to compare the same methods that you use in MATLAB or Python; you can find the corresponding solvers in Julia in DifferentialEquations:Translations from MATLAB/Python/R.","category":"page"},{"location":"emulation/#Adaptive-Steps-in-ODE-Solvers","page":"Emulation","title":"Adaptive Steps in ODE Solvers","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"Our ODE solvers use adaptive steps by default. It provides a significant speedup compared to standard fixed-step methods (see our benchmark here). However, if one expects to retrieve the results during the time evolution, e.g., plotting Rydberg densities with the evolution time, fixed-step methods are sometimes  preferred.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"More specifically, when the adaptive steps are turned on the time steps can become large. However, if one is interested in measuring some observables in smaller time steps, then the adaptive step method will not produce accurate results for the finer time step, instead outputting results at the specific adaptive steps.  In this situation, it's better to use fixed-step methods at the times where the observables are measured.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"One can use the code below to turn off the adaptive steps when setting up the SchrodingerProblem:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"atoms = generate_sites(SquareLattice(), 3, 3; scale=5.1);\nh = rydberg_h(atoms; Δ=2π*2.0, Ω= 2π*1.0); # create the Hamiltonian \nreg = zero_state(length(atoms)); \nprob = SchrodingerProblem(reg, 3.0, h, adaptive = false, dt=1e-3);","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"Here, we've specified the fixed time step as dt = 1e-3. If one only wants the final state of the evolution or if the intervals between each chosen time are much larger than the maximum step size, then adaptive steps are preferred.","category":"page"},{"location":"emulation/#Define-the-Krylov-Emulation-Problem","page":"Emulation","title":"Define the Krylov Emulation Problem","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"The Krylov-based method expects time-independent Hamiltonians. One can define such a time evolution via a KrylovEvolution object.","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"KrylovEvolution","category":"page"},{"location":"emulation/#BloqadeKrylov.KrylovEvolution","page":"Emulation","title":"BloqadeKrylov.KrylovEvolution","text":"struct KrylovEvolution\nKrylovEvolution(reg::AbstractRegister, clocks, h; kw...)\n\nCreate a KrylovEvolution object that describes a time evolution using Krylov subspace methods.\n\nArguments\n\nreg: a register, should be a subtype of AbstractRegister.\nclocks: the clocks of this time evolution at each step.\nh: a hamiltonian expression.\n\nKeyword Arguments\n\nprogress: show progress bar, default is false.\nprogress_name: progress bar name, default is \"emulating\".\nnormalize_step: normalize the state every normalize_step.\nnormalize_finally: wether normalize the state in the end of evolution, default is true.\ntol: tolerance of the Krylov method, default is 1e-7\n\nExamples\n\nThe following is the simplest way of using KrylovEvolution via emulate!. For more advanced usage, please refer to documentation page Emulation.\n\njulia> using Bloqade\n\njulia> r = zero_state(5)\nArrayReg{2, ComplexF64, Array...}\n    active qudits: 5/5\n    nlevel: 2\n\njulia> atoms = [(i, ) for i in 1:5]\n5-element Vector{Tuple{Int64}}:\n (1,)\n (2,)\n (3,)\n (4,)\n (5,)\n\njulia> h = rydberg_h(atoms; Ω=sin)\nnqubits: 5\n+\n├─ [+] ∑ 5.42e6/|x_i-x_j|^6 n_i n_j\n└─ [+] Ω(t) ⋅ ∑ σ^x_i\n\n\njulia> prob = KrylovEvolution(r, 0.0:1e-2:0.1, h);\n\njulia> emulate!(prob); # run the emulation\n\n\n\n\n\n","category":"type"},{"location":"emulation/#Run-Krylov-based-Emulation","page":"Emulation","title":"Run Krylov-based Emulation","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"We can run the Krylov-based emulation in a similar way using emulate!:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"emulate!(KrylovEvolution(reg, clocks, h))","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"However, as its name suggests, the Krylov-based emulation is not a standard ODE problem that DiffEq  supports. Thus, it does not support the ODE problem interface, but is more like a gate-based interface. For example, the object KrylovEvolution is iterable:","category":"page"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"for (step, reg, duration) in KrylovEvolution(reg, clocks, h)\n    @show step\n    @show reg\n    @show duration\n    println(\"==========\")\nend","category":"page"},{"location":"emulation/#Krylov-vs-ODE-Solvers","page":"Emulation","title":"Krylov vs ODE Solvers","text":"","category":"section"},{"location":"emulation/","page":"Emulation","title":"Emulation","text":"The KrylovEvolution uses the Krylov subspace methods to simulate the time evolution of time-independent operators exp(iDelta t_i H), where Delta t_i is the duration of time-independent Hamiltonian H at time t. This method is more efficient when the evolution itself is a discrete evolution, e.g. in QAOA and with piecewise_constant waveforms. As for other cases, ODE solvers are usually more efficient than KrylovEvolution.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"CurrentModule = Bloqade","category":"page"},{"location":"3-level/#Hamiltonian-in-a-3-level-system","page":"3-Level Support and Quantum Gates","title":"Hamiltonian in a 3-level system","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The Hamiltonian in a 3-level system is similar to a 2-level system. It also  consists of Rabi terms, detuning terms, and Rydberg interaction between  atoms but with more levels. The convention we used for a 3-level system  Hamiltonian is ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"i hbar dfracpartialpartial t  psi rangle = hatmathcalH(t)  psi rangle  \n\nbeginaligned \n    fracmathcalH(t)hbar =  sum_i fracOmega_i^mathrmhf(t)2left(e^i phi_i^mathrmhf(t)0_iranglelangle 1_i+e^-i phi_i^mathrmhf(t) 1_iranglelangle 0_iright)-sum_i Delta_i^mathrmhf(t)1_iranglelangle 1_i  \n     +sum_i fracOmega_i^mathrmr(t)2left(e^i phi_i^mathrmr(t)1_iranglelangle r_i+e^-i phi_i^mathrmr(t) r_iranglelangle 1_iright)-sum_ileftDelta_i^mathrmhf(t)+Delta_i^mathrmr(t)rightleftr_irightrangleleftlangle r_iright  \n     +sum_ij V_i jleftr_irightrangleleftlangle r_iotimes r_jrightrangleleftlangle r_jright \nendaligned","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Here, 0rangle and 1rangle represent two different hyperfine levels  in a atom. And rrangle represent the Rydberg level we use for entangling  different atoms. There are two seperated pulses: the first one couples two  hyperfine levels 0rangle and 1rangle and the second couples the  hyperfine level 1rangle and the Rydberg level rrangle. We use two  different superscripts mathrmhf and mathrmr to indicate them  respectively.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"With ArrayReg in YaoArrayRegister, we use 0rangle, 1rangle, and 2rangle to  represent 0rangle, 1rangle, and rrangle, respectively. ","category":"page"},{"location":"3-level/#Interface-for-the-3-level-Hamiltonian","page":"3-Level Support and Quantum Gates","title":"Interface for the 3-level Hamiltonian","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The interface for defining a 3-level Rydberg Hamiltonian is rydberg_h_3. It is similar as the  2-level interface rydberg_h. The only difference is that, in 3-level you need to specify the Rabi term  (Omega phi) and the detunning term (Delta) for both hyperfine coupling  (Omega^mathrmhf phi^mathrmhf Delta^mathrmhf) and rydberg coupling  (Omega^mathrmr phi^mathrmr Delta^mathrmr). And both time-dependent and site-dependent waveforms are supported for each parameter (see Hamiltonians for details about defining different waveforms).","category":"page"},{"location":"3-level/#Pulse-sequences-and-quantum-gates","page":"3-Level Support and Quantum Gates","title":"Pulse sequences and quantum gates","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"We can use two hyperfine levels to represent a qubit. In this case  single-qubit gates can be directly obtained using hyperfine coupling in the  3-level system, and two-qubit gates can also be implemented by the coupling  between 1rangle and rrangle with the assist of Rydberg interation  between different Rydberg atoms. In general, any n-qubit unitary can be  approximated by a 3-level Rydberg pulse sequence. Hence, the 3-level Rydberg  system is universal for qubit quantum computation.","category":"page"},{"location":"3-level/#Single-qubit-gates","page":"3-Level Support and Quantum Gates","title":"Single-qubit gates","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Here is an example for applying a Pauli X gate (acting on hyperfine levels  0rangle and 1rangle) to each site. Notes that single qubit gates  could be parallelize, that is implementing the same single qubit gate on  different sites with only one pulse.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"using Bloqade\natoms = generate_sites(ChainLattice(), 5, scale=5)\nh = rydberg_h_3(atoms; Ω_hf = 1.0)\nreg = zero_state(5; nlevel = 3); # the initial state is an all-zero state\nprob = KrylovEvolution(reg, 0.0:1e-2:pi, h); # an X gate is a π-pulse\nemulate!(prob);\nmeasure(reg) # the final state is an all-one state","category":"page"},{"location":"3-level/#Two-qubit-gates","page":"3-Level Support and Quantum Gates","title":"Two-qubit gates","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Two-qubit gates can be implemented with the assist of Rydberg interaction  between two atoms. Here we give two example of different implementation of  the CZ-gate using the 3-level Rydberg system. ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"5-pulse CZ-gate\nThe Levine-Pichler gate","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Notes that the gate set of arbitrary single-qubit gate + CZ-gate is universal.  Hence, 3-level Rydberg system is universal for quantum computing.","category":"page"},{"location":"3-level/#pulse-CZ-gate","page":"3-Level Support and Quantum Gates","title":"5-pulse CZ-gate","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Suppose we have two atoms which are cloesed to each other so that there is  Rydberg blockade between them. And the first atom is the controlling qubit  while the second atom is the target qubit. ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"using Bloqade\natoms = generate_sites(ChainLattice(), 2; scale = 4)","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"There are 5 steps in total for the CZ-gate. ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Apply an X-gate (hyperfine π-pulse) on each qubit to flip 0rangle and 1rangle\nApply an Rydberg π-pulse on the controlling qubit\nApply an Rydberg 2π-pulse on the target qubit\nApply an Rydberg π-pulse on the controlling qubit\nApply an X-gate (hyperfine π-pulse) on each qubit to flip 0rangle and 1rangle","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"To understand the above steps, let us consider two different cases when the  controlling qubit starts with 0rangle and 1rangle.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"If the controlling qubit starts with 0rangle, then after step 2 it will be ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"excited into the Rydberg state rrangle. Because of the Rydberg blockade, the  pulse in step 3 act trivially but a global phase -1 onto the target qubit.  This means nothing changes but a global phase -1 if controlling qubit is 0rangle.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"If the controlling qubit is started with 1rangle, then after step 2 it will ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"become the hyperfine state 0rangle which will not affect the pulse in step 3.  In this case, the 2π-pulse will cause a phase -1 only if the target qubit  is 1rangle after step 2 (which means the target qubit starts with 0rangle). This  means a Z-gate upto a global phase -1 is applied on the target qubit when  the controlling qubit is 1rangle.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The following codes implement the above 5-steps of the CZ-gate.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"using Bloqade\nusing Yao\natoms = generate_sites(ChainLattice(), 2; scale = 4)\nst = zeros(ComplexF64, 9); st[[1, 2, 4, 5]] .= 1/2; # [1, 2, 4, 5] are indices for hyperfine states\nreg = arrayreg(st; nlevel = 3)  # initialize the state with 1/2 (|00⟩ + |01⟩ + |10⟩ + |11⟩) \nhs = [\n    rydberg_h_3(atoms; Ω_hf = [1.0, 1.0]),  # hyperfine pulse for step 1\n    rydberg_h_3(atoms; Ω_r = [1.0, 0.0]),   # Rydberg pulse for step 2\n    rydberg_h_3(atoms; Ω_r = [0.0, 1.0]),   # Rydberg pulse for step 3\n    rydberg_h_3(atoms; Ω_r = [1.0, 0.0]),   # Rydberg pulse for step 4\n    rydberg_h_3(atoms; Ω_hf = [1.0, 1.0]),  # hyperfine pulse for step 5\n]   # Hamiltonians for step 1-5\nts = [π, π, 2π, π, π]   # pulse time for step 1-5\nstep = 1e-3; # Krylov time step\nfor i = 1:5\n    prob = KrylovEvolution(reg, 0.0:step:ts[i], hs[i])\n    emulate!(prob)\nend\nstate(reg)[1, 2, 4, 5]  # equivalent to 1/2 (|00⟩ + |01⟩ + |10⟩ - |11⟩) ","category":"page"},{"location":"3-level/#The-Levine-Pichler-gate","page":"3-Level Support and Quantum Gates","title":"The Levine-Pichler gate","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"A more efficient way to implementing the CZ-gate is using the  Levine-Pichler gate.  Comparing to the above 5-pulse CZ-gate, the Levine-Pichler gate uses shorter  sequence and less time. ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Consider two atoms which are closed to each other. If we apply a pulse that  couples 1rangle and rrangle with the Rabi frequency  Omega^mathrmr, detunning Delta^mathrmr, and duration  tau, then the dynamics of four hyperfine state are different.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"00rangle will not change during the pulse\n01rangle (10rangle) will oscillate between 01rangle and 0rrangle (10rangle and r0rangle) with a frequency Omega^mathrmr\n11rangle will oscillate between 11rangle and wrangle = frac12left( 1rrangle + r1rangle right) with a frequency sqrt2Omega^mathrmr (this is an approximation when the Rydberg blockade is strong enough such that the population of rrrangle could be ignored)","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The Levine-Pichler gate consists of two global pulses. Together with a global hyperfine pulse for rotation-Z gates, we will get a CZ-gate.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"A global Rydberg pulse with parameters fracDelta^mathrmrOmega^mathrmr approx 0377371, phi^mathrmr = 0, Omega^mathrmrtau approx 429268\nA global Rydberg pulse with parameters fracDelta^mathrmrOmega^mathrmr approx 0377371, phi^mathrmr approx 390242, Omega^mathrmrtau approx 429268\nA global hyperfine pulse with parameters Delta^mathrmrtau = 2pi - alpha approx 390242, Omega^mathrmr = phi^mathrmr = 0","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The first pulse completes a full cycle of oscillation for 11rangle while it  does not complete a cycle for 01rangle and 10rangle. The only difference  between the first and the second pulse is the parameter phi^mathrmr. This  difference causes a change of the rotation axis on the Bloch sphere, such that the  second pulse completes another full cycle of oscillation for 11rangle while it  also brings back 01rangle and 10rangle. After these two pulses has a unitary representation ","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"beginpmatrix\n1    \n e^ialpha   \n  e^ialpha  \n   e^i(2alpha-pi)\nendpmatrix","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"which is a CZ-gate with single qubit rotation gates R_Z(alpha) on each qubit. The following picture (Fig 2 c) in the original paper)  demonstrates the process of the first pulse and the second pulse. (Image: )","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Here are codes for the Levine-Pichler gate.","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"using Bloqade\nusing Yao\nst = zeros(ComplexF64, 9); st[[1, 2, 4, 5]] .= 1/2; # [1, 2, 4, 5] are indices for hyperfine states\nreg = arrayreg(st; nlevel = 3); # initialize the state with 1/2 (|00⟩ + |01⟩ + |10⟩ + |11⟩) \natoms = generate_sites(ChainLattice(), 2; scale = 4);\nΩ_r = 1.0; ϕ_r = 3.90242; Δ_r = 0.377371*Ω_r;   # define parameters\nτ = 4.29268/Ω_r; α = 2.38076;   # define pulse durations\nstep = 1e-3;    # Krylov step\nhs = [\n    rydberg_h_3(atoms; Ω_r = Ω_r, Δ_r = Δ_r),   # global Rydberg pulse for step 1\n    rydberg_h_3(atoms; Ω_r = Ω_r, ϕ_r = ϕ_r, Δ_r = Δ_r),    # global Rydberg pulse for step 2\n    rydberg_h_3(atoms; Δ_hf = 1.0), # global hyperfine pulse for R_Z-gate in step 3\n]\nts = [τ, τ, 2π - α]\nfor i = 1:3 # simulation\n    prob = KrylovEvolution(reg, 0:step:ts[i], hs[i])\n    emulate!(prob)\nend\nstate(reg)[[1, 2, 4, 5]]  # desired state 1/2 (|00⟩ + |01⟩ + |10⟩ - |11⟩) ","category":"page"},{"location":"3-level/#Predefined-pulse-sequences-for-different-quantum-gates","page":"3-Level Support and Quantum Gates","title":"Predefined pulse sequences for different quantum gates","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"Instead of defining pulse sequences manually, we provide lots of predefined pulse  sequences for basic quantum gates. For more details, please refer to the package  BloqadeGates.","category":"page"},{"location":"3-level/#References","page":"3-Level Support and Quantum Gates","title":"References","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The 3-level Rydberg Hamiltonian:","category":"page"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"rydberg_h_3","category":"page"},{"location":"3-level/#BloqadeExpr.rydberg_h_3","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.rydberg_h_3","text":"rydberg_h_3(atoms; [C=2π * 862690 * MHz*µm^6, \n    Ω_hf = nothing, ϕ_hf = nothing, Δ_hf = nothing, \n    Ω_r = nothing, ϕ_r = nothing, Δ_r = nothing])\n\nCreate a 3-level Rydberg Hamiltonian\n\nsum_ij fracCx_i - x_j^6 n^r_i n^r_j + \nsum_i leftfracΩ^mathrmhf2 (e^iϕ^mathrmhf01 + e^-iϕ^mathrmhf10) - Δ^mathrmhf n^1_i + \nfracΩ^mathrmr2 (e^iϕ^mathrmr1r + e^-iϕ^mathrmrr1) - (Δ^mathrmhf + Δ^mathrmr) n^mathrmr_i right\n\nshorthand for\n\nRydInteract(C, atoms; nlevel = 3) + \n    SumOfXPhase_01(length(atoms), Ω_hf/2, ϕ_hf) - SumOfN(length(atoms), Δ_hf) +\n    SumOfXPhase_1r(length(atoms), Ω_r/2, ϕ_r) - SumOfN(length(atoms), Δ_r + Δ_hf)\n\n\n\n\n\n","category":"function"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"The following operators only for 3-level system are also supported by Bloqade.","category":"page"},{"location":"3-level/#Single-site-operators","page":"3-Level Support and Quantum Gates","title":"Single site operators","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"X_01\nX_1r\nN_1\nN_r\nPu_01\nPu_1r\nPd_01\nPd_1r\nBloqade.BloqadeExpr.Z_01\nBloqade.BloqadeExpr.Z_1r\nXPhase_01\nXPhase_1r","category":"page"},{"location":"3-level/#BloqadeExpr.X_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.X_01","text":"X_01\nOpX_01 <: YaoBlocks.ConstantGate{1, 3}\n\nPauli X operator act on |0⟩ and |1⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nsigma^xmathrmhf = \nbeginpmatrix\n0  1  0 \n1  0  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.X_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.X_1r","text":"X_1r\nOpX_1r <: YaoBlocks.ConstantGate{1, 3}\n\nPauli X operator act on |1⟩ and |r⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nsigma^xmathrmr = \nbeginpmatrix\n0  0  0 \n0  0  1 \n0  1  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.N_1","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.N_1","text":"N_1\nOpN_1 <: YaoBlocks.ConstantGate{1, 3}\n\nProjection operator onto |1⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nn^1 = 11 = \nbeginpmatrix\n0  0  0 \n0  1  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.N_r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.N_r","text":"N_r\nOpN_r <: YaoBlocks.ConstantGate{1, 3}\n\nProjection operator onto |r⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nn^mathrmr = rr = \nbeginpmatrix\n0  0  0 \n0  0  0 \n0  0  1\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Pu_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Pu_01","text":"Pu_01\nOpPu_01 <: YaoBlocks.ConstantGate{1, 3}\n\nMatrix expression:\n\nmathrmPu^mathrmhf = \nbeginpmatrix\n0  1  0 \n0  0  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Pu_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Pu_1r","text":"Pu_1r\nOpPu_1r <: YaoBlocks.ConstantGate{1, 3}\n\nMatrix expression:\n\nmathrmPu^mathrmr = \nbeginpmatrix\n0  0  0 \n0  0  1 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Pd_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Pd_01","text":"Pd_01\nOpPd_01 <: YaoBlocks.ConstantGate{1, 3}\n\nMatrix expression:\n\nmathrmPd^mathrmhf = \nbeginpmatrix\n0  0  0 \n1  0  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Pd_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Pd_1r","text":"Pd_1r\nOpPd_1r <: YaoBlocks.ConstantGate{1, 3}\n\nMatrix expression:\n\nmathrmPd^mathrmr = \nbeginpmatrix\n0  0  0 \n0  0  0 \n0  1  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Z_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Z_01","text":"Z_01\nOpZ_01 <: YaoBlocks.ConstantGate{1, 3}\n\nPauli Z operator act on |0⟩ and |1⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nsigma^zmathrmhf = \nbeginpmatrix\n1  0  0 \n0  -1  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.Z_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.Z_1r","text":"Z_1r\nOpZ_1r <: YaoBlocks.ConstantGate{1, 3}\n\nPauli Z operator act on |1⟩ and |r⟩ for 3-level Rydberg system.\n\nMatrix expression:\n\nsigma^zmathrmr = \nbeginpmatrix\n0  0  0 \n0  1  0 \n0  0  -1\nendpmatrix\n\n\n\n\n\n","category":"constant"},{"location":"3-level/#BloqadeExpr.XPhase_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.XPhase_01","text":"XPhase_01{T} <: PrimitiveBlock{3}\n\nXPhase operator act on |0⟩ and |1⟩ for 3-level Rydberg system.\n\ne^ϕ  i 01 + e^-ϕ  i 10 = \nbeginpmatrix\n0  e^ϕ  im  0 \ne^-ϕ  im  0  0 \n0  0  0\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.XPhase_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.XPhase_1r","text":"XPhase_1r{T} <: PrimitiveBlock{3}\n\nXPhase operator act on |1⟩ and |r⟩ for 3-level Rydberg system.\n\ne^ϕ  i 1r + e^-ϕ  i r1 = \nbeginpmatrix\n0  0  0 \n0  0  e^ϕ  im \n0  e^-ϕ  im  0\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"3-level/#Sum-of-operators","page":"3-Level Support and Quantum Gates","title":"Sum of operators","text":"","category":"section"},{"location":"3-level/","page":"3-Level Support and Quantum Gates","title":"3-Level Support and Quantum Gates","text":"SumOfX_01\nSumOfX_1r\nSumOfXPhase_01\nSumOfXPhase_1r\nSumOfN_1\nSumOfN_r\nSumOfZ_01\nSumOfZ_1r","category":"page"},{"location":"3-level/#BloqadeExpr.SumOfX_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfX_01","text":"struct SumOfX_01 <: AbstractTerm{3}\nSumOfX_01(nsites, Ω)\n\nTerm for sum of X_01 operators.\n\nExpression\n\nsum_i Ω σ^xmathrmhf_i\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfX_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfX_1r","text":"struct SumOfX_1r <: AbstractTerm{3}\nSumOfX_1r(nsites, Ω)\n\nTerm for sum of X_1r operators.\n\nExpression\n\nsum_i Ω σ^xmathrmr_i\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfXPhase_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfXPhase_01","text":"struct SumOfXPhase_01 <: AbstractTerm{3}\nSumOfXPhase_01(nsites, Ω, ϕ)\n\nTerm for sum of XPhase_01 operators.\n\nExpression\n\nsum_i Ω  (e^ϕ  i 01 + e^-ϕ  i 10)\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfXPhase_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfXPhase_1r","text":"struct SumOfXPhase_1r <: AbstractTerm{3}\nSumOfXPhase_1r(nsites, Ω, ϕ)\n\nTerm for sum of XPhase_1r operators.\n\nExpression\n\nsum_i Ω  (e^ϕ  i 1r + e^-ϕ  i r1)\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfN_1","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfN_1","text":"struct SumOfN_1 <: AbstractTerm{3}\nSumOfN_1(;nsites[, Δ=1])\n\nSum of N_1 operators. \n\nExpression\n\nsum_i Δ  n^r_i\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfN_r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfN_r","text":"struct SumOfN_r <: AbstractTerm{3}\nSumOfN_1(;nsites[, Δ=1])\n\nSum of N_r operators. \n\nExpression\n\nsum_i Δ  n^r_i\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfZ_01","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfZ_01","text":"struct SumOfZ_01 <: AbstractTerm{2}\nSumOfZ_01(;nsites, Δ=1)\n\nSum of Pauli Z_01 operators.\n\nExpression\n\nsum_i Δ  σ^zmathrmhf_i\n\n\n\n\n\n","category":"type"},{"location":"3-level/#BloqadeExpr.SumOfZ_1r","page":"3-Level Support and Quantum Gates","title":"BloqadeExpr.SumOfZ_1r","text":"struct SumOfZ_1r <: AbstractTerm{2}\nSumOfZ_1r(;nsites, Δ=1)\n\nSum of Pauli Z_1r operators.\n\nExpression\n\nsum_i Δ  σ^zmathrmr_i\n\n\n\n\n\n","category":"type"},{"location":"schema/#schema","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"Bloqade contains its own schema used to represent Hamiltonians in an IR (Intermediate Representation) that can then be executed via simulator/hardware as well as converted to and from other formats. Furthermore, tools such as hardware_transform and validate are available to check that user-defined Hamiltonians are capable of being executed on hardware and if not, transform them to be able to do so.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"warning: 3-Level Support\nThe schema and conversion capabilities are currently not available for 3-level Hamiltonians","category":"page"},{"location":"schema/#Transforming-Hamiltonians-to-Hardware-Compatible-Form","page":"Interacting with Neutral Atom Hardware","title":"Transforming Hamiltonians to Hardware Compatible Form","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"We start with creating a hamiltonian:","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"using Bloqade, BloqadeSchema\nΔ = constant(;duration=1.1, value=1.2*2π); \nΩ = linear_ramp(duration=1.1, start_value=0.0, stop_value=2π*1.0); \nϕ = Waveform(t->2.2*2π*sin(t)^2, duration=1.1);\natoms = generate_sites(ChainLattice(), 4, scale=1.0);\nh = rydberg_h(atoms; Δ = Δ, Ω = Ω, ϕ = ϕ)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"To transform the Hamiltonian into something the hardware is capable of supporting, we can pass it through hardware_transform.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"warning: Limitations on Transformations\nWhile hardware_transform may attempt to adjust atom positions so that they conform to hardware position resolution capabilities, the function will NOT move atoms such that they satisfy minimum spacing constraints. The validate function presented later will explicitly indicate which atoms are in violation of the position constraints but will require the user to make the necessary changes.Furthermore, hardware_transform requires that all waveforms the Hamiltonian could use (Rabi frequency, detuning, and phase) are explicitly specified even if they are not used. To indicate non-use of a waveform, BloqadeWaveforms.constant should be used with the value set to zero.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"hardware_transform accepts information from get_device_capabilities (already called as a default argument) which provides information on the machine's capabilities and returns the transformed hamiltonian along with additional information regarding the difference (error) between the originally defined lattice geometry and waveforms versus their transformed versions through a HardwareTransformInfo instance.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"transformed_h, transform_info = hardware_transform(h);\ntransformed_h\ntransform_info\ndump(transform_info)","category":"page"},{"location":"schema/#Validating-Hamiltonians","page":"Interacting with Neutral Atom Hardware","title":"Validating Hamiltonians","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"We can see if this hamiltonian or any other hamiltonian we create will run on hardware with the help of validate. ","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"validate(transformed_h)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"In this case, the waveforms have been successfully transformed but there are still some issues with the atom positions. We can rescale their positions, regenerate the Hamiltonian and validate again to make sure the changes are correct.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"atoms = generate_sites(ChainLattice(), 4, scale=4.0);\nfixed_h = rydberg_h(atoms; Δ = Δ, Ω = Ω, ϕ = ϕ) # Keep older waveforms with new atom geometry\ntransformed_h, _ = hardware_transform(fixed_h)\nvalidate(transformed_h)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"No violations are present meaning the new Hamiltonian has passed validation and can now be executed on hardware.","category":"page"},{"location":"schema/#Converting-Between-Formats","page":"Interacting with Neutral Atom Hardware","title":"Converting Between Formats","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"You can convert the Hamiltonian to and from:","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"JSON Object format\nJulia Dictionary representation\nSchema representation\nAmazon Braket representation","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"to store the Hamiltonian for other applications or execute it in Bloqade/Neutral Atom hardware. ","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"note: Internal Validation\nBy default, all conversion functions invoke validate internally to ensure the Hamiltonian is capable of being run on hardware. If a violation is detected, the Hamiltonian is not converted. For JSON and Schema representations, this can be bypassed by invoking the \"no validation\" variants to_schema_no_validation and to_json_no_validation respectively. This bypass ability is not available for dictionary representation and Amazon Braket representation (which requires the Hamiltonian is already in TaskSpecification format).","category":"page"},{"location":"schema/#Schema","page":"Interacting with Neutral Atom Hardware","title":"Schema","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"to_schema allows you to convert a Hamiltonian to Bloqade's native schema format (TaskSpecification) along with an optional SchemaTranslationParams argument to specify the number of shots and device capabilities for validation.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"h_schema = to_schema(transformed_h)\nfrom_schema(h_schema) # to convert back to Hamiltonian","category":"page"},{"location":"schema/#JSON","page":"Interacting with Neutral Atom Hardware","title":"JSON","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"to_json allows you to convert a Hamiltonian to a JSON Object along with an optional SchemaTranslationParams argument to specify the number of shots and device capabilities for validation.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"h_json = to_json(transformed_h)\nfrom_json(h_json) # to convert back to Hamiltonian","category":"page"},{"location":"schema/#Dictionary","page":"Interacting with Neutral Atom Hardware","title":"Dictionary","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"to_dict allows you to convert a Hamiltonian to a Julia dictionary along with an optional  SchemaTranslationParams argument to specify the number of shots and device capabilities for validation.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"h_dict = to_dict(transformed_h)\nfrom_dict(h_dict) # to convert back to Hamiltonian","category":"page"},{"location":"schema/#Amazon-Braket","page":"Interacting with Neutral Atom Hardware","title":"Amazon Braket","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"to_braket_ahs_ir allows you to convert a TaskSpecification instance into an Braket.IR.AHSProgram that can be submitted for execution on Neutral Atom hardware such as QuEra's 256-qubit Aquila machine via Amazon Braket.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"h_schema = to_schema(transformed_h)\nh_braket = to_braket_ahs_ir(h_schema)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"info: One-Way Conversion\nUnlike the previous conversion functions, from_braket_ahs_ir does not exist meaning it is not possible to obtain a TaskSpecification from a Braket.IR.AHSProgram.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"warning: No Validation\nto_braket_ahs_ir does no validation on its input. It is assumed that the TaskSpecification given to it is already validated. Therefore, it is possible to produce a Braket.IR.AHSProgram that is incapable of being run on Neutral Atom hardware and may cause the Braket API to reject it.","category":"page"},{"location":"schema/#Submitting-to-Amazon-Braket","page":"Interacting with Neutral Atom Hardware","title":"Submitting to Amazon Braket","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"To submit to Neutral Atom hardware on Amazon Braket, Bloqade provides submit_to_braket which can submit BOTH the native Bloqade representation of Hamiltonians (BloqadeExpr.RydbergHamiltonian) as well as the TaskSpecification representation.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"warning: Implicit Transformation and No Validation for TaskSpecification\nFor any BloqadeExpr.RydbergHamiltonian passed in, hardware_transform is invoked to ensure it is compatible with hardware. On the other hand, TaskSpecification types are assumed to already be valid.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"submit_to_braket requires that AWS credentials are given either explicitly through an AWS.AWSCredentials type or by setting the environment variables in the shell running Bloqade with the credentials. The credentials (and instructions for setting environment variables!) can be found through your AWS account's \"Command line or programmatic access\" option.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"Let us try to submit the Hamiltonian we made earlier. We remind ourselves that our Hamiltonian is currently the following:","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"fixed_h","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"(Recall we had to modify the atom positions in order to pass validation!)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"Now we define the number of shots (how many times the Hamiltonian will be executed on hardware) as well as the credentials, allowing submit_to_braket to automatically handle transforming the Hamiltonian to fit within hardware capabilities. By default, submit_to_braket will submit to QuEra's Aquila Neutral Atom hardware and take into account its capabilities for Hamiltonian transformation.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"using AWS\naccess_key_id = \"your_access_key_id\"\nsecret_key = \"your_secret_key\"\ntoken = \"your_token\"\ncredentials = AWS.AWSCredentials(access_key_id, secret_key, token)\ntask = submit_to_braket(fixed_h, 100; credentials=credentials)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"If submission was successful you will see something like ","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"AwsQuantumTask(...)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"in the REPL with the Task ARN (Amazon Resource Name) as a string in the parentheses.","category":"page"},{"location":"schema/#Inspecting-Results-from-Braket","page":"Interacting with Neutral Atom Hardware","title":"Inspecting Results from Braket","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"To see the status of our task we can use state from the Braket.jl package.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"using Braket\nBraket.state(task)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"state can return a String that is either: \"CANCELLED\", \"FAILED\", \"COMPLETED\", \"QUEUED\", or \"RUNNING\".","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"To obtain results, the result function from Braket.jl can be used","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"result = Braket.result(task)","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"info: Braket.result is Blocking\nPer the docstring for result, the function is BLOCKING \"until a result is available, in which case the result is returned, or the task enters a terminal state without a result (\"FAILED\" or \"CANCELLED\")...\".","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"To obtain the raw measurements (pre- and post-Hamiltonian application) of the atoms, the get_measurements function in Braket.jl can be used.","category":"page"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"Braket.get_measurements(result)","category":"page"},{"location":"schema/#Reference","page":"Interacting with Neutral Atom Hardware","title":"Reference","text":"","category":"section"},{"location":"schema/","page":"Interacting with Neutral Atom Hardware","title":"Interacting with Neutral Atom Hardware","text":"get_device_capabilities\nget_device_capabilities_SI\nhardware_transform_Ω\nhardware_transform_ϕ\nhardware_transform_Δ\nhardware_transform_atoms\nhardware_transform\nHardwareTransformInfo\nvalidate\nto_json\nto_json_no_validation\nto_dict\nto_schema\nto_schema_no_validation\nto_braket_ahs_ir\nsubmit_to_braket\nfrom_json\nfrom_dict\nfrom_schema\nexecute\nTaskSpecification\nTaskOutput\nValidationViolations","category":"page"},{"location":"schema/#BloqadeSchema.get_device_capabilities","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.get_device_capabilities","text":"get_device_capabilities(capabilities_file=nothing)\n\nGenerates a DeviceCapabilities struct from either an explicitly provided path to a capabilities JSON file or using the default JSON provided in \"lib/BloqadeSchema/config/capabilities-qpu1-mock.json\".\n\nBy default, the units for capabilities JSON file are specified by the  \"lib/BloqadeSchema/config/capabilities-qpu1-mock-units.json\" file this function gives a DeviceCapabilities struct with non-SI base (e.g. μm, μs) units.\n\nSee also get_device_capabilities_SI\n\njulia> get_device_capabilities()\nBloqadeSchema.DeviceCapabilities(BloqadeSchema.TaskCapabilities(1, 1000), BloqadeSchema.LatticeCapabilities(BloqadeSchema.LatticeAreaCapabilities(75.0, 76.0), BloqadeSchema.LatticeGeometryCapabilities(4.0, 4.0, 0.1, 256), 256), BloqadeSchema.RydbergCapabilities(5.42e6, BloqadeSchema.RydbergGlobalCapabilities(0.0, 15.8, 0.0004, 250.0, -125.0, 125.0, 2.0e-7, 2500.0, -99.0, 99.0, 5.0e-7, 0.0, 4.0, 0.001, 0.05), nothing))\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.get_device_capabilities_SI","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.get_device_capabilities_SI","text":"get_device_capabilities_SI(capabilities_file=nothing)\n\nGenerates a DeviceCapabilities struct from either an explicitly provided path to a capabilities JSON file or using the default JSON provided in \"lib/BloqadeSchema/config/capabilities-qpu1-mock.json\".\n\nThe values returned are in Base SI units: m, s, rad/s, etc.\n\njulia> get_device_capabilities_SI()\nBloqadeSchema.DeviceCapabilities(BloqadeSchema.TaskCapabilities(1, 1000), BloqadeSchema.LatticeCapabilities(BloqadeSchema.LatticeAreaCapabilities(7.5e-5, 7.6e-5), BloqadeSchema.LatticeGeometryCapabilities(4.0e-6, 4.0e-6, 1.0e-7, 256), 256), BloqadeSchema.RydbergCapabilities(5.42e-24, BloqadeSchema.RydbergGlobalCapabilities(0.0, 1.58e7, 400.0, 2.5e14, -1.25e8, 1.25e8, 0.2, 2.5e15, -99.0, 99.0, 5.0e-7, 0.0, 4.0e-6, 1.0e-9, 5.0e-8), nothing))\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.hardware_transform_Ω","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.hardware_transform_Ω","text":"hardware_transform_Ω(Ω,device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nGiven the device_capabilities of the machine and a Rabi frequency (Ω) Waveform, return a transformed Ω capable of being implemented by the machine along with the error between the original (A) and transformed (B) waveforms calculated as Vert A - BVert_1. If the waveform durations are different, the shorter waveform is padded with zeros for values to make the durations equal in error calculation.\n\nLogs/Warnings/Exceptions\n\nExceptions are thrown if Ω is:\n\nNot of type BloqadWaveforms.Waveform\nNot present (nothing was passed in)\nNot a global drive (e.g.: Vector of Waveforms, localized Ω is not supported)\nthe maximum slope allowed for the waveform from device_capabilities is set to infinity \nthe minimum time step allowed for the waveform from device_capabilities is set to zero\n\nDebug logs are issued if the following are encountered in Ω:\n\nduration may be rounded due to time resolution from device_capabilities\nthe initial waveform does not start/end in zero for its value\nthe values in the waveform exceed device_capabilities supported values, and must be clipped \n\nExamples\n\njulia> wf = sinusoidal(duration=2, amplitude=1.3*π);\n\njulia> hardware_transform_Ω(wf)\n(Waveform(_, 2.0), 2.632451578170084)\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.hardware_transform_ϕ","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.hardware_transform_ϕ","text":"hardware_transform_ϕ(ϕ,device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nGiven the device_capabilities of the machine and a phase Waveform, return a transformed ϕ capable of being implemented by the machine along with the error between the original (A) and transformed (B) waveforms calculated as Vert A - BVert_1. If the waveform durations are different, the shorter waveform is padded with zeros for values to make the durations equal in error calculation.\n\nLogs/Warnings/Exceptions\n\nExceptions are thrown if ϕ is:\n\nNot of type BloqadWaveforms.Waveform\nNot present (nothing was passed in)\nNot a global drive (e.g.: Vector of Waveforms, localized ϕ is not supported)\nthe maximum slope allowed for the waveform from device_capabilities is set to infinity \nthe minimum time step allowed for the waveform from device_capabilities is set to zero\n\nDebug logs are issued if the following are encountered in ϕ:\n\nduration may be rounded due to time resolution from device_capabilities\nthe initial waveform does not start/end in zero for its value\nthe values in the waveform exceed device_capabilities supported values, and must be clipped \n\nExamples\n\njulia> wf = sinusoidal(duration=2, amplitude=1.3*π);\n\njulia> hardware_transform_ϕ(wf)\n(Waveform(_, 2.0), 0.5386117854062276)\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.hardware_transform_Δ","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.hardware_transform_Δ","text":"hardware_transform_Δ(Δ,device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nGiven the device_capabilities of the machine and a detuning waveform Δ, return a transformed Δ capable of being implemented by the machine along with the error between the original (A) and transformed (B) waveforms calculated as Vert A - BVert_1. If the waveform durations are different, the shorter waveform is padded with zeros for values to make the durations equal in error calculation.\n\nLogs/Warnings/Exceptions\n\nExceptions are thrown if Δ is:\n\nNot of type BloqadWaveforms.Waveform\nNot present (nothing was passed in)\nNot a global drive (e.g. Vector of Waveforms, localized Δ is not supported)\nthe maximum slope allowed for the waveform from device_capabilities is set to infinity \nthe minimum time step allowed for the waveform from device_capabilities is set to zero\n\nDebug logs are issued if the following are encountered in Δ:\n\nduration may be rounded due to time resolution from device_capabilities\nthe initial waveform does not start/end in zero for its value\nthe values in the waveform exceed device_capabilities supported values, and must be clipped \n\nExamples\n\njulia> wf = sinusoidal(duration=2, amplitude=1.3*π);\n\njulia> hardware_transform_Δ(wf)\n(Waveform(_, 2.0), 0.06492452289703464)\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.hardware_transform_atoms","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.hardware_transform_atoms","text":"hardware_transform_atoms(atoms,device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nGiven the constraints of the hardware from device_capabilities (specifically the position resolution) and an iterable containing the atom positions atoms, returns a Tuple containing the adjusted  atom positions the machine is capable of resolving and the mean squared error between the  desired atom positions and newly generated ones.\n\nNote that other constraints such as the maximum width, height, and minimum supported spacings are not taken into account in adjusting the atoms. This may result in the validation  function failing and requiring user intervention to modify the atom positions such that  they satisfy the other constraints.\n\nExamples\n\njulia> atom_positions = ((1.12,), (2.01,), (3.01,));\n\njulia> hardware_transform_atoms(atom_positions) # by default, calls get_device_capabilities()\n([(1.1,), (2.0,), (3.0,)], 0.013333333333333197)\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.hardware_transform","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.hardware_transform","text":"hardware_transform(h::BloqadeExpr.RydbergHamiltonian;device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nGiven the constraints of the hardware via device_capabilities, transforms h into one the machine is capable of executing as well as:\n\nThe mean squared error between original positions of the atoms and the transformed ones\nThe 1-norm of the difference between the original and transformed waveforms\n\nwhich are all stored in a HardwareTransformInfo struct.\n\nhardware_transform expects that ALL waveforms h can have specified (Ω, Δ, ϕ) are explicitly defined. If there is a waveform that is not being used, a BloqadeWaveforms.constant waveform should be created with value zero to indicate non-use.\n\nNote that not all atom position constraints are accounted for, such as the maximum lattice width, lattice height,  and minimum supported spacings. Only position resolution is automatically accounted for. This may result in the validation function failing and requiring user intervention to modify the atom  positions such that they satisfy the other constraints.\n\nLogs/Warnings/Exceptions\n\nDebug logs are always emitted containing the error (defined as the 1-norm of the difference between the original waveform and the transformed waveform) across all waveforms (Ω, Δ, ϕ) as well as the  Mean Squared Error between the original atom positions and the adjusted atom positions.\n\nThe debug logs/warnings from constituent functions hardware_transform_Ω, hardware_transform_Δ, hardware_transform_ϕ are also emitted should the  waveforms in h cause them to.\n\nSee also hardware_transform_atoms, hardware_transform_Ω, hardware_transform_Δ, hardware_transform_ϕ.\n\nExamples\n\njulia> atom_positions = AtomList([(1.12,), (2.01,), (3.01,)]);\n\njulia> Δ = Ω = ϕ = sinusoidal(duration=2, amplitude=1.3*π);\n\njulia> h = rydberg_h(atom_positions; Ω=Ω,Δ=Δ,ϕ=ϕ)\nnqubits: 3\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] Ω(t) ⋅∑ e^{ϕ(t) ⋅ im} |0⟩⟨1| + e^{-ϕ(t) ⋅ im} |1⟩⟨0|\n└─ [-] Δ(t) ⋅ ∑ n_i\n\n\njulia> hardware_transform(h)\n(nqubits: 3\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] Ω(t) ⋅∑ e^{ϕ(t) ⋅ im} |0⟩⟨1| + e^{-ϕ(t) ⋅ im} |1⟩⟨0|\n└─ [-] Δ(t) ⋅ ∑ n_i\n, BloqadeSchema.HardwareTransformInfo(0.5386117854062276, 2.632451578170084, 0.06492452289703464, (Δ = Waveform(_, 2), δ = nothing, Δi = 1.0), 0.013333333333333197))\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.HardwareTransformInfo","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.HardwareTransformInfo","text":"struct HardwareTransformInfo <: QuEraSchema\n\nContains the calculated differences (error) betwen the original and transformed waveforms and atoms from invoking hardware_transform on a BloqadeExpr.RydbergHamiltonian.\n\nFields\n\nϕ_error: Error between the original laser phase waveform (A) and transformed one (B) waveforms calculated as Vert A - BVert_1. \nΩ_error: Error between the original Rabi frequency waveform (A) and transformed one (B) waveforms calculated as Vert A - BVert_1.\nΔ_error: Error between the global detuning waveform (A) and transformed one (B) waveforms calculated as Vert A - BVert_1.\nΔ_mask: Decoupling of local detuning field inferred from the detuning value specified in Δ.\n\nnote: Local Detuning Support\nLocal Detunings are currently not supported by Bloqade but will be in future releases.\n\nmse_atoms: Mean Squared Error between original atom positions and transformed ones.\n\n\n\n\n\n","category":"type"},{"location":"schema/#BloqadeSchema.validate","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.validate","text":"validate(H::BloqadeExpr.RydbergHamiltonian;device_capabilities::DeviceCapabilities=get_device_capabilities())\n\nChecks if H is capable of being represented as part of the internal schema as well as if it falls in the capabilities of what the machine can do via device_capabilities.\n\nReturns ValidationViolations with each field containing a set of strings indicating which constraints were violated for which part of H.\n\nViolations include:\n\nWaveform Type\n\nϕ is not of type PiecewiseConstantWaveform\nΩ and Δ are not of type PiecewiseLinearWaveform\n\nAtom Position\n\nNumber of qubits requested exceeds what is supported by the device\nAtom positions exceed position resolution supported by the device\nThe total width/height of the atom arrangement exceeds what is supported by the device\nThe radial spacing between atoms is smaller than what is supported by the device\nThe vertical row spacing between atoms is smaller than what is supported by the device\n\nGeneral Waveform Constraints (apply to Ω, Δ, ϕ)\n\nduration exceeds device supported duration\nduration is smaller than device supported minimum time step\nsmallest time step is smaller than supported smallest time step\nvalue is smaller than smallest supported value\nvalue is larger than largest supported value\n\nΩ Waveform specific constraints\n\nSlope exceeds largest supported slope\nStart and end values are not equal to 0.0 rad/μs\n\nΔ Waveform specific constraints\n\nSlope exceeds largest supported slope\n\nϕ Waveform specific constraints\n\nstart value is not equal to 0.0 rad/μs\n\nLogs/Warnings/Exceptions\n\nThe following exceptions can be thrown:\n\nϕ is not of type PiecewiseConstantWaveform\nΩ and Δ are not of type PiecewiseLinearWaveform\n\nExamples\n\njulia> Δ = Ω = ϕ = sinusoidal(duration=2, amplitude=1.3*π);\n\njulia> h = rydberg_h(atom_positions; Ω=Ω,Δ=Δ,ϕ=ϕ)\n\njulia> transformed_h, _ = transform(h); # transform returns error info\n\njulia> validate(transformed_h) # constrained by default value of `device_capabilities` argument\nThe following validation violations occurred:\n\n1. positions 2 => (2.0, 0.0) and 3 => (3.0, 0.0) are a distance of 1.0 μm apart which is below minimum value of 4.0 μm\n2. positions 1 => (1.1, 0.0) and 2 => (2.0, 0.0) are a distance of 0.8999999999999999 μm apart which is below minimum value of 4.0 μm\n3. positions 1 => (1.1, 0.0) and 3 => (3.0, 0.0) are a distance of 1.9 μm apart which is below minimum value of 4.0 μm\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_json","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_json","text":"to_json(h::AbstractBlock; kw...)\nto_json(h::BloqadeExpr.RydbergHamiltonian,params::SchemaTranslationParams)\n\nConverts h and associated params into a JSON object. If params is not explicitly provided as a SchemaTranslationParams instance, it is automatically built from nshots and device_capabilities.\n\nValidation is performed to ensure h is capable of being run on the machine. This can cause an exception to be thrown should any violations be caught. Refer to Logs/Warnings/Exceptions below.\n\nLogs/Warnings/Exceptions\n\nA ValidationException can be thrown which wraps a ValidationViolations instance.\n\nValidationViolations contains any constraint violations detected from to_schema\n\nViolations include:\n\nWaveform Type\n\nϕ is not of type PiecewiseConstantWaveform\nΩ and Δ are not of type PiecewiseLinearWaveform\n\nAtom Position\n\nNumber of qubits requested exceeds what is supported by the device\nAtom positions exceed position resolution supported by the device\nThe total width/height of the atom arrangement exceeds what is supported by the device\nThe radial spacing between atoms is smaller than what is supported by the device\nThe vertical row spacing between atoms is smaller than what is supported by the device\n\nGeneral Waveform Constraints (apply to Ω, Δ, ϕ)\n\nduration exceeds device supported duration\nduration is smaller than device supported minimum time step\nsmallest time step is smaller than supported smallest time step\nvalue is smaller than smallest supported value\nvalue is larger than largest supported value\n\nΩ Waveform specific constraints\n\nSlope exceeds largest supported slope\nStart and end values are not equal to 0.0 rad/μs\n\nΔ Waveform specific constraints\n\nSlope exceeds largest supported slope\n\nϕ Waveform specific constraints\n\nstart value is not equal to 0.0 rad/μs\n\nMiscellaneous Violations\n\nNumber of shots is below minimum supported\nNumber of shots exceeds maximum supported\n\nExamples\n\njulia> Ω = BloqadeWaveforms.piecewise_constant(; clocks=[0, 2, 4, 6, 7], values=[5, 3, 4, 6]);\n\njulia> Δ = BloqadeWaveforms.piecewise_linear(; clocks=[0.0, 0.6, 2.1, 2.2], values=[-10.1, -10.1, 10.1, 10.1]);\n\njulia> ϕ = BloqadeWaveforms.piecewise_linear(; clocks=[0, 5], values=[33, 0]);\n\njulia> atoms = [(0, 0), (1, 3), (4, 2), (6, 3), (0, 5), (2, 5)];\n\njulia> block = BloqadeExpr.rydberg_h(atoms; Δ=Δ, Ω=Ω, ϕ=ϕ);\n\njulia> BloqadeSchema.to_json(block; n_shots=10)\n\"{\"nshots\":10,\"lattice\":{\"sites\":[[0.0,0.0],[1.0,3.0],[4.0,2.0],[6.0,3.0],[0.0,5.0],[2.0,5.0]],\"filling\":[1,1,1,1,1,1]},\"effective_hamiltonian\":{\"rydberg\":{\"rabi_frequency_amplitude\":{\"global\":{\"times\":[0.0,-18.0,2.0,-6.0,4.0,-14.0,7.0],\"values\":[5.0,5.0,3.0,3.0,4.0,4.0,6.0]}},\"rabi_frequency_phase\":{\"global\":{\"times\":[0.0,5.0],\"values\":[33.0,0.0]}},\"detuning\":{\"global\":{\"times\":[0.0,0.6,2.1,2.2],\"values\":[-10.1,-10.1,10.1,10.1]}}}}}\"\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_json_no_validation","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_json_no_validation","text":"to_json_no_validation(lattice::Union{Vector,Lattice};\n    ϕ::Maybe{PiecewiseConstantWaveform}=nothing,\n    Ω::Maybe{PiecewiseLinearWaveform}=nothing,\n    Δ::Maybe{PiecewiseLinearWaveform}=nothing,\n    δ::Maybe{PiecewiseLinearWaveform}=nothing,\n    Δi::Maybe{Vector{Number}}=nothing,kw...)\n\nConverts lattice, ϕ, Δ, δ, and Δi to a JSON representation of a TaskSpecification instance WITHOUT ensuring the provided values are capable of being executed on the machine (fit within the  constraints of the device's capabilities)\n\nSee also to_json\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_dict","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_dict","text":"to_dict(h::BloqadeExpr.RydbergHamiltonian; nshots::Int, device_capabilities::DeviceCapabilities=get_device_capabilities())\nto_dict(h::BloqadeExpr.RydbergHamiltonian,params::SchemaTranslationParams)\n\nConverts h and associated params into the dictionary representation of a TaskSpecification. If params is not explicitly provided as a SchemaTranslationParams instance, it is automatically built from nshots and device_capabilities.\n\nValidation is performed to ensure h is capable of being run on the machine. This can cause an exception to be thrown should any violations be caught. Refer to Logs/Warnings/Exceptions below.\n\nLogs/Warnings/Exceptions\n\nA ValidationException can be thrown which wraps a ValidationViolations instance.\n\nValidationViolations contains any constraint violations detected from to_schema\n\nViolations include:\n\nWaveform Type\n\nϕ is not of type PiecewiseConstantWaveform\nΩ and Δ are not of type PiecewiseLinearWaveform\n\nAtom Position\n\nNumber of qubits requested exceeds what is supported by the device\nAtom positions exceed position resolution supported by the device\nThe total width/height of the atom arrangement exceeds what is supported by the device\nThe radial spacing between atoms is smaller than what is supported by the device\nThe vertical row spacing between atoms is smaller than what is supported by the device\n\nGeneral Waveform Constraints (apply to Ω, Δ, ϕ)\n\nduration exceeds device supported duration\nduration is smaller than device supported minimum time step\nsmallest time step is smaller than supported smallest time step\nvalue is smaller than smallest supported value\nvalue is larger than largest supported value\n\nΩ Waveform specific constraints\n\nSlope exceeds largest supported slope\nStart and end values are not equal to 0.0 rad/μs\n\nΔ Waveform specific constraints\n\nSlope exceeds largest supported slope\n\nϕ Waveform specific constraints\n\nstart value is not equal to 0.0 rad/μs\n\nMiscellaneous Violations\n\nNumber of shots is below minimum supported\nNumber of shots exceeds maximum supported\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_schema","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_schema","text":"to_schema(h::BloqadeExpr.RydbergHamiltonian; nshots::Int, device_capabilities::DeviceCapabilities=get_device_capabilities())\nto_schema(h::BloqadeExpr.RydbergHamiltonian, params::SchemaTranslationParams)\n\nConverts h to a TaskSpecification instance with params. If params is not explicitly constructed,  it will be built automatically from nshots and device_capabilities. \n\nValidation is performed to ensure h is capable of being run on the machine. This can cause an exception to be thrown should any violations be caught. Refer to Logs/Warnings/Exceptions below.\n\nLogs/Warnings/Exceptions\n\nIf any violations of device_capabilities are detected, a ValidationException is thrown which wraps a ValidationViolations instance.\n\nViolations include:\n\nWaveform Type\n\nϕ is not of type PiecewiseConstantWaveform\nΩ and Δ are not of type PiecewiseLinearWaveform\n\nAtom Position\n\nNumber of qubits requested exceeds what is supported by the device\nAtom positions exceed position resolution supported by the device\nThe total width/height of the atom arrangement exceeds what is supported by the device\nThe vertical row spacing between atoms is smaller than what is supported by the device\nThe radial spacing between atoms is smaller than what is supported by the device\n\nGeneral Waveform Constraints (apply to Ω, Δ, ϕ)\n\nduration exceeds device supported duration\nduration is smaller than device supported minimum time step\nsmallest time step is smaller than supported smallest time step\nvalue is smaller than smallest supported value\nvalue is larger than largest supported value\n\nΩ Waveform specific constraints\n\nSlope exceeds largest supported slope\nStart and end values are not equal to 0.0 rad/μs\n\nΔ Waveform specific constraints\n\nSlope exceeds largest supported slope\n\nϕ Waveform specific constraints\n\nstart value is not equal to 0.0 rad/μs\n\nMiscellaneous Violations\n\nNumber of shots is below minimum supported\nNumber of shots exceeds maximum supported\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_schema_no_validation","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_schema_no_validation","text":"to_schema_no_validation(lattice::Union{Vector,Lattice};\n    ϕ::Maybe{PiecewiseConstantWaveform}=nothing,\n    Ω::Maybe{PiecewiseLinearWaveform}=nothing,\n    Δ::Maybe{PiecewiseLinearWaveform}=nothing,\n    δ::Maybe{PiecewiseLinearWaveform}=nothing,\n    Δi::Maybe{Vector{Number}}=nothing, \n    nshots::Int,\n    device_capabilities::DeviceCapabilities=get_device_capabilities())\nto_schema_no_validation(lattice::Union{Vector,Lattice},\n    ϕ::Maybe{PiecewiseConstantWaveform},\n    Ω::Maybe{PiecewiseLinearWaveform},\n    Δ::Maybe{PiecewiseLinearWaveform},\n    δ::Maybe{PiecewiseLinearWaveform},\n    Δi::Maybe{Vector{Number}}, \n    params::SchemaTranslationParams)\n\nConverts lattice, ϕ, Δ, δ, and Δi to a TaskSpecification instance WITHOUT ensuring the provided values are capable of being executed on the machine (fit within the  constraints of the device's capabilities).\n\nIf params is not already provided, it is constructed automatically from nshots::Int and device_capabilities.\n\nSee also to_schema\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.to_braket_ahs_ir","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.to_braket_ahs_ir","text":"function to_braket_ahs_ir(local_value::BloqadeSchema.RydbergDetuningLocal)\n\nConverts local_value to Braket.IR.PhysicalField\n\n\n\n\n\nfunction to_braket_ahs_ir(global_values::Union{BloqadeSchema.RydbergRabiFrequencyAmplitudeGlobal,\nBloqadeSchema.RydbergRabiFrequencyPhaseGlobal,\nBloqadeSchema.RydbergDetuningGlobal})\n\nConverts global_values to Braket.IR.PhysicalField\n\n\n\n\n\nfunction to_braket_ahs_ir(amplitude_or_phase::Union{BloqadeSchema.RydbergRabiFrequencyAmplitude,\nBloqadeSchema.RydbergRabiFrequencyPhase})\n\nUnwraps amplitude_or_phase to extract their global_value fields which are  immediately evaluated by function to_braket_ahs_ir(global_values::Union{BloqadeSchema.RydbergRabiFrequencyAmplitudeGlobal, BloqadeSchema.RydbergRabiFrequencyPhaseGlobal, BloqadeSchema.RydbergDetuningGlobal})\n\n\n\n\n\nfunction to_braket_ahs_ir(detuning::BloqadeSchema.RydbergDetuning)\n\nConverts detuning to Braket.IR.PhysicalField's for the global_value and local_value fields of detuning. Returns the converted global_value first  followed by the local_value.  ``\n\n\n\n\n\nfunction to_braket_ahs_ir(rydberg_hamiltonian::BloqadeSchema.RydbergHamiltonian)\n\nConverts rydberg_hamiltonian to Braket.IR.Hamiltonian\n\n\n\n\n\nfunction to_braket_ahs_ir(lattice::BloqadeSchema.Lattice)\n\nConverts lattice to a Braket.IR.Setup instance.\n\n\n\n\n\nfunction to_braket_ahs_ir(hamiltonian::BloqadeSchema.EffectiveHamiltonian)\n\nUnwraps the BloqadeSchema.RydbergHamiltonian contained inside hamiltonian and immediately evaluates it using  to_braket_ahs_ir(rydberg_hamiltonian::BloqadeSchema.RydbergHamiltonian)\n\n\n\n\n\nfunction tobraketahsir(bloqadetask::BloqadeSchema.TaskSpecification)\n\nConverts a bloqade_task into a Braket.IR.AHSProgram capable of being submitted to AWS Braket for execution on a QPU.\n\nNOTE: BloqadeSchema.TaskSpecification contains a field nshots which does not have a corresponding field in Braket.IR.AHSProgram. This value must be fed as a keyword argument to a Braket.AwsDevice instance separately.\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.submit_to_braket","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.submit_to_braket","text":"submit_to_braket(h::BloqadeExpr.Hamiltonian, n_shots::Int; <keyword arguments>)\n\nSubmits a BloqadeExpr.RydbergHamiltonian instance to Braket with n_shots defining the number of times the Hamiltonian should be executed. \n\nCredentials can be passed in explicitly through an AWS.AWSCredentials struct or by passing in  nothing, in which case credentials will be sought in the standard AWS locations.\n\nKeyword Arguments\n\narn=\"arn:aws:braket:us-east-1::device/qpu/quera/Aquila\": ARN for the machine\nregion=\"us-east-1\": AWS Region machine is located in\ncredentials::Union{AWSCredentials, Nothing}=nothing: AWS.AWSCredentials instance you can create to login.\n\nLogs/Warnings/Exceptions\n\nAn AWS.NoCredentials exception is thrown containing a message string \"Can't find AWS credentials!\" if the credentials given are invalid.\n\nBloqadeSchema.hardware_transform is always invoked, meaning its debug logs are also always emitted containing the difference (error) between the original waveforms in h and the newly generated ones compatible with hardware as well as the same transformation for atom positions.\n\n\n\n\n\nsubmit_to_braket(h::BloqadeExpr.RydbergHamiltonian, translation_params::BloqadeSchema.SchemaTranslationParams; <keyword arguments>)\n\nSubmits a BloqadeExpr.RydbergHamiltonian instance to Braket with BloqadeSchema.SchemaTranslationParams containing the number of shots and  device capabilities. Returns an AWS.AwsQuantumTask upon converting the Hamiltonian to one the hardware can execute and submitting it.\n\nCredentials can be passed in explicitly through an AWS.AWSCredentials struct or by passing in  nothing, in which case credentials will be sought in the standard AWS locations.\n\nKeyword Arguments\n\narn=\"arn:aws:braket:us-east-1::device/qpu/quera/Aquila\": ARN for the machine\nregion=\"us-east-1\": AWS Region machine is located in\ncredentials::Union{AWSCredentials, Nothing}=nothing: AWS.AWSCredentials instance you can create to login.\n\nLogs/Warnings/Exceptions\n\nAn AWS.NoCredentials exception is thrown containing a message string \"Can't find AWS credentials!\" if the credentials given are invalid.\n\nhardware_transform is always invoked internally, meaning its debug logs are also always emitted containing the difference (error) between the original waveforms in h and the newly generated ones compatible with hardware as well as the same transformation for atom positions.\n\n\n\n\n\nsumbit_to_braket(ts:BloqadeSchema.TaskSpecification; <keyword arguments>)\n\nSubmits a BloqadeSchema.TaskSpecification instance to Braket, returning an AWS.AwsQuantumTask.\n\nCredentials can be passed in explicitly through an AWS.AWSCredentials struct or by passing in  nothing, in which case credentials will be sought in the standard AWS locations.\n\nKeyword Arguments\n\narn=\"arn:aws:braket:us-east-1::device/qpu/quera/Aquila\": ARN for the machine\nregion=\"us-east-1\": AWS Region machine is located in\ncredentials::Union{AWSCredentials, Nothing}=nothing: AWS.AWSCredentials instance you can create to login.\n\nLogs/Warnings/Exceptions\n\nAn AWS.NoCredentials exception is thrown containing a message string \"Can't find AWS credentials!\" if the credentials given are invalid.\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.from_json","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.from_json","text":"from_json(j::String)\n\nConvert the JSON representation of a TaskSpecification instance to a  TaskSpecification\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.from_dict","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.from_dict","text":"from_dict(d::AbstractDict{String})\n\nConvert the dictionary representation of a TaskSpecification instance,  into a TaskSpecification.\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.from_schema","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.from_schema","text":"from_schema(t::TaskSpecification)\n\nConverts t into valid BloqadeExpr.RydbergHamiltonian instance.\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.execute","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.execute","text":"execute(j::Dict)\n\nExecutes a task given as a Dict in the task specification API format, and returns a JSON string of the result\n\n\n\n\n\nexecute(j::TaskSpecification)\n\nExecutes a task given as a TaskSpecification object in the task specification API format, and returns a JSON string of the result\n\n\n\n\n\n","category":"function"},{"location":"schema/#BloqadeSchema.TaskSpecification","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.TaskSpecification","text":"struct TaskSpecification <: QuEraSchema\n\nThe schema representation of a task for the machine.\n\nIs the output of to_schema and to_schema_no_validation as well as input to execute(task::TaskSpecification).\n\nFields\n\nnshots::Int: Number of shots (number of times hamiltonian is executed)\nlattice::Lattice: The Bravais lattice vectors and sites\neffective_hamiltonian::EffectiveHamiltonian: a RydbergHamiltonian instance \n\nwrapped inside an EffectiveHamiltonian\n\n\n\n\n\n","category":"type"},{"location":"schema/#BloqadeSchema.TaskOutput","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.TaskOutput","text":"struct TaskOutput <: QuEraSchema\n\nThe result of executing a TaskSpecification on the machine.\n\nOutput of execute function.\n\nFields\n\ntask_status_code::Int: Task Status\nshot_outputs::Vector{ShotOutput}: Contains pre- and post- shot \n\nsequence in binary of if atoms are in Rydberg/Ground state.\n\n\n\n\n\n","category":"type"},{"location":"schema/#BloqadeSchema.ValidationViolations","page":"Interacting with Neutral Atom Hardware","title":"BloqadeSchema.ValidationViolations","text":"struct ValidationViolations <: QuEraSchema\n\nStores violations of hardware constraints from the user-supplied BloqadeExpr.RydbergHamiltonian as strings in sets. This is returned by validate and to_schema.\n\nFields\n\nlattice_violations::Set: violations of hardware-supported lattice geometry\nmisc_violations::Set: violations that do not fall into other categories (e.g. number of shots)\nΔ_violations::Set: violations of detuning waveform\nΩ_violations::Set: violations of Rabi frequency waveform\nϕ_violations::Set: violations of Phase waveform\nδ_violations::Set: violations of local detuning waveforms\n\n\n\n\n\n","category":"type"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/2.adiabatic/main.jl\"","category":"page"},{"location":"tutorials/2.adiabatic/main/#Adiabatic-Evolution","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/#Background","page":"Adiabatic Evolution","title":"Background","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"In this example, we will show how to use Bloqade to prepare ordered ground states in the Rydberg system. The example is based on the experimental works in a 1D System (H. Bernien et al. (10.1038/nature24622)) and 2D system (S. Ebadi et al. (10.1038/s41586-021-03582-4)). The Rydberg Hamiltonian can be found in the Bloqade page.","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Due to the strong Rydberg interactions, only one Rydberg excitation is allowed within the blockade radius (see the Rydberg Blockade tutorial). With a positive detuning Δ, more Rydberg excitations are favored (to lower the ground state(s) energy). The interplay of these two mechanisms allows the creation of different ordered states depending on the strength of the blockade radius and the detunings, such as the Z_N ordered states (H. Bernien et al. (10.1038/nature24622)) in 1D and the checkerboard phase, the star phase, and a pure quantum phase (the striated phase) in 2D (see the experiment (S. Ebadi et al. (10.1038/s41586-021-03582-4)) and theory (R. Samajdar et al. (10.1103/PhysRevLett.124.103601)) papers).","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Here, we use the Quantum Adiabatic Algorithm (QAA) to prepare these quantum many-body ground states. To do that, we can start with all atoms in the ground state  0 rangle, which is the ground state of the many-body Hamiltonian with a large negative detuning Delta. Then, the Rabi frequency Omega is turned on, and the detuning strength is ramped up from a large negative value to positive values. If this process is slow enough, the quantum state of the system stays close to the ground state of the time-dependent Hamiltonian at time t. At the end of this process, we arrive at a target Hamiltonian, and correspondingly, the prepared state is approximately the ground state of the final Hamiltonian. A quantum phase transition typically occurs during this process and one can probe the phase transition and critical phenomena by simulating and understanding the quantum dynamics.","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Let's start by importing the required libraries:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"using Bloqade\nusing PythonCall\nusing KrylovKit\nusing SparseArrays\n\nplt = pyimport(\"matplotlib.pyplot\");","category":"page"},{"location":"tutorials/2.adiabatic/main/#Ground-State-Properties","page":"Adiabatic Evolution","title":"Ground State Properties","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We start by probing the ground state properties of the Rydberg Hamiltonian in a 1D system. We will use the 1D chain for simplicity and vary the parameters of the Rydberg Hamiltonian, calculating the corresponding ground state properties. Here, we consider a chain with 9 atoms, with each atom separated by a distance of 5.72 μm. Please refer to the Rydberg Blockade tutorial on tips for setting the separation distance for the atoms in preparing different ordered states. We can generate the system as follows using the function generate_sites:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"nsites = 9\natoms = generate_sites(ChainLattice(), nsites, scale = 5.72)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We set the Rabi frequency to be Ω = 2π times 4 MHz, and study the ground state as a function of the detuning Δ:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Ω = 2π * 4\nΔ_step = 30\nΔ = LinRange(-2π * 10, 2π * 10, Δ_step);","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"The Rydberg density profile can be computed for each value of Delta as:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"density_g = zeros(Δ_step, nsites)\n\nfor ii in 1:Δ_step\n    h_ii = rydberg_h(atoms; Δ = Δ[ii], Ω) # create the Rydberg Hamiltonian\n    h_m = mat(h_ii) # convert the Hamiltonian into a matrix\n    vals, vecs, info = KrylovKit.eigsolve(h_m, 1, :SR) # find the ground state eigenvalue and eigenvector\n    g_state = ArrayReg(vecs[1]) # creates the initial state with all atoms in ``| 0 \\rangle`` state\n\n    for jj in 1:nsites\n        density_g[ii, jj] = rydberg_density(g_state, jj) # measure the density of Rydberg excitations on each site\n    end\nend","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"To compare, we first plot the density profile when Delta= -2π times 10 MHz:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"fig, ax = plt.subplots(figsize = (10, 4))\nax.bar(1:nsites, density_g[1, :])\nax.set_xticks(1:nsites)\nax.set_xlabel(\"Sites\")\nax.set_ylabel(\"Rydberg density\")\nax.set_title(\"Density Profile: 1D Chain, Δ = -2π * 10 MHz\")\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We can see that the Rydberg densities in this case are close to 0 for all sites. In contrast, for Delta= 2π times 10 MHz, the density shows a clear Z_2 ordered profile:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"fig, ax = plt.subplots(figsize = (10, 4))\nax.bar(1:nsites, density_g[30, :])\nax.set_xticks(1:nsites)\nax.set_xlabel(\"Sites\")\nax.set_ylabel(\"Rydberg density\")\nax.set_title(\"Density Profile: 1D Chain, Δ = 2π * 10 MHz\")\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"More generally, we can plot an order parameter as a function of Delta to clearly see the onset of phase transition. The order parameter can be defined as the difference of Rydberg densities on even and odd sites:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"order_para = map(1:Δ_step) do ii\n    return sum(density_g[ii, 1:2:nsites]) - sum(density_g[ii, 2:2:nsites]) # density on odd sites - density on even sites\nend\n\nfig, ax = plt.subplots(figsize = (10, 4))\nax.plot(Δ / 2π, order_para)\nax.set_xlabel(\"Δ/2π (MHz) \")\nax.set_ylabel(\"Order parameter\")\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"From the density profile of ground states and the change in the order parameter, we can observe a phase transition with changing Delta. Below, we show that by slowly changing the parameters of the Hamiltonian, we can follow the trajectory of the ground states and adiabatically evolve the atoms from the ground state to the Z_2 ordered state.","category":"page"},{"location":"tutorials/2.adiabatic/main/#Preparation-of-Ordered-States-in-1D","page":"Adiabatic Evolution","title":"Preparation of Ordered States in 1D","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We first specify the adiabatic pulse sequence for the Rabi frequency by using the built-in waveform function piecewise_linear:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"total_time = 3.0;\nΩ_max = 2π * 4;\nΩ = piecewise_linear(clocks = [0.0, 0.1, 2.1, 2.2, total_time], values = [0.0, Ω_max, Ω_max, 0, 0]);","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"The detuning sequence can also be created in a similar way:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"U1 = -2π * 10;\nU2 = 2π * 10;\nΔ = piecewise_linear(clocks = [0.0, 0.6, 2.1, total_time], values = [U1, U1, U2, U2]);","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We plot the two waveforms:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"fig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (12, 4))\nBloqade.plot!(ax1, Ω)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nBloqade.plot!(ax2, Δ)\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We generate the positions for a 1D atomic chain again:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"nsites = 9\natoms = generate_sites(ChainLattice(), nsites, scale = 5.72)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Note that just like the previous section, we specify the nearest-neighbor atoms to be separated by 5.72 μm in order to prepare a Z_2 ordered state. With the waveforms and atomic coordinates specified, the time-dependent Hamiltonian can be generated by:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"h = rydberg_h(atoms; Δ, Ω)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"nqubits: 9\n+\n├─ [+] ∑ 2π ⋅ 8.627e5.0/|x_i-x_j|^6 n_i n_j\n├─ [+] Ω(t) ⋅ ∑ σ^x_i\n└─ [-] Δ(t) ⋅ ∑ n_i\n","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We then specify all atoms to initially be in the ground state, and set up the emulation problem by choosing an ODE solver:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"reg = zero_state(9);\nprob = SchrodingerProblem(reg, total_time, h);\nintegrator = init(prob, Vern8());","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"The default behavior for the integrator is to use adaptive steps. One can use TimeChoiceIterator to specify the time points one would like to measure some observables. Here, we measure the Rydberg density on each site:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"densities = []\nfor _ in TimeChoiceIterator(integrator, 0.0:1e-3:total_time)\n    push!(densities, rydberg_density(reg))\nend\nD = hcat(densities...);","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"and finally plot the time-dependent dynamics of Rydberg density for each site:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"fig, ax = plt.subplots(figsize = (10, 4))\nshw = ax.imshow(real(D), interpolation = \"nearest\", aspect = \"auto\", extent = [0, total_time, 0.5, nsites + 0.5])\nax.set_xlabel(\"time (μs)\")\nax.set_ylabel(\"site\")\nax.set_xticks(0:0.2:total_time)\nax.set_yticks(1:nsites)\nbar = fig.colorbar(shw)\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We can clearly see that a Z_2 ordered state has been generated by the specified adiabatic pulse sequence. We can also confirm it by plotting the bitstring distribution at the final time step:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"bitstring_hist(reg; nlargest = 20)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"To prepare the Z_3 or Z_4 states, we can reduce the separation between nearby atoms to 3.57 μm or 2.87 μm respectively. Please refer to the Rydberg Blockade page on how to set the separation distance for preparing the ordered states.","category":"page"},{"location":"tutorials/2.adiabatic/main/#Emulation-in-the-Blockade-Subspace","page":"Adiabatic Evolution","title":"Emulation in the Blockade Subspace","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"In the above example, we have run the fullspace emulation without truncating the Hilbert space. To speed up the emulation, we can also run it in the blockade subspace, throwing out the configurations of the Hilbert space that violate the blockade constraint. See the Working with Subspace section of the manual for more details. This can be done by changing the register to a SubspaceArrayReg by feeding a subspace object.","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"The subspace can be found by looking up the independent sets of the graph constructed by a subspace radius; here we choose the subspace radius to be 5.73 μm:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"space = blockade_subspace(atoms, 5.73);","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Then create our register in the subspace:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"reg = zero_state(space)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"YaoSubspaceArrayReg.SubspaceArrayReg{2, ComplexF64, Vector{ComplexF64}, BloqadeExpr.Subspace{Int64, Vector{Int64}}}(9, ComplexF64[1.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im, 0.0 + 0.0im], BloqadeExpr.Subspace{Int64, Vector{Int64}}(9, Dict(5 => 5, 265 => 62, 325 => 81, 32 => 14, 136 => 40, 145 => 44, 73 => 28, 272 => 64, 164 => 51, 320 => 77, 337 => 86, 64 => 22, 324 => 80, 4 => 4, 168 => 53, 328 => 82, 148 => 46, 256 => 56, 277 => 68, 264 => 61, 41 => 20, 69 => 26, 36 => 17, 68 => 25, 82 => 32, 85 => 34, 130 => 37, 162 => 50, 84 => 33, 321 => 78, 66 => 24, 292 => 72, 34 => 16, 2 => 3, 10 => 8, 18 => 11, 261 => 60, 296 => 74, 336 => 85, 42 => 21, 144 => 43, 132 => 38, 273 => 65, 257 => 57, 169 => 54, 16 => 9, 20 => 12, 81 => 31, 290 => 71, 341 => 89, 160 => 48, 340 => 88, 0 => 1, 289 => 70, 329 => 83, 266 => 63, 9 => 7, 146 => 45, 74 => 29, 138 => 42, 161 => 49, 276 => 67, 128 => 35, 21 => 13, 170 => 55, 129 => 36, 260 => 59, 297 => 75, 133 => 39, 72 => 27, 258 => 58, 8 => 6, 17 => 10, 37 => 18, 1 => 2, 137 => 41, 338 => 87, 288 => 69, 80 => 30, 33 => 15, 274 => 66, 149 => 47, 40 => 19, 65 => 23, 330 => 84, 293 => 73, 165 => 52, 298 => 76, 322 => 79), [0, 1, 2, 4, 5, 8, 9, 10, 16, 17, 18, 20, 21, 32, 33, 34, 36, 37, 40, 41, 42, 64, 65, 66, 68, 69, 72, 73, 74, 80, 81, 82, 84, 85, 128, 129, 130, 132, 133, 136, 137, 138, 144, 145, 146, 148, 149, 160, 161, 162, 164, 165, 168, 169, 170, 256, 257, 258, 260, 261, 264, 265, 266, 272, 273, 274, 276, 277, 288, 289, 290, 292, 293, 296, 297, 298, 320, 321, 322, 324, 325, 328, 329, 330, 336, 337, 338, 340, 341]))","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"The rest of the code will be the same as the fullspace case:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"prob = SchrodingerProblem(reg, total_time, h)\nemulate!(prob)\nbitstring_hist(prob.reg; nlargest = 20)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/#State-Preparation-in-2D","page":"Adiabatic Evolution","title":"State Preparation in 2D","text":"","category":"section"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Now we show how to prepare a 2D checkerboard phase. Most of the code will be the same as the 1D case, except that we will choose slightly different parameters and specify a square lattice instead of a chain:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"nx, ny = 3, 3\nnsites = nx * ny\natoms = generate_sites(SquareLattice(), nx, ny, scale = 6.7)","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"We create and plot the waveforms in the following manner:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"total_time = 2.9\nΩ_max = 2π * 4.3\nΩ = piecewise_linear(clocks = [0.0, 0.3, 2.6, total_time], values = [0.0, Ω_max, Ω_max, 0]);\n\nU = 2π * 15.0\nΔ = piecewise_linear(clocks = [0.0, 0.3, 2.6, total_time], values = [-U, -U, U, U]);\n\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize = (10, 4))\nBloqade.plot!(ax1, Ω)\nax1.set_ylabel(\"Ω/2π (MHz)\")\nBloqade.plot!(ax2, Δ)\nax2.set_ylabel(\"Δ/2π (MHz)\")\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Then, we use the waveforms and atom positions to create a Hamiltonian and define a time evolution problem:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"h = rydberg_h(atoms; Δ, Ω)\nreg = zero_state(9);\nprob = SchrodingerProblem(reg, total_time, h);\nintegrator = init(prob, Vern8());","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"Again, we can use TimeChoiceIterator to specify the time points for measuring some observables:","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"densities = [];\nfor _ in TimeChoiceIterator(integrator, 0.0:1e-3:total_time)\n    push!(densities, rydberg_density(reg))\nend\nD = hcat(densities...)\n\nfig, ax = plt.subplots(figsize = (10, 4))\nshw = ax.imshow(real(D), interpolation = \"nearest\", aspect = \"auto\", extent = [0, total_time, 0.5, nsites + 0.5])\nax.set_xlabel(\"time (μs)\")\nax.set_ylabel(\"site\")\nax.set_xticks(0:0.2:total_time)\nax.set_yticks(1:nsites)\nbar = fig.colorbar(shw)\nfig","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"(Image: )","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"","category":"page"},{"location":"tutorials/2.adiabatic/main/","page":"Adiabatic Evolution","title":"Adiabatic Evolution","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Bloqade","category":"page"},{"location":"#Bloqade","page":"Home","title":"Bloqade","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p>\nWelcome to the documentation page for Bloqade, a &nbsp;\n    <a href=\"https://julialang.org\">\n        <img src=\"https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico\" width=\"16em\">\n        Julia Language\n    </a>\n    &nbsp; package for quantum computation and quantum dynamics based on neutral-atom architectures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Neutral-atom quantum computers have two major modes of computation: the first mode is a \"digital mode\" to do universal, digital quantum computation that uses two ground states 0rangle and 1rangle to encode the qubit, which has long coherence time, and one Rydberg state rrangle to entangle the qubits; the second mode is an \"analog mode\" as a programmable quantum simulator that uses one ground state grangle and one Rydberg state rrangle, where the quantum dynamics is governed by a Rydberg Hamiltonian hatmathcalH described below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, Bloqade enables the easy design and fast execution of quantum dynamics in the analog mode,  based on the neutral-atom quantum computing architecture. Besides fast full Hilbert-space simulation on CPUs, the main features include the design of arbitrary-layout quantum registers (Lattices), easy waveform generation (Waveforms), simulation in subspace constrained by the Rydberg blockade (Working with Subspace), faster GPU-accelerated simulation (GPU Acceleration), and more.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p>\nTo install Bloqade,\n    please <a href=\"https://docs.julialang.org/en/v1/manual/getting-started/\">open\n    Julia's interactive session (known as REPL)</a>, press <kbd>]</kbd> key in the REPL to use the package mode, and then add the QuEra Julia registry via:\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the stable release, type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Bloqade","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or for the current master:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Bloqade#master","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more advanced installation guide, please see the Installation page.","category":"page"},{"location":"#What-does-Bloqade-Do?","page":"Home","title":"What does Bloqade Do?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the analog mode, Bloqade simulates the time evolution of a quantum state under the Schrödinger equation where the Hamiltonian is the interacting Rydberg Hamiltonian hatmathcalH, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"i hbar dfracpartialpartial t  psi rangle = hatmathcalH(t)  psi rangle  \n\nfracmathcalH(t)hbar = sum_j fracOmega_j(t)2 left( e^i phi_j(t)   g_j rangle  langle r_j  + e^-i phi_j(t)   r_j rangle  langle g_j  right) - sum_j Delta_j(t) hatn_j + sum_j  k V_jk hatn_j hatn_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"Following the atomic physics nomenclature, Omega_j, phi_j, and Delta_j  denote the Rabi frequency, laser phase, and the detuning of the driving laser field on atom (qubit) j coupling the two states   g_j rangle (ground state) and  r_j rangle (Rydberg state); hatn_j = r_jrangle langle r_j is the number operator, and V_jk = C_6mathbfx_j - mathbfx_k^6 describes the Rydberg interaction (van der Waals interaction) between atoms j and k where mathbfx_j denotes the position of the atom j; C_6 is the Rydberg interaction constant that depends on the particular Rydberg state used. For Bloqade, the default C_6 = 862690 times 2pi text MHz μm^6 for r rangle = lvert 70S_12 rangle of the ^87Rb atoms; hbar is the reduced Planck's constant. Sometimes, we also refer the states grangle and rrangle as 0rangle and 1rangle as well in the analog mode.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting from an initial quantum state  psi_textini rangle, Bloqade simulates its time evolution under the Hamiltonian hatmathcalH(t), given the qubit positions and the time-dependent profiles for  Omega_j, phi_j, and Delta_j. Bloqade then outputs the real-time-evolved state  psi(t) rangle, which can then be used for measuring different observables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"More specifically, here are the steps to program neutral-atom quantum computers using Bloqade:","category":"page"},{"location":"","page":"Home","title":"Home","text":"specify atom positions (see Lattices)\nprogram waveforms of Hamiltonian parameters (see Waveforms)  \ncreate the Hamiltonian (see Hamiltonians)\nspecify the initial state (see Registers and Observables)\nemulation (see Emulation)\nmeasurements & observables (see Registers and Observables).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The default units for various quantities are: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Quantity Default Unit\nLength μm\nTime μs\nOmega rad/μs\nphi rad\nDelta rad/μs","category":"page"},{"location":"","page":"Home","title":"Home","text":"You may often find Omega and Delta written in units of MHz. If you see something like “Omega is 4 MHz”, it means Omega = 2pi times 4 MHz = 2513 rad/μs. Using MHz also makes it very easy to understand the pulse time duration it takes to flip the atom from grangle to rrangle (and vice versa), i.e., a π-pulse. For example, for a π-pulse which means Omegat = pi, if Omega = 2pi times 4 MHz, then it takes t = 0125 μs to do the π-pulse.","category":"page"},{"location":"#A-Simple-Example","page":"Home","title":"A Simple Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's try a simple example of simulating quantum many-body dynamics governed by the Rydberg Hamiltonian. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"We start by loading the Bloqade Module:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Bloqade","category":"page"},{"location":"","page":"Home","title":"Home","text":"As one can see from the Rydberg Hamiltonian, the interactions between Rydberg atoms depend on their positions. Bloqade provides several built-in Lattices structures for specifying the atom positions. For instance, we can use the following codes to quickly generate a chain of 10 atoms in 1D: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"nsites = 10;\natoms = generate_sites(ChainLattice(), nsites, scale = 5.74)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We have set the distance between nearest-neighbor atoms to be 5.74 μm. Note that the default unit of length is μm as shown in the table above.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's set both Omega and Delta to be constants (and phi = 0). Since all the variable parameters in the Hamiltonian are specified, we can now create an interacting Rydberg Hamiltonian by using rydberg_h: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"h = rydberg_h(atoms; Ω = 4 * 2π, Δ = 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To create more complicated waveforms for Omega and Delta and find the supported utilities, please refer to the Waveforms page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's create an initial state with all the atoms in the ground state by using zero_state.","category":"page"},{"location":"","page":"Home","title":"Home","text":"reg = zero_state(10)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are interested in measuring observables of the final quantum state of the Rydberg system starting from the initial state and evolving under the Rydberg Hamiltonian over some time duration. We can first create the problem and then directly simulate the time evolution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"prob = SchrodingerProblem(reg, 1.6, h)\nintegrator = init(prob, Vern8());\nemulate!(prob);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, we have chosen the ODE-based solver (Vern8()) by using SchrodingerProblem and set the total evolution time to be 1.6 μs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After simulating the time evolution and get the final state, we can measure the Rydberg population at each site for the final state: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"rydberg_populations = map(1:nsites) do i\n    rydberg_density(prob.reg, i)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"prob.reg is the register storing the final state after the time evolution.","category":"page"},{"location":"#Benchmarks","page":"Home","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Have-Suggestions-or-Interested-in-Contributing?","page":"Home","title":"Have Suggestions or Interested in Contributing?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"File an issue to report a bug or request a feature.\nCheck out the Contributing to Bloqade guide if you would like to make your own changes and make a Pull Request when you would like your work to be reviewed","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"EditURL = \"https://github.com/QuEraComputing/Bloqade.jl/blob/master/examples/1.blockade/main.jl\"","category":"page"},{"location":"tutorials/1.blockade/main/#blockade","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"","category":"section"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The Rydberg blockade mechanism is one of the most important phenomena of neutral atom quantum computing based on Rydberg interactions. By including a term in the effective Hamiltonian which adds an interaction between adjacent atoms in the Rydberg states, one can construct gates and nontrivial dynamics that create entanglement and correlation across the system.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The Rydberg interaction is a van der Waals interaction, where there is an energy shift if two adjacent atoms are both in the Rydberg state. The van der Waals interaction is","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"V_jk = fracC_6mathbfx_j - mathbfx_k^6hat n_j hat n_k","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"where hat n_j=r_jranglelangle r_j is the number operator on the jth site, which is 1 if the atom is in the Rydberg state  r_j rangle, and 0 if the atom is in the ground state  g_j rangle. The coefficient C_6 = 2pitimes 862690 text MHz μm^6 is the interaction strength; characteristically, this interaction has a strength C_6 approx 2pitimes 4 MHz for two atoms separated by 774 μm, a similar scale to the Rabi frequency coupling the ground and the Rydberg state. Crucially, this can be seen as an energy shift on atom k, conditional on the state of atom j, and so can be used, in a loose sense, as a conditional logical gate. This is because the adjacent atom forces the atom to be off-resonant with the laser field if it is in the Rydberg state. Please refer to the Hamiltonians page for descriptions of all the terms in the Rydberg Hamiltonian.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"This conditional drive can be seen given the following dynamics. Suppose two atoms are close to each other ( 10 μm) and so experience a strong Rydberg interaction (see the diagram below). The left atom is either in a Rydberg state, or in the ground state, and the right atom is originally in the ground state. Then, a Rabi drive is applied to the right atom, which couples the atom's ground state to the Rydberg state. For this example, we choose a Rabi frequency of Omega=2pitimes 05 MHz and distance between atoms mathbfx_j - mathbfx_k = 7 μm, which gives a conditional detuning (Rydberg interaction) of approx 2pi times 733 MHz. When the left atom is in the ground state (blue circle in figure), there are no interactions and the state of the right atom experiences standard Rabi oscillation between the ground state and the Rydberg state; for a particular choice of timing, this executes a pi pulse, flipping the right atom from the ground to the Rydberg state. However, when the left atom is in the Rydberg state (red circle in figure), there is a large detuning on the right atom due to the strong Rydberg interaction, which causes the transition to the Rydberg state to be strongly suppressed. In this case, the right atom (up to perturbative corrections) is never in the Rydberg state. This is the so-called Rydberg blockade.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"(Image: RydbergBlockade)","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Because of the large energy shift from having two adjacent atoms in the Rydberg state, evolution from an atomic ground state with local Rabi couplings between ground and Rydberg state is restricted to a low-energy subspace of states where no two adjacent atoms are in the Rydberg state. Furthermore, because the interaction strength with distance is a large power law, one can define a characteristic scale set by the Rabi frequency. If two atoms are close such that the conditional detuning is much larger than the Rabi frequency, one can consider the atoms to be blockading each other, and both atoms cannot simultaneously be in the Rydberg state. In contrast, if two atoms are far away, the two atoms never blockade each other and both atoms can simultaneously be in the Rydberg state.","category":"page"},{"location":"tutorials/1.blockade/main/#Blockade-radius-R_b,-subspace-radius-R_s,-and-unit-disk-graphs","page":"Rydberg Blockade","title":"Blockade radius R_b, subspace radius R_s, and unit disk graphs","text":"","category":"section"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The blockade radius is defined as the distance at which the Rydberg interaction energy is the same as the Rabi frequency","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"fracC_6R_b^6 = Omega","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"where R_b is the blockade radius, which sets the characteristic distance scale for which Rydberg interaction will be strong compared to the coupling strength between the ground and the Rydberg state set by Omega. In the above example, Omega = 2pitimes 05 MHz, so R_b = (C_6  Omega)^16 approx 1095  μm. In practice, the blockade approximation, i.e., truncating the states that have both atoms in the Rydberg state, may not be a good approximation at the distance R_b, since it is more like the onset energy scale at which Rydberg interaction becomes strong. For a better blockade approximation, the atoms should be closer than R_b. We refer to this distance as the subspace radius R_s (R_s leq R_b), at which we claim it will be a reasonably good approximation to throw away all the states that have more than one Rydberg states whenever they are within the radius R_s.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Therefore, in simulating the quantum dynamics, instead of doing it in the full 2^N Hilbert space, we may take advantage of the energy structure and truncate those blockade-violated states. Mathematically, this is related to the independent sets of the unit disk graph defined by the positions of the atoms. A unit disk graph is a set of vertices and edges, where each vertex represents an atom, and there are edges if the distance between vertices is less than or equal to some unit disk radius mathbfx_j - mathbfx_k leq R_u. An independent set is a set of vertices in the graph such that no two of which are connected by an edge. Thus, the non-blockade-violated states are the independent set states of the corresponding unit disk graph, where the independent set consists of the vertices (atoms) that are excited to the Rydberg state. If we set R_u = R_s, it will be a good approximation to throw away those non-independent sets. In practice, it may not be easy to know a priori what will be a good choice for R_s, since it depends on the specific atom arrangement and the specific many-body quantum dynamics. For example, if R_s = 12 times R_b, we will be throwing away states that have interaction energies at least 2^6 times Omega, which will typically be a very good approximation. In the two-atom example above, we can set R_s = 7 μm and throw away the state when both atoms are in the Rydberg state, which is quite good an approximation as seen in the figure below. In this case, the Rydberg-blockaded state has an interaction of (R_b  R_s)^6  Omega approx 147  Omega. When the blockade approximation is valid, the basis states would be separated into bands due to the strong Rydberg interaction, and there will be small perturbative coupling between the bands due to the Rabi coupling, (which is typically in the order of (Omega  V_jk)^2). See the illustrative figure below:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"(Image: EnergyTruncation)","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The lowest energy states are representative of independent sets of the unit disk graph, where Rydberg excitations are in the independent set and no two Rydberg excitations are within the unit disk radius. The second energy band are sets with a single independent set violation, where there are equivalently just two Rydberg excitations within the unit disk radius of each other. Higher and higher bands represent more and more independent set violations. We emphasize again that this band structure is dependent on the arrangement of atoms, and for arbitrary configurations, this band structure may not be clear.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"To run more efficient simulations in the blockade subspace, the simplest scheme is to truncate the Hilbert space to the low-energy subspace, and exclude all states above a certain energy. Given the natural band structure of the classical Hamiltonian, we may simply truncate the Hilbert space to the subspace of independent sets of the unit disk graph with the unit disk radius set as R_u = R_s. Equivalently, this is the blockade subspace, where atoms within the subspace radius are excluded from simultaneously being in the Rydberg state. The validity of the energy truncation subspace is governed by the strength of off-diagonal matrix elements coupling the low-energy subspace to the high-energy one. For the Rydberg Hamiltonian, these off-diagonal elements 1rrangleleftrightarrowrrrangle have a strength Omega. In order to preserve dynamics within the subspace, the energy difference between states within the blockade subspace (e.g. 1rrangle) and outside (rrrangle) must be much larger than the Rabi strength. Formally, if Omega ll C_6R_s^6, then the blockade approximation should be valid (the perturbation is typically in the second order (Omega (C_6R_s^6))^2). As long as this condition holds, the exact dynamics in the full Hilbert space should be closely approximated by the dynamics in the blockade subspace, as the mixing terms only couple to low-energy states.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Please also refer to the Working with Subspace page in the manual for more details on running simulations in the subspace. Also, see Maximum Independent Set tutorial for more descriptions on the correspondence between the independent set constraint and the blockade constraint, and a tutorial on how to solve the Maximum Independent Set problem using Rydberg Hamiltonians.","category":"page"},{"location":"tutorials/1.blockade/main/#Setting-Atom-Separation-Distance-from-the-Blockade-Radius","page":"Rydberg Blockade","title":"Setting Atom Separation Distance from the Blockade Radius","text":"","category":"section"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Suppose given certain arrangement of atoms, we would like to have atoms close to each other to be mutually blockaded, and distant atoms to be non-blockaded. This corresponds to a unit disk graph and the distance scale can be set by the blockade radius R_b. For any two atoms within the unit disk radius R_u, the energy scale of having both in the Rydberg state must be much larger than Omega; this sets a lower bound for R_u compared to R_b. On the other hand, for any two atoms outside of the unit disk radius, the energy scale of having both be in the Rydberg state must be much smaller than Omega, as the two atoms should not be blockaded; this sets an upper bound for R_u, as there are still 1R^6 interactions between nearby atoms which may \"accidentally\" blockade each other if R_u is too large to include the supposedly unblockaded atoms. This upper bound on R_u guarantees that dynamics occur within the correct independent set subspace and is not affected by long-range \"Rydberg tails\", which cause each independent set state to have a slightly different energy.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"More specifically, we denote the lower bound as R_textmin, which is the minimum R_u can be without removing any edges from the unit disk graph. Equivalently, it is the maximum distance between vertices that are connected by an edge. We denote the upper bound as R_textmax, which is the maximum R_u can be without adding any additional edges to the unit disk graph. This is equivalently the minimum distance between vertices that are not connected by an edge in the unit disk graph. Therefore, we have R_textminleq R_u  R_textmax.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The actual scale for R_textmin R_u R_textmax can be set by R_b. In order to fulfill the condition","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":" fracC_6R_textmax^6 ll Omega equiv fracC_6R_b^6 ll fracC_6R_textmin^6","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"as much as possible, it's best to have","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"R_b = sqrtR_textmin R_textmax = R_textmin times sqrtfracR_textmaxR_textmin\nquad Rightarrow quad R_textmin = R_b times sqrtfracR_textminR_textmax","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Now, there are several characteristic distances. To summarize, we have:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"R_u is the unit disk radius of the graph. Usually, this is taken to be R_u = R_textmin, though generally R_textmin leq R_u  R_textmax.\nR_textmin is the minimum R_u can be without removing any edges from the unit disk graph.\nR_textmax is the maximum R_u can be without adding any edges from the unit disk graph.\nR_b is the blockade radius of the system defined as C_6R_b^6 = Omega. It's preferable to scale R_textmin and R_textmax such that R_b = sqrtR_textmin R_textmax.\nR_s is the subspace radius, at which it is a good approximation to truncate the Hilbert space when two Rydberg excitations are closer than R_s. We have R_s leq R_b.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Note that R_s is used only for faster simulation in the truncated blockade subspace. The smaller the R_s, the better the approximation for the simulation. When R_s = 0, one recovers the full-space simulation.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Below, we explain how to set the distance scale using a few example unit disk graphs.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Note that acronyms such as \"NN\", \"NNN\", and \"NNNN\" found in this page and its diagrams/tables stand for \"Nearest-Neighbor\", \"Next Nearest-Neighbor\", and \"Next Next Nearest-Neighbor\", denoting the furthest atom that can feel the blockading effect of another atom.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"(Image: BlockadRadius)","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"In the examples above, R_textmin is the radius of the dark-red disk, R_textmax is the radius of the light-red disk, and R_b is the radius of the red-dashed circle. The ratios R_textmaxR_textmin are shown for several arrangements of atoms. For the 1D chain with nearest-neighbor blockade, let's say the lattice constant is a with R_textmin = a and R_textmax = 2a. So with R_b = sqrtR_textmin R_textmax, we have a = R_bsqrt2. Therefore:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"given Omega = 2pi times 4 MHz,\nwe haveR_b = (C_6  Omega)^16 approx 774 μm,\nand a = R_b sqrt2 approx 548 μm.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Thus, for the Z_2 phase transition in the upcoming Adiabatic Evolution example and and in a 1D system paper (H. Bernien et al. (10.1038/nature24622)), it is good to set a = 548 μm. Similarly, one can compute that a = 316 μm and a = 224 μm will be good choices for observing Z_3 and Z_4 phase transitions in the 1D chain. For the 2D square lattice, a = 651 μm and a = 460 μm are good options for observing the checkerboard phase (nearest-neighbor blockade) and the striated phase (next-nearest-neighbor blockade) as in this paper (S. Ebadi et al. (10.1038/s41586-021-03582-4)), following the same rationale as above. Here, we summarize the recommended lattice constants (unit μm) for common lattices in the following table:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":" R_textmin R_textmax a for Omega = 2pi times 4 MHz a for Omega = 2pi times 10 MHz\nChain Z_2 a 2a 5.48 4.70\nChain Z_3 2a 3a 3.16 2.71\nChain Z_4 3a 4a 2.24 1.92\nSquare checkerboard a sqrt2a 6.51 5.59\nSquare striated sqrt2a 2a 4.60 3.95\nSquare star 2a sqrt5a 3.66 3.14\nLieb NN a 2a 5.48 4.70\nLieb NNN 2a sqrt5a 3.66 3.14\nLieb NNNN sqrt5a sqrt8a 3.08 2.64\nTriangular NN a sqrt3a 5.88 5.05\nTriangular NNN sqrt3a 2a 4.16 3.57\nHoneycomb NN a sqrt3a 5.88 5.05\nHoneycomb NNN sqrt3a 2a 4.16 3.57\nKagome NN a sqrt3a 5.88 5.05\nKagome NNN sqrt3a 2a 4.16 3.57","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Other than regular lattices, for an example arbitrary graph shown in the right most panel of the above figure, one only has R_textmaxR_textmin approx 115. Thus, there is only a small window to set the unit disk radius, and the energy scale for the blockaded versus non-blockaded Rydberg interaction is not as large (115^6 approx  234). Thus, the blockade approximation for the atoms with a separation close to the blockade radius will not be as good. For accurate simulation of the actual Rydberg dynamics, one should take a subspace radius R_s ll R_textmin. Therefore, we can see that graphs on a regular lattice typically have larger and better energy separation between the blockaded and the non-blockaded states than arbitrary graphs.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Below, we give an example of doing the simulation in the blockade subspace for a ring system. For more information on subspace emulation, please refer to the subspace page.","category":"page"},{"location":"tutorials/1.blockade/main/#Example-Dynamics-in-the-Blockade-Subspace","page":"Rydberg Blockade","title":"Example Dynamics in the Blockade Subspace","text":"","category":"section"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"To emphasize the effectiveness of the subspace emulation, some example non-equilibrium dynamics are shown below, for a ring of 12 atoms separated by R_textmin = 69 μm. The minimum distance of atoms not within the blockade radius is R_textmax approx 1333 μm (next-nearest neighbor separation), Thus, the blockade radius can be R_b = 69 times sqrt133369 approx 959 μm. This blockade energy scale corresponds to Omega approx 2pi times 111 MHz, and the perturbative limits are Omega ll C_6R_textmin approx 799 MHz and Omega gg C_6R_textmax approx 015 MHz.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Note that in this example, we set the blockade radius from R_textmin and R_textmax, and then obtain Rabi frequency Omega from the blockade radius. In practice, it's often the opposite order for specification on the hardware. Omega is typically limited by the laser power on the hardware. Thus, one starts from a given Omega, which determines the blockade radius, R_b, which can then inform the separation between atoms as described in the previous section. If one starts from the atom separation distance first, it may often result in a Rabi frequency that is too large or too small to be feasible on the neutral-atom hardware.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The set of atoms for this ring example can be defined by:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"using Bloqade\nnsites = 12; # 12-site ring\nunit_disk_radius = 6.9 # Distance between nearest-neighbor atoms, in microns; R_min\n\nR = unit_disk_radius / (2 * sin(2 * pi / (nsites) / 2)) # Radius of the circle, using a little trigonometry; it is also the next-nearest neighbor distance, R_max.\npos = [(R * sin(i * 2 * pi / (nsites)), R * cos(i * 2 * pi / (nsites))) for i in 1:nsites] # Positions of each atom\natoms = AtomList(pos); # Define the atom positions as an AtomList.\n\nblockade_radius = sqrt(unit_disk_radius * R);  # R_b = \\sqrt{R_min R_max}","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The system is driven by a constant Rabi drive, which couples each atom's ground and Rydberg state. The Hamiltonian can be defined in Bloqade with:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"C6 = 2π * 862690;\nΩ = C6 / blockade_radius^6\nh = rydberg_h(atoms; Ω = Ω);","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The system is then initialized into the ground state of all atoms, which is the lowest energy of the classical Hamiltonian. We have two choices for the basis: the first choice is the full Hilbert space of 2^12 states, whereas the second basis is the blockade subspace, which excludes Rydberg excitations within the subspace radius, R_s. In principle, the subspace radius can be taken to be any value less than the blockade radius, but for better approximation, it is better to take smaller R_s. Typically, R_s  R_b  17 will be a reasonably good approximation, since states with Rydberg interaction 17^6  Omega approx 24  Omega will be then truncated, and the perturbative truncation error is typically in second order. For R_s = 0, no states are excluded and one recovers the exact dynamics. For a subspace radius anywhere between R_textmin and R_textmax, the subspace is the same, as there are no vertices having a separation within those radii. Here, we choose the subspace radius for the ring of atoms to be the unit disk radius, which corresponds to truncating the states having a Rydberg interaction (R_bR_u)^6  Omega approx 72  Omega. For more general graphs, it may be reasonable to choose the subspace radius to be smaller than the unit disk radius and include extra states to improve the fidelity of the energy truncation. For example, for the next-nearest-neighbor line, it may be reasonable to choose the subspace radius to be half the blockade radius, which includes high-energy NNN blockaded states to improve numerical accuracy. See the Working With Subspace page in the manual for more details:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"subspace_radius = unit_disk_radius # R_s\n\ninit_state = zero_state(nsites) # Define the initial state in the full space.\nspace = blockade_subspace(atoms, subspace_radius) # Compute the blockade subspace with R_s.\ninit_state2 = zero_state(space); # Define the initial state in the blockade subspace.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"The blockade subspace has D=322 basis states, which is much smaller than 2^12, so the emulation will be much faster. If the atoms were far apart and non-interacting, each atom would oscillate completely between its ground state and Rydberg state with a period of approx 05 μs. However, because adjacent atoms shift to the Rydberg state concurrently, they are dynamically blockaded, causing the maximum Rydberg density to only be 12, corresponding to an antiferromagnetic Z_2 state. Note that because the ring has a translation symmetry, the Rydberg density is equal on all sites:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Tmax = 6.0\nnsteps = 2001\ntimes = LinRange(0, Tmax, nsteps)\ndt = Tmax / (nsteps - 1)\n\nprob = SchrodingerProblem(init_state, Tmax, h, dt = dt, adaptive = false);\nintegrator = init(prob, Vern8());\n\ndensities = [] # Time evolve the system in the full space\nfor _ in TimeChoiceIterator(integrator, 0.0:dt:Tmax)\n    push!(densities, rydberg_density(init_state, 1))\nend\n\nprob2 = SchrodingerProblem(init_state2, Tmax, h, dt = dt, adaptive = false);\nintegrator2 = init(prob2, Vern8());\n\ndensities2 = [] # Time evolve the system in the subspace\nfor _ in TimeChoiceIterator(integrator2, 0.0:dt:Tmax)\n    push!(densities2, rydberg_density(init_state2, 1))\nend","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Plot the data:","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"using PythonCall # Use matplotlib to generate plots\nmatplotlib = pyimport(\"matplotlib\")\nplt = pyimport(\"matplotlib.pyplot\")\n\nax = plt.subplot(1, 1, 1)\nplt.plot(times, real(densities), \"k\", label = \"Full space\")\nplt.plot(times, real(densities2), \"r--\", label = \"Subspace\")\nax.axis([0, Tmax, 0, 0.45])\nplt.xlabel(\"Time (us)\")\nplt.ylabel(\"Rydberg density\")\nplt.tight_layout()\nplt.legend()\n\ninset_axes = pyimport(\"mpl_toolkits.axes_grid1.inset_locator\")\nax2 = inset_axes.inset_axes(ax, width = \"20%\", height = \"30%\", loc = \"lower right\", borderpad = 1)\nplt.plot(times, real(densities - densities2))\nplt.axis([0, 0.5, -0.001, 0.003])\nplt.ylabel(\"Difference\", fontsize = 12)\nplt.yticks(LinRange(-0.001, 0.003, 5), fontsize = 12);\nplt.xticks([0, 0.2, 0.4, 0.6], fontsize = 12);","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"(Image: RydbergBlockadeSubspace)","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"Data for this evolution is shown above, where exact evolution in the full space is shown by the black line, and the truncated evolution in the subspace is shown by the red dashed line. It is clear that even though the Hilbert space is 12 times smaller, the dynamics are faithfully reproduced, up to high frequency oscillations (inset) from adjacent atoms in the Rydberg state, similar to the high frequency oscillations of the 2-atom conditional blockade example above. However, at longer times, this subspace approximation fails to reproduce the full space (shown by divergence between the black and red dashed lines), as the perturbative effects become relevant over longer timescales.","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"","category":"page"},{"location":"tutorials/1.blockade/main/","page":"Rydberg Blockade","title":"Rydberg Blockade","text":"This page was generated using Literate.jl.","category":"page"},{"location":"julia/#The-Julia-Programming-Language","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"The Bloqade project is built in the Julia programming language.  For those who are not familiar with Julia, here is a quick start for some basic Julia grammar, and a guide for learning more about Julia and advanced usage.","category":"page"},{"location":"julia/#Why-Julia?","page":"The Julia Programming Language","title":"Why Julia?","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Fast. As you might have heard, Julia is very fast; there are various benchmarks online.   It can be used to even write Basic Linear Algebra Subroutine (BLAS) to reach performance that is on par with the   manually optimized assembly with C (check Octavian).\nGeneric. The language itself and its ecosystem are built to be generic, and the compiler can specialize   on generic methods automatically. Thus, you will find that a lot things can be combined easily, and they will   just work, e.g. plugging in the Measurement number from    Measurement.jl into your ODE solver, you will get error propagation automatically; plugging in Tropical numbers or in general a semi-ring algebra into a tensor-network contraction function, you can   solve optimization problems with tensor networks, and so on.\nDifferentiable. The language is differentiable, which means you can calculate the derivatives   using an automatic differentiation (AD) engine on the whole language. The AD ecosystem in Julia is very well developed and supported.    The current stable AD engine   is powered by Zygote and the next generation AD engine includes   Diffractor (check the video talk on ACM SIGPLAN) and   Enzyme.\nExtensible. The language is designed to be compiler friendly. It supports staged programming   as well as compiler plugins. This makes supporting new hardware much easier. As a result, Julia   can conveniently support multiple different hardware, such as CUDA,   oneAPI, TPU, and potentially quantum computers in the future.\nEasy. With all these powerful features, the language itself is still rather easy to learn. Let's go to   the quick start section to skim through the basic syntax.","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"info: Info\nMulti-stage programming (MSP) is a variety of metaprogramming in which compilation is divided into a series of intermediate phases, allowing type-safe run-time code generation. Statically defined types are used to verify that dynamically constructed types are valid and do not violate the type system. – Wikipedia","category":"page"},{"location":"julia/#Quick-Start","page":"The Julia Programming Language","title":"Quick Start","text":"","category":"section"},{"location":"julia/#Variables-and-Some-Basic-Types","page":"The Julia Programming Language","title":"Variables and Some Basic Types","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, you can define a variable similar to how you define it in Python.  For example, you can define a x using = (assignment):","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"x = 1","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Every variable has a type. You can check it using typeof:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"typeof(x)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"By default, Julia displays the output of the last operation. You can suppress the output by adding ; (a semicolon) at the end.","category":"page"},{"location":"julia/#Functions","page":"The Julia Programming Language","title":"Functions","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, you can also define short-form, one-line functions using = (assignment) similar to how you write things mathematically.","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"f(x) = 2x","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Typing the function's name gives information about the function. To call it, we must use parentheses:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"f\nf(2)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"For longer functions, we use the following syntax with the function keyword and end:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"function g(x, y)\n\tz = x + y\n\treturn z^2\nend","category":"page"},{"location":"julia/#Control-Flows","page":"The Julia Programming Language","title":"Control Flows","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, there are for, if and while control flows. For example, the for loop looks like:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"s = 0\nfor i in 1:10\n    s += 1\nend","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"we can now check the value of s by typing it again:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"s","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Here, 1:10 is a range representing the numbers from 1 to 10:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"typeof(1:10)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"the if else statement looks like the following:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"if s < 10\n\t# do something\nelseif 10 < s < 13\n\t# do something\nelse\n\t# do something\nend","category":"page"},{"location":"julia/#Matrix-and-Array","page":"The Julia Programming Language","title":"Matrix and Array","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Julia carries its own Array type. If you use Python, it is similar to numpy.array in Python except:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"index starts from 1,\nthe multi-dimensional index is column-wise.","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"You can also use list comprehension:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"[i for i in 1:10]","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"It works for multi-dimensional case too:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"[(i, j) for i in 1:10, j in 1:5]","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Most functions involving matrices and arrays follow the same convention as numpy or MATLAB. For example, you can create a random matrix using:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"rand(5, 5)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"If you have questions about using a function, you can always type the question mark ? in your REPL following the function name:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> ?rand","category":"page"},{"location":"julia/#Package-Manager-and-Environments","page":"The Julia Programming Language","title":"Package Manager & Environments","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Julia carries its own package manager. You can use it as a normal package:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> using Pkg","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"To install a package, you can use:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> Pkg.add(\"Bloqade\")","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"To remove a package, you can use:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> Pkg.rm(\"Bloqade\")","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"All Julia programs run inside an environment. The default is the global environment. It is usually recommended to run your notebook in a local environment, so you won't hit any version conflicts between different packages. ","category":"page"},{"location":"julia/#Resources","page":"The Julia Programming Language","title":"Resources","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"For more resources, check the official website julialang.org/learning:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"<style>\n  iframe {\n    width: 1px;\n    min-width: 100%;\n    min-height: 1000px;\n  }\n</style>\n<iframe id=\"myIframe\" src=\"https://julialang.org/learning/\"></iframe>\n<script>\n  iFrameResize({ log: true }, '#myIframe')\n</script>","category":"page"}]
}
